<%
break_lines = lambda do |list, spaces = 2, separator = ","|
  list.join("#{separator}\n#{" " * spaces}") + separator
end

type_name = "#{@kit_name_pascal}Props"

props_types = @kit_props.map do |key, val|
  prop_name = key == "classname" ? "className" : key.camelize(:lower)
  prop_type = if key == "htmlOptions"
  "{ [key: string]: string | number | boolean | (() => void) | ((arg?: Event) => void) }"
            else
              case val
              when "enum", "one_of" then "'option_1' | 'option_2'"
              when "boolean", "bool" then "boolean"
              when "object", "obj" then "{ [key: string]: string }"
              else "string"
              end
            end

  "#{prop_name}?: #{prop_type}"
end
puts props_types.inspect

props_names = @kit_props.keys.map do |key|
                  case key
                  when "classname" || "className"
                    "className" 
                  when "aria"
                    "aria = {}"
                  when "data"
                    "data = {}"
                  when "htmlOptions"
                     "htmlOptions = {}"
                  else 
                    key
                  end
              end

%>
import React from 'react'
import classnames from 'classnames'
import { buildAriaProps, buildCss, buildDataProps, buildHtmlProps } from '../utilities/props'
import { globalProps } from '../utilities/globalProps'

type <%= type_name %> = {
  <%= break_lines.call(props_types) %>
}

const <%= @kit_name_pascal %> = (props: <%= type_name %>) => {
  const {
    <%= break_lines.call(props_names) %>
  } = props

  const ariaProps = buildAriaProps(aria)
  const dataProps = buildDataProps(data)
  const htmlProps = buildHtmlProps(htmlOptions)
  const classes = classnames(buildCss('pb_<%= @kit_name_underscore %>'), globalProps(props), className)

  return (
    <div
        {...ariaProps}
        {...dataProps}
        {...htmlProps}
        className={classes}
        id={id}
    >
    CONTENT HERE
    </div>
  )
}

export default <%= @kit_name_pascal %>
