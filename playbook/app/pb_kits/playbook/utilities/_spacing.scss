@import "../tokens/spacing";

$space_classes: (
	xxs: $space_xxs,
	xs: $space_xs,
	sm: $space_sm,
	md: $space_md,
	lg: $space_lg,
	xl: $space_xl,
	none: 0,
  auto: auto,
  initial: initial,
  inherit: inherit
);

$positions: (
	m: "margin",
	mr: "margin-right",
	ml: "margin-left",
	mt: "margin-top",
	mb: "margin-bottom",
	mx: ("margin-left", "margin-right"),
	my: ("margin-top", "margin-bottom"),
	p: "padding",
	pr: "padding-right",
	pl: "padding-left",
	pt: "padding-top",
	pb: "padding-bottom",
	px: ("padding-left", "padding-right"),
	py: ("padding-top", "padding-bottom")
);

@each $position_name, $position in $positions {
	@each $space_name, $space in $space_classes {
		.#{$position_name}_#{$space_name} {
			@if type-of($position)=="list" {
				@each $coordinate in $position {
					#{$coordinate}: #{$space} !important;
				}
			}
			@else {
				#{$position}: #{$space} !important;
			}
		}
	}
}

@each $size, $size_value in $breakpoints_max_only {
  @each $position_name, $position in $positions {
    @each $space_name, $space in $space_classes {
        $min_size: map-get($size_value, "min");
        $max_size: map-get($size_value, "max");
        .#{$position_name}_#{$size}_#{$space_name} {
          @if type-of($position)=="list" {
            @each $coordinate in $position {
              @include break_at( $max_size) {
              #{$coordinate}: #{$space} !important;
              }
            }
          }
          @else {
            @include break_at( $max_size) {
              #{$position}: #{$space} !important;
            }
          }
        }
    }
  }
}
