.position_relative {
  position: relative;
}

.position_absolute {
  position: absolute;
}

.position_fixed {
  position: fixed;
}

.position_sticky {
  position: sticky;
}

.position_static {
  position: static;
}

.z_index_1 {
  z-index: 100;
}

.z_index_2 {
  z-index: 200;
}

.z_index_3 {
  z-index: 300;
}

.z_index_4 {
  z-index: 400;
}

.z_index_5 {
  z-index: 500;
}

.z_index_6 {
  z-index: 600;
}

.z_index_7 {
  z-index: 700;
}

.z_index_8 {
  z-index: 800;
}

.z_index_9 {
  z-index: 900;
}

.z_index_10 {
  z-index: 1000;
}

$zIndex_values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;

@each $size, $size_value in $breakpoints_grid {
  @each $zIndex_value in $zIndex_values {
    $min_size: map-get($size_value, "min");
    $max_size: map-get($size_value, "max");

    .z_index_#{$size}_#{$zIndex_value} {
      @include break_on($min_size, $max_size) {
        z-index: #{$zIndex_value * 100} !important;
      }
    }
  }
}

$space_classes: (
  xxs: $space_xxs,
  xs: $space_xs,
  sm: $space_sm,
  md: $space_md,
  lg: $space_lg,
  xl: $space_xl,
  0: 0,
  auto: auto,
  initial: initial,
  inherit: inherit
);

$positions: "top", "right", "bottom", "left";


@mixin position-property($position, $space_name, $space, $is_inset: false) {
  @if $space_name == "0" {
    #{$position}: 0 !important;
  }
  @else if $space_name == "auto" or $space_name == "initial" or $space_name == "inherit" {
    #{$position}: #{$space} !important;
  }
  @else {
    @if $is_inset {
      #{$position}: #{$space} !important;
    } @else {
      #{$position}: #{-$space} !important;
    }
  }
}

@each $position in $positions {
  @each $space_name, $space in $space_classes {
    $space_name_str: "#{ $space_name }";
    .#{$position}_#{$space_name_str} {
      @include position-property($position, $space_name_str, $space)
    }
    .#{$position}_#{$space_name_str}_inset {
      @include position-property($position, $space_name_str, $space, true)
    }
  }
}