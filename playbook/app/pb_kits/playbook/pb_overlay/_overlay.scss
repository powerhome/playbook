@import "../tokens/colors";
@import "../tokens/spacing";

$overlay_sizes: (
  full: 100%,
  xxs: $space_xxs,
  xs: $space_xs,
  sm: $space_sm,
  md: $space_md,
  lg: $space_lg,
  xl: $space_xl,
);

$overlay_positions: left, right, top, bottom, x, y;

$overlay_colors: (
  card_light: $card_light,
  card_dark: $card_dark,
  bg_dark: $bg_dark,
  bg_light: $bg_light,
  black: $black,
  white: $white,
  success: $success,
  error: $error
);

@mixin overlay($direction, $size, $color, $apply_gradient: true) {
  display: block;
  position: absolute;
  pointer-events: none;
  z-index: 1;
  content: "";

  @if $apply_gradient {
    @if $direction == "left" {
      inset: 0 auto 0 0;
      background: linear-gradient(to right, $color 0%, transparent 100%);
      width: $size;
    } @else if $direction == "right" {
      inset: 0 0 0 auto;
      background: linear-gradient(to left, $color 0%, transparent 100%);
      width: $size;
    } @else if $direction == "top" {
      inset: 0 0 auto 0;
      background: linear-gradient(to bottom, $color 0%, transparent 100%);
      height: $size;
    } @else if $direction == "bottom" {
      inset: auto 0 0 0;
      background: linear-gradient(to top, $color 0%, transparent 100%);
      height: $size;
    }
  } @else {
    background: $color;
  }
}

[class^=pb_overlay] {
  position: relative;
  @each $color_name, $color in $overlay_colors {
    .overlay_#{$color_name} {
      @each $name, $size in $overlay_sizes {
        @each $position in $overlay_positions {
          &_#{$position}_#{$name} {
            @include overlay($position, $size, $color);
          }
        }
      }
    }
  }

  .overlay_linear_gradient {
    inset: 0;
    position: absolute;
    pointer-events: none;
    z-index: 1;
  }

  &.overlay-hide-scrollbar {
    & [class*="overflow_x_auto"],
    & [class*="overflow_y_auto"],
    & [class*="overflow_auto"] {
      &::-webkit-scrollbar {
        display: none !important;
      }

      -ms-overflow-style: none !important;
      scrollbar-width: none !important;
    }
  }

  &.overlay-full-screen {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100vw;
    height: 100vh;
    z-index: 9999;

    &.no_gradient {
      @each $color_name, $color in $overlay_colors {
        .overlay_#{$color_name} {
          @each $name, $size in $overlay_sizes {
            @each $position in $overlay_positions {
              &_#{$position}_#{$name} {
                @include overlay($position, $size, $color, false);
              }
            }
          }
        }
      }
    }

    @each $key, $value in $opacity {
      &.#{$key} {
        [class^=overlay] {
          opacity: $value;
        }
      }
    }
  }

  &.no_gradient {
    @each $color_name, $color in $overlay_colors {
      .overlay_#{$color_name} {
        @each $name, $size in $overlay_sizes {
          @each $position in $overlay_positions {
            &_#{$position}_#{$name} {
              @include overlay($position, $size, $color, false);
            }
          }
        }
      }
    }

    @each $key, $value in $opacity {
      &.#{$key} {
        [class^=overlay] {
          opacity: $value;
        }
      }
    }
  }
}
