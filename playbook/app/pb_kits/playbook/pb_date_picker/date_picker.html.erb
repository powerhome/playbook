<%= content_tag(:div,
    aria: object.aria,
    class: object.classname + object.error_class,
    data: object.data,
    id: object.id) do %>
  <div class="input_wrapper">


    <% if content.present? %>
      <%= content %>
    <% else %>
      <%= pb_rails("text_input", props: {
        aria: object.input_aria,
        autocomplete: false,
        dark: object.dark,
        data: object.input_data,
        disabled: object.disable_input,
        error: object.error,
        id: object.picker_id,
        label: object.hide_label ? nil : object.label,
        name: object.name,
        placeholder: object.placeholder,
        required: object.required,
      }) %>
    <% end %>
    <% if !object.hide_icon %>
      <div
          class="<%= object.icon_wrapper_class %>"
          id="cal-icon-<%= object.picker_id %>"
      >
        <%= pb_rails("icon", props: {
          classname: "cal_icon",
          icon: "calendar-alt"
        }) %>
      </div>
    <% end %>

    <!-- Inline -->
    <% if object.hide_icon && object.inline %>
      <!-- Plus Icon -->
      <div
          class="<%= object.icon_wrapper_class %>"
          id="<%= object.picker_id %>-icon-plus"
      >
        <%= pb_rails("icon", props: {
          classname: "plus-icon",
          icon: "plus"
        }) %>
      </div>

      <!-- Angle Down Icon -->
      <div
          class="<%= object.icon_wrapper_class %>"
          id="<%= object.picker_id %>-angle-down"
      >
        <%= pb_rails("icon", props: {
          classname: "angle_down_icon",
          icon: "angle-down"
        }) %>
      </div>
    <% end %>
    <!-- QuickPick Variant -->
    <% if object.selection_type === "quickpick"%>
      <%= pb_rails("popover", props: {
        close_on_click: "any",
        position: "bottom-start",
        trigger_element_id: "date-picker-quick-pick", 
        tooltip_id: "quickpick-tooltip", 
        padding: "none"
      }) do %>

          <%= pb_rails("nav", props: { variant: "subtle" }) do %>
            <% date_ranges.each do |date_range| %>
              <%= pb_rails("nav/item", props: {  
                classname: "date-range-option",
                cursor: "pointer",
                text: date_range[:label],
                data: {
                  start_date: date_range[:start_date],
                  end_date: date_range[:end_date],
                }
              }) %>
            <% end %>
          <% end %>
          
      <% end %>
      <p><%= object.end_date_element %></p>
    <% end %>
  </div>
  


  <%= javascript_tag do %>
    window.addEventListener("DOMContentLoaded", () => {
        datePickerHelper(<%= object.date_picker_config %>, "<%= object.scroll_container %>")
        const startDateElement = <%= object.start_date_element %>
        const endEateElement = <%= object.end_date_element %>

        const dateRanges = document.querySelectorAll(".date-range-option")

        const setDates = (startDate, endDate) => {
          startDateElement.value = startDate
          endEateElement.value = endDate
        }

        dateRanges.forEach((dateRange) => {
          dateRange.addEventListener("click", () => {
            const startDate = dateRange.getAttribute("data-start-date")
            const endDate = dateRange.getAttribute("data-end-date")
            setDates(startDate, endDate)
          })
        })
    })
  <% end %>
<% end %>
