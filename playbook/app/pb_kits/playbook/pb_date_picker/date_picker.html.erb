<%= pb_content_tag(:div,
    class: object.classname + object.error_class,
    'data-pb-date-picker' => true,
    'data-validation-message' => object.validation_message,
      ) do %>
  <div class="input_wrapper">
    <% if content.present? %>
      <%= content %>
    <% else %>
      <%= pb_rails("text_input", props: {
        aria: object.input_aria,
        autocomplete: false,
        cursor: object.cursor,
        dark: object.dark,
        data: object.input_data,
        disabled: object.disable_input,
        error: object.error,
        id: object.picker_id,
        label: object.hide_label ? nil : object.label,
        margin_bottom: "none",
        name: object.name,
        placeholder: object.placeholder,
        required: object.required,
      }) %>
    <% end %>

    <% if object.selection_type == "quickpick" %>
      <input type="hidden" id="<%= "#{object.start_date_id}" %>" name="<%= "#{object.start_date_name}" %>">
      <input type="hidden" id="<%= "#{object.end_date_id}" %>" name="<%= "#{object.end_date_name}" %>">
    <% end %>

    <% if !object.hide_icon %>
      <div
          class="<%= object.icon_wrapper_class %>"
          id="cal-icon-<%= object.picker_id %>"
      >
        <%= pb_rails("icon", props: {
          classname: "cal_icon",
          icon: "calendar-alt"
        }) %>
      </div>
    <% end %>

    <% if object.hide_icon && object.inline %>
      <!-- Plus Icon -->
      <div
          class="<%= object.icon_wrapper_class %> date-picker-inline-icon-plus"
          id="<%= object.picker_id %>-icon-plus"
      >
        <%= pb_rails("icon", props: {
          classname: "plus-icon",
          icon: "plus"
        }) %>
      </div>

      <!-- Angle Down Icon -->
      <div
          class="<%= object.icon_wrapper_class %> date-picker-inline-angle-down"
          id="<%= object.picker_id %>-angle-down"
      >
        <%= pb_rails("icon", props: {
          classname: "angle_down_icon",
          custom_icon: Playbook::Engine::root.join(angle_down_path)
        }) %>
      </div>
    <% end %>
  </div>

  <%= javascript_tag do %>
    (function() {
      // Add CSS for flipping the calendar
      const addFlipStyle = () => {
        if (document.getElementById('flatpickr-flip-style')) return;
        const style = document.createElement('style');
        style.id = 'flatpickr-flip-style';
        style.textContent = `
          .flatpickr-calendar.open.openTop {
            top: auto !important;
            bottom: calc(100% + 2px) !important;
          }
          .flatpickr-calendar.open.openTop::before {
            transform: rotate(180deg) !important;
            top: auto !important;
            bottom: -6px !important;
          }
        `;
        document.head.appendChild(style);
      };

      // Apply flip logic when calendar opens
      const applyFlipOnOpen = (input) => {
        const fp = input._flatpickr;
        if (!fp || fp.__flipHookAdded) return;
        fp.__flipHookAdded = true;

        fp.config.onOpen.push(() => {
          const wrapper = input.closest('.flatpickr-wrapper') || input;
          const { bottom } = wrapper.getBoundingClientRect();
          const spaceBelow = window.innerHeight - bottom;
          const cal = fp.calendarContainer;
          const calHeight = cal.getBoundingClientRect().height;

          if (spaceBelow < calHeight) {
            cal.classList.add('openTop');
          } else {
            cal.classList.remove('openTop');
          }
        });
      };

      // Clear Flatpickr input on error
      const clearErrorInput = () => {
        const input = document.getElementById("<%= object.picker_id %>");
        if (input && input.closest('.error') && input._flatpickr) {
          input._flatpickr.clear();
        }
      };

      // Initialize date picker and apply logic
      const loadDatePicker = () => {
        addFlipStyle();
        datePickerHelper(<%= object.date_picker_config %>, "<%= object.scroll_container %>");

        const input = document.getElementById("<%= object.picker_id %>");
        if (input) {
          applyFlipOnOpen(input);
          clearErrorInput();
        }

        if (<%= object.selection_type == "quickpick" %>) {
          input.addEventListener("change", ({ target }) => {
            const startDate = document.getElementById("<%= object.start_date_id %>");
            const endDate = document.getElementById("<%= object.end_date_id %>");
            const splittedValue = target.value.split(" to ");
            startDate.value = splittedValue[0];
            endDate.value = splittedValue[1] ? splittedValue[1] : splittedValue[0];
          });
        }
      };

      // Event listeners
      window.addEventListener("DOMContentLoaded", loadDatePicker);
      <% if !object.custom_event_type.empty? %>
        window.addEventListener("<%= object.custom_event_type %>", loadDatePicker);
      <% end %>
    })();
  <% end %>
<% end %>
