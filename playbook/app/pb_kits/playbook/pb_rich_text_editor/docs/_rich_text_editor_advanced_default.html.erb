 <%= pb_rails("caption", props: { text: "Advanced Default" }) %>
<%= pb_rails("rich_text_editor", props: { 
  rails_advanced_editor: true,
  margin_bottom: "md",
  placeholder: "Start typing your content here...",
  value: "Add your text here. You can format your text, add links, quotes, and bullets. This is the <strong>TipTap-based</strong> rich text editor rendered through Rails which requires a direct import of Tiptap into the tsx file.",
}) %>

<%= pb_rails("caption", props: { text: "Advanced Extra Extensions" }) %>
<%= pb_rails("body", props: { margin_bottom: "md", text: "Not sure if possible: I think any extensions we want to use will need to be set up directly like all the examples below." }) %>

<%= pb_rails("caption", props: { text: "AdvancedToolbar disabled" }) %>
<%= pb_rails("rich_text_editor", props: { 
    rails_advanced_editor: true,
    advanced_editor_toolbar: false,
    margin_bottom: "md",
    placeholder: "Advanced editor without toolbar...",
    value: "<p>This advanced editor has the toolbar disabled, showing only the content area.</p>"
}) %>

<%= pb_rails("caption", props: { text: "Advanced Simple" }) %>
<%= pb_rails("rich_text_editor", props: { 
  rails_advanced_editor: true,
  margin_bottom: "md",
  simple: true,
  placeholder: "Simple advanced editor with minimal toolbar...",
  value: "<p>This is a <strong>simple</strong> version of the advanced editor with fewer toolbar options.</p>"
}) %>

<%= pb_rails("caption", props: { text: "Advanced Attributes" }) %>
<%= pb_rails("rich_text_editor", props: {
  aria: { label: "rich-textarea" },
  data: { key: "value", key2: "value2" },
  name: "textarea-label",
  rails_advanced_editor: true,
  margin_bottom: "md",
  placeholder: "Advanced editor with attributes...",
  value: "<p>This advanced editor has attributes, aria, and data attributes.</p>"
}) %>

<%= pb_rails("caption", props: { text: "Advanced Focus" }) %>
<%= pb_rails("rich_text_editor", props: { 
  rails_advanced_editor: true,
  focus: true,
  margin_bottom: "md",
  placeholder: "Advanced editor with focus behavior...",
  value: "<p>This advanced editor shows the toolbar only when focused.</p>"
}) %>

<%= pb_rails("caption", props: { text: "Advanced Sticky" }) %>
<%= pb_rails("rich_text_editor", props: { 
  rails_advanced_editor: true,
  sticky: true,
  margin_bottom: "md",
  placeholder: "Advanced editor with sticky toolbar...",
  value: "<p>In this example, when you scroll down, the rich text editor's toolbar will scroll along with the page and it will no longer be visible at the top of the page. Dummy text to enable scroll.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ornare lorem ut pellentesque tempor. Vivamus ut ex vestibulum velit rich text editor eleifend fringilla. Sed non metus dictum, elementum mauris wysiwyg html editor non, sagittis odio. Nullam pellentesque leo sit amet ante suscipit wysiwyg html editor sagittis. Donec tempus vulputate suscipit. Ut non felis rich text editor ac dolor pulvinar lacinia eu eget urna. Sed tincidunt sapien vulputate tellus fringilla sodales. Morbi accumsan dui wysiwyg html editor sed massa pellentesque, quis vestibulum lectus scelerisque. Nulla ultrices mi id felis luctus aliquet. Donec nec ligula wysiwyg html editor pretium sapien semper dictum eu id quam. Etiam ut sollicitudin nibh. Quisque eu ultrices dui. Nunc rich text editor congue, enim vitae dictum dignissim, libero nisl sagittis augue, non aliquet nibh tortor sit amet ex. Aliquam cursus maximus rich text editor mi eu consequat. Nullam tincidunt erat et placerat mattis. Nunc rich text editor congue, enim vitae dictum dignissim, libero nisl sagittis augue, non aliquet nibh tortor sit amet ex. Aliquam cursus maximus mi eu consequat. Nullam tincidunt erat et placerat mattis.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ornare lorem ut pellentesque tempor. Vivamus ut ex vestibulum velit rich text editor eleifend fringilla. Sed non metus dictum, elementum mauris wysiwyg html editor non, sagittis odio. Nullam pellentesque leo sit amet ante suscipit wysiwyg html editor sagittis. Donec tempus vulputate suscipit. Ut non felis rich text editor ac dolor pulvinar lacinia eu eget urna. Sed tincidunt sapien vulputate tellus fringilla sodales. Morbi accumsan dui wysiwyg html editor sed massa pellentesque, quis vestibulum lectus scelerisque. Nulla ultrices mi id felis luctus aliquet. Donec nec ligula wysiwyg html editor pretium sapien semper dictum eu id quam. Etiam ut sollicitudin nibh. Quisque eu ultrices dui. Nunc rich text editor congue, enim vitae dictum dignissim, libero nisl sagittis augue, non aliquet nibh tortor vulputate suscipit. Ut non felis rich text editor ac dolor pulvinar lacinia eu eget urna. Sed tincidunt sapien vulputate tellus fringilla sodales. Morbi accumsan dui wysiwyg html editor sed massa pellentesque, quis vestibulum lectus scelerisque. Nulla ultrices mi id felis luctus aliquet. Donec nec ligula wysiwyg html editor pretium sapien semper dictum eu id quam. Etiam ut sollicitudin nibh. Quisque eu ultrices dui. Nunc rich text editor congue, enim vitae dictum dignissim, libero nisl sagittis augue, non aliquet nibh tortor sit amet ex. Aliquam cursus maximus rich text editor mi eu consequat. Nullam tincidunt erat et placerat mattis. Nunc rich text editor congue, enim vitae dictum dignissim, libero nisl sagittis augue, non aliquet nibh tortor sit amet ex. Aliquam cursus maximus mi eu consequat. Nullam tincidunt erat et placerat mattis.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ornare lorem ut pellentesque tempor. Vivamus ut ex vestibulum velit rich text editor eleifend fringilla. Sed non metus dictum, elementum mauris wysiwyg html editor non, sagittis odio. Nullam pellentesque leo sit amet ante suscipit wysiwyg html editor sagittis. Donec tempus vulputate suscipit. Ut non felis rich text editor ac dolor pulvinar lacinia eu eget urna.</p>"
}) %>
 
<%= pb_rails("caption", props: { text: "Advanced Templates" }) %>
<%= pb_rails("body", props: { margin_bottom: "md", text: "Not getting into this on POC feels like more of a nice to have" }) %>

<%= pb_rails("caption", props: { text: "Advanced Inline" }) %>
<%= pb_rails("rich_text_editor", props: { 
  rails_advanced_editor: true,
  inline: true,
  margin_bottom: "md",
  placeholder: "Advanced editor with inline toolbar...",
  value: "<p>This advanced editor has an inline toolbar, showing all the formatting options.</p>"
}) %>

 <%= pb_rails("caption", props: { text: "Advanced Preview" }) %>
<%= pb_rails("rich_text_editor", props: { 
  id: "advanced-preview-editor",
  rails_advanced_editor: true,
  margin_bottom: "md",
  placeholder: "Add text here, format it, and press 'Preview Output' to see what your stylized output will look like on the page.",
  value: "Add text here, format it, and press \"Preview Output\" to see what your stylized output will look like on the page."
}) %>

<%= pb_rails("button", props: { id: "advanced-preview-button", text: "Preview Output", variant: "secondary" }) %>

<div id="advanced-card-obfuscation" style="display:none">
  <%= pb_rails("card", props: { margin_top: "md", max_width: "md", padding: "sm" }) do %>
   <div id="advanced-content-preview" class="tiptap-content">
   </div>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    function handleAdvancedButtonClick() {
      // Find the specific TipTap editor container by ID
      const editorContainer = [...document.querySelectorAll('[data-pb-react-props]')]
        .find(element => element.getAttribute('data-pb-react-props')?.includes('"id":"advanced-preview-editor"'))

      if (!editorContainer) {
        console.log('Editor container not found')
        return
      }

      // Find the TipTap editor content
      const tiptapEditor = editorContainer.querySelector('.ProseMirror')
      const previewArea = document.getElementById('advanced-content-preview')
      const cardDiv = document.getElementById('advanced-card-obfuscation')

      console.log('Found elements:', { tiptapEditor, previewArea, cardDiv })

      if (tiptapEditor && previewArea && cardDiv) {
        // Get the HTML content from the TipTap editor
        const editorContent = tiptapEditor.innerHTML || ''
        console.log('Editor content:', editorContent)
        previewArea.innerHTML = editorContent 
        cardDiv.style.display = 'block'
      } else {
        console.log('Missing elements:', { tiptapEditor: !!tiptapEditor, previewArea: !!previewArea, cardDiv: !!cardDiv })
      }
    }

    document.getElementById('advanced-preview-button')?.addEventListener('click', handleAdvancedButtonClick)
  })
</script>