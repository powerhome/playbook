@import "../tokens/colors";
@import "../tokens/border_radius";
@import "../tokens/opacity";
@import "../pb_avatar/avatar";

$avatar-sizes: (
  "xxs":  20px,
  "xs":   28px,
  "sm":   38px,
  "md":   60px,
  "base": 60px,
  "lg":   80px,
  "xl":   100px,
);

@mixin avatar-size($size) {
  height: $size;
  width: $size;
  .avatar_wrapper {
    width: $size;
    height: $size;
  }
}

@mixin position($position) {
  position: absolute;
  @each $pos, $val in $position {
    #{$pos}: $val;
  }
}

[class^=pb_multiple_users_stacked_kit] {
  // Default variables
  $container_size: map-get($avatar-sizes, "xs");
  $bubble_container_size: map-get($avatar-sizes, "sm");
  $overlap: -15px;
  $border_size: 1px;
  $stacked_size: 18px;
  $max_to_display: 1, 2;

  display: inline-flex;
  width: $container_size;
  height: $container_size;
  flex-basis: $container_size;
  position: relative;
  flex-shrink: 0;
  flex-grow: 0;

  [class^=pb_avatar_kit].pb_multiple_users_stacked_item {
    @include avatar-size($stacked_size);

    &.dark {
      .avatar_wrapper {
        border: $border_size solid $bg_dark;
      }
    }

    .avatar_wrapper {
      border: $border_size solid $white;

      img {
        z-index: 0;
      }
    }
  }

  &[class*=_single] .pb_multiple_users_stacked_item {
    @include avatar-size($container_size);
  }

  [class^=pb_avatar_kit].second_item,
  [class^=pb_badge_kit].second_item {
    @include position((bottom: 0, right: 0));
    z-index: 2;
    background: tint($primary, 90%);
    border-radius: $border_rad_mega;
    padding: 0;

    span {
      transform: translateY(0);
    }

    .avatar_wrapper {
      border: $border_size solid $white;
      height: $stacked_size;
      width: $stacked_size;
    }
  }

  .stacked_item .avatar_wrapper::before {
    font-size: 0;
    color: transparent;
  }

  // Iterate over each size to adjust the bubble container only when class contains "_bubble_"
  @each $size_name, $size_value in $avatar-sizes {
      &[class*=_bubble_][class*=_size_#{$size_name}] {
        // Set bubble container size based on the class
        $bubble_container_size: $size_value;
        $container_size: $size_value;
  
        // Apply the bubble container size
        @include avatar-size($bubble_container_size);
        width: $bubble_container_size;
        height: $bubble_container_size;
        flex-basis: $bubble_container_size;
  
        background-color: $bg_light;
        border-radius: 50%;
  
        &.dark {
          background-color: $card_dark;
        }
  
        [class^=pb_avatar_kit].pb_multiple_users_stacked_item {
          @include avatar-size($bubble_container_size * 0.45); // Adjust the size of stacked avatars
  
          &.dark {
            .avatar_wrapper {
              border: $border_size solid $border_dark;
            }
          }
  
          .avatar_wrapper {
            border: $border_size solid $white;
          }
        }
  
        [class^=pb_avatar_kit] {
          // First Item
          &.first_item {
            @include position((top: $bubble_container_size * 0.1, left: $bubble_container_size * 0.1));
            @include avatar-size($bubble_container_size * 0.5);
  
            &.double_bubble {
              @include position((top: $bubble_container_size * 0.1, left: $bubble_container_size * 0.1));
              @include avatar-size($bubble_container_size * 0.5);
            }
  
            &.triple_bubble {
              @include position((top: $bubble_container_size * 0.1, left: $bubble_container_size * 0.1));
              @include avatar-size($bubble_container_size * 0.4);
            }
  
            &.quadruple_bubble {
              @include position((top: $bubble_container_size * 0.1, left: $bubble_container_size * 0.1));
              @include avatar-size($bubble_container_size * 0.4);
            }
          }
  
          // Second Item
          &.second_item {
            @include position((bottom: $bubble_container_size * 0.1, right: $bubble_container_size * 0.1));
            @include avatar-size($bubble_container_size * 0.3);
  
            &.double_bubble {
              @include position((bottom: $bubble_container_size * 0.1, right: $bubble_container_size * 0.1));
              @include avatar-size($bubble_container_size * 0.3);
            }
  
            &.triple_bubble {
              @include position((top: $bubble_container_size * 0.2, right: $bubble_container_size * 0.05));
            }
  
            &.quadruple_bubble {
              @include position((bottom: $bubble_container_size * 0.15, right: $bubble_container_size * 0.1));
            }
          }
  
          // Third Item
          &.third_item {
            @include position((bottom: $bubble_container_size * 0.05, left: $bubble_container_size * 0.3));
            @include avatar-size($bubble_container_size * 0.25);
  
            &.quadruple_bubble {
              @include position((bottom: $bubble_container_size * 0.05, left: $bubble_container_size * 0.25));
            }
          }
  
          // Fourth Item
          &.fourth_item {
            @include position((top: $bubble_container_size * 0.1, right: $bubble_container_size * 0.15));
            @include avatar-size($bubble_container_size * 0.2);
          }
        }
  
        &[class*=_single_bubble] {
          [class^=pb_avatar_kit].first_item {
            @include position((top: 0, left: 0));
            @include avatar-size($bubble_container_size);
          }
        }
      }
    }
  }
