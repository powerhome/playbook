{"version":3,"file":"js/application~main_sidebar-f7c66b9489a298c6b5a2.chunk.js","sources":["webpack:///./app/javascript/components/MainSidebar/NestedNavItems.tsx","webpack:///./app/javascript/components/MainSidebar/index.tsx","webpack:///./app/javascript/utilities/website_sidebar_helper.ts"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { NavItem } from \"playbook-ui\";\nimport { linkFormat } from \"../../utilities/website_sidebar_helper\";\n\nconst currentURL = window.location.pathname + window.location.search;\n\nexport const renderNavItem = (\n  link,\n  i,\n  collapsibles,\n  category,\n  type,\n  dark,\n  kit,\n  isActive,\n  setIsActive\n) => {\n  const [collapsed] = collapsibles[i];\n  //set up custom toggling\n  const handleMainClick = (index, categoryKey) => {\n    collapsibles.forEach(([, , setCollapsed], idx) => {\n      setIsActive(() => {\n        const newIsActive = {};\n        newIsActive[`${categoryKey}-${index}`] = true;\n        return newIsActive;\n      });\n      if (idx === index) {\n        setCollapsed(false);\n      } else {\n        setCollapsed(true);\n      }\n    });\n    //return true at end to disable default collapsible behavior\n    return true;\n  };\n\n  //click on nested items\n  const handleSubItemClick = (i, sublink) => {\n    setIsActive(() => {\n      const newIsActive = {};\n      newIsActive[`${sublink}-${i}`] = true;\n      return newIsActive;\n    });\n  };\n\n  //click on non-collapsible navitem click\n  const handleNonCollapseLinkClick = (link) => {\n    setIsActive(() => {\n      const newIsActive = {};\n      newIsActive[link] = true;\n      return newIsActive;\n    });\n  };\n\n  const generateLink = (categoryKey, sublink, type) => {\n    if (sublink) {\n      const link = `/kits/${sublink}/${type}`;\n      return currentURL === link ? \"\" : link;\n    } else {\n      const link = `/kit_category/${categoryKey}?type=${type}`;\n      return currentURL === link ? \"\" : link;\n    }\n  };\n\n  if (typeof link === \"object\") {\n    //useState for handling collapsed state\n    const [toggleNav, setToggleNav] = useState(false);\n    //useEffect to handle toggle to consolidate logic\n    useEffect(() => {\n      setToggleNav(isActiveCategory || hasActiveSublink ? false : collapsed);\n    }, [collapsed]);\n\n    //click event for right icon\n    const handleIconClick = (index) => {\n      collapsibles.forEach(([, ,], idx) => {\n        if (idx === index) {\n          toggleNav === true ? setToggleNav(false) : setToggleNav(true);\n        }\n      });\n    };\n\n    const categoryKey = Object.keys(link)[0];\n    const sublinks = link[categoryKey];\n    const isActiveCategory = isActive[i]\n      ? true\n      : Object.keys(isActive).length === 0\n      ? category === categoryKey\n      : false;\n\n    const calculateIsActiveCategory = (i, categoryKey, sublink) => {\n      if (sublink) {\n        return isActive[`${sublink}-${i}`]\n          ? true\n          : Object.keys(isActive).length === 0\n          ? kit === sublink\n          : false;\n      } else {\n        return isActive[`${categoryKey}-${i}`]\n          ? true\n          : Object.keys(isActive).length === 0\n          ? category === categoryKey\n          : false;\n      }\n    };\n\n    const hasActiveSublink = link[Object.keys(link)[0]].some(\n      (sublink) => sublink === kit\n    );\n\n    return (\n      <NavItem\n        active={calculateIsActiveCategory(i, categoryKey, null)}\n        collapsed={toggleNav}\n        collapsible\n        collapsibleTrail\n        cursor=\"pointer\"\n        dark={dark}\n        fontSize=\"small\"\n        iconRight={[\"plus\", \"minus\"]}\n        key={`${categoryKey}-${i}`}\n        link={generateLink(categoryKey, null, type)}\n        marginBottom=\"none\"\n        marginTop=\"xxs\"\n        onClick={() => handleMainClick(i, categoryKey)}\n        onIconRightClick={() => handleIconClick(i)}\n        paddingY=\"xxs\"\n        text={linkFormat(categoryKey)}\n      >\n        {sublinks.map((sublink, j) => (\n          <NavItem\n            active={calculateIsActiveCategory(j, null, sublink)}\n            cursor=\"pointer\"\n            dark={dark}\n            fontSize=\"small\"\n            key={`${sublink}-${j}`}\n            link={generateLink(categoryKey, sublink, type)}\n            marginY=\"none\"\n            onClick={() => handleSubItemClick(j, sublink)}\n            paddingY=\"xxs\"\n            text={linkFormat(sublink)}\n          />\n        ))}\n      </NavItem>\n    );\n  } else {\n    return (\n      <NavItem\n        active={\n          isActive[link]\n            ? true\n            : Object.keys(isActive).length === 0\n            ? kit === link\n            : false\n        }\n        cursor=\"pointer\"\n        dark={dark}\n        fontSize=\"small\"\n        key={`${link}-${i}`}\n        link={generateLink(null, link, type)}\n        marginBottom=\"none\"\n        marginTop=\"xxs\"\n        onClick={() => handleNonCollapseLinkClick(link)}\n        text={linkFormat(link)}\n        paddingY=\"xxs\"\n      />\n    );\n  }\n};\n","import React, { useState } from \"react\";\nimport { Nav, NavItem, useCollapsible } from \"playbook-ui\";\nimport { renderNavItem } from \"./NestedNavItems\";\n\nconst MainSidebar = ({ dark, type, category, kit, kits }) => {\n  //active state for navItems(will be dedundant once routing moved to react router)\n  const [isActive, setIsActive] = useState({});\n\n  //hook into collapsible logic for all nested nav items\n  const collapsibles = kits.map(() => useCollapsible());\n\n  //hook into collapsible logic for top level item\n  const [isTopLevelCollapsed, setIsTopLevelCollapsed] = useState(false);\n\n  const currentURL = window.location.pathname + window.location.search;\n  const componentsLink =\n    currentURL === `/kits${type ? `?type=${type}` : \"\"}`\n      ? \"\"\n      : `/kits${type ? `?type=${type}` : \"\"}`;\n\n  //set up toggling for top level item\n  const handleComponentsClick = (item) => {\n    setIsActive(() => {\n      const newIsActive = {};\n      newIsActive[item] = true;\n      return newIsActive;\n    });\n\n    //return true at end to disable default collapsible behavior\n    return true;\n  };\n\n  //right icon click for top level item\n  const handleComponentsIconClick = () => {\n    isTopLevelCollapsed === true\n      ? setIsTopLevelCollapsed(false)\n      : setIsTopLevelCollapsed(true);\n  };\n\n  const activeTopLevel = () => {\n    return isActive[\"top-nav-item\"]\n      ? true\n      : Object.keys(isActive).length === 0\n      ? currentURL === `/kits${type ? `?type=${type}` : \"\"}`\n      : false;\n  };\n\n  return (\n    <Nav dark={dark} variant=\"bold\" paddingTop=\"xxs\">\n      <NavItem\n        active={activeTopLevel()}\n        collapsed={isTopLevelCollapsed}\n        collapsible\n        collapsibleTrail\n        cursor=\"pointer\"\n        dark={dark}\n        fontSize=\"small\"\n        fontWeight=\"bolder\"\n        iconRight={[\"plus\", \"minus\"]}\n        key=\"top-nav-item\"\n        link={componentsLink}\n        marginY=\"none\"\n        onClick={() => handleComponentsClick(\"top-nav-item\")}\n        onIconRightClick={handleComponentsIconClick}\n        paddingY=\"xxs\"\n        text=\"Components\"\n      >\n        {kits.map((link, i) =>\n          renderNavItem(\n            link,\n            i,\n            collapsibles,\n            category,\n            type,\n            dark,\n            kit,\n            isActive,\n            setIsActive\n          )\n        )}\n      </NavItem>\n    </Nav>\n  );\n};\n\nexport default MainSidebar;\n","export const linkFormat = (item) => {\n  const linkTitle = Array.isArray(item) ? item[0] : item\n  const replaceUnderscore = linkTitle\n    .replace(/_/g, ' ')\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1)) \n    .join(' ')\n  return replaceUnderscore\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AAWA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAKA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAKA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAWA;AAKA;AAEA;;;;;;;;;;;;ACrFA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;;;;A","sourceRoot":""}