{"version":3,"file":"js/visual_guidelines-410e2936aed26b2387a1.chunk.js","sources":["webpack:///../node_modules/classnames/index.js","webpack:///./app/javascript/components/VisualGuidelines/Colors/Example.tsx","webpack:///./app/javascript/components/VisualGuidelines/Colors/StatusExample.tsx","webpack:///./app/javascript/components/VisualGuidelines/Colors/index.tsx","webpack:///./app/javascript/components/VisualGuidelines/Colors/variables.ts","webpack:///./app/javascript/components/VisualGuidelines/Examples/BorderRadius.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/Cursor.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/Display.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/FlexBox.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/Hover.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/LineHeight.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/MaxWidth.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/NumberSpacing.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/Position.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/Shadows.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/Spacing.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/TYPOGRAPHY_DATA.ts","webpack:///./app/javascript/components/VisualGuidelines/Examples/Typography.tsx","webpack:///./app/javascript/components/VisualGuidelines/Examples/ZIndex.tsx","webpack:///./app/javascript/components/VisualGuidelines/Templates/Example.tsx","webpack:///./app/javascript/components/VisualGuidelines/Templates/PropsValues.tsx","webpack:///./app/javascript/components/VisualGuidelines/Templates/SpacingProps.tsx","webpack:///./app/javascript/components/VisualGuidelines/index.tsx","webpack:///./app/javascript/packs/visual_guidelines.js"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  var nativeCodeString = '[native code]';\n  function classNames() {\n    var classes = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n          classes.push(arg.toString());\n          continue;\n        }\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n    return classes.join(' ');\n  }\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","/* eslint-disable flowtype/no-types-missing-file-annotation */\n// React Pure component - do not use state!\n\nimport React from 'react'\nimport cn from 'classnames'\n\nimport { Body, Title } from 'playbook-ui'\nimport { Example as ExampleType } from '../types'\n\nconst Example = ({\n  colors,\n  title,\n}: ExampleType): React.ReactElement => (\n  <React.Fragment>\n    <Title size=\"4\">{ title }</Title>\n    <ul className=\"pb--utlities-color\">\n      {colors.map(({ dark, name, variable }) => (\n        <li\n            className={cn({ dark })}\n            key={name}\n        >\n          <div className={`pb--color_${variable}`} />\n          <Body\n              className={cn({ dark, name: 'name' })}\n              tag=\"p\"\n          >\n            {name}\n          </Body>\n          <Body\n              className={cn({ dark, var: 'var' })}\n              tag=\"p\"\n          >\n            {`$${variable}`}\n          </Body>\n        </li>\n      ))}\n    </ul>\n  </React.Fragment>\n)\n\nexport default Example\n","/* eslint-disable flowtype/no-types-missing-file-annotation */\n// React Pure component - do not use state!\n\nimport React from 'react'\nimport cn from 'classnames'\n\nimport { Body, Card, SectionSeparator, Title } from 'playbook-ui'\nimport { StatusExample as StatusExampleType } from '../types'\n\nconst StatusExample = ({\n  statusColors,\n  subtleColors,\n  title,\n}: StatusExampleType): React.ReactElement => (\n  <React.Fragment>\n    <Title size=\"4\">{ title }</Title>\n    <Card\n        className=\"pb--utilities-card\"\n        padding=\"none\"\n    >\n      <ul className=\"pb--utlities-color pb--utilities-status-1\">\n        {statusColors.map(({ dark, name, variable }) => (\n          <li\n              className={cn({ dark })}\n              key={name}\n          >\n            <div className={`pb--color_${variable}`} />\n            <Body\n                className={cn({ dark, name: 'name' })}\n                tag=\"p\"\n            >\n              {name}\n            </Body>\n            <Body\n                className={cn({ dark, var: 'var' })}\n                tag=\"p\"\n            >\n              {`$${variable}`}\n            </Body>\n          </li>\n        ))}\n      </ul>\n      <div className=\"pb--utilities-seperator\">\n        <SectionSeparator\n            text=\"Subtle Variations\"\n        />\n      </div>\n      <ul className=\"pb--utlities-color pb--utilities-status-2\">\n        {subtleColors.map(({ dark, name, variable }) => (\n          <li\n              className={cn({ dark })}\n              key={name}\n          >\n            <div className={`pb--color_${variable}`} />\n            <Body\n                className={cn({ dark, name: 'name' })}\n                tag=\"p\"\n            >\n              {name.split('Subtle')}\n            </Body>\n            <Body\n                className={cn({ dark, name: 'name' })}\n                tag=\"p\"\n            >\n              {'Subtle'}\n            </Body>\n            <Body\n                className={cn({ dark, var: 'var' })}\n                tag=\"p\"\n            >\n              {`$${variable}`}\n            </Body>\n          </li>\n        ))}\n      </ul>\n    </Card>\n  </React.Fragment>\n)\n\nexport default StatusExample\n","/* eslint-disable flowtype/no-types-missing-file-annotation */\n\n// React Pure component - do not use state!\nimport React from 'react'\n\nimport { Title } from 'playbook-ui'\nimport Example from './Example'\nimport StatusExample from './StatusExample'\n\nimport {\n  ACTIONS,\n  ACTIVE,\n  BACKGROUND,\n  BORDER,\n  CARDS,\n  CATEGORY,\n  DATA,\n  PRODUCTS,\n  SHADOW,\n  STATUS,\n  STATUS_SUBTLE,\n  TEXT_COLORS,\n} from './variables'\n\nconst Colors = (): React.ReactElement => (\n  <React.Fragment>\n    <Title\n        marginBottom=\"lg\"\n        size={1}\n        tag=\"h1\"\n    >\n      {'Colors'}\n    </Title>\n    <Example\n        colors={TEXT_COLORS}\n        title=\"Text Colors\"\n    />\n    <Example\n        colors={BACKGROUND}\n        title=\"Backgrounds\"\n    />\n    <Example\n        colors={CARDS}\n        title=\"Cards\"\n    />\n    <StatusExample\n        statusColors={STATUS}\n        subtleColors={STATUS_SUBTLE}\n        title=\"Status\"\n    />\n    <Example\n        colors={DATA}\n        title=\"Data\"\n    />\n    <Example\n        colors={ACTIONS}\n        title=\"Actions\"\n    />\n    <Example\n        colors={ACTIVE}\n        title=\"Active\"\n    />\n    <Example\n        colors={BORDER}\n        title=\"Border\"\n    />\n    <Example\n        colors={SHADOW}\n        title=\"Shadow\"\n    />\n    <Example\n        colors={PRODUCTS}\n        title=\"Product Colors\"\n    />\n    <Example\n        colors={CATEGORY}\n        title=\"Category Colors\"\n    />\n  </React.Fragment>\n)\n\nexport default Colors\n","export const TEXT_COLORS = [\n  { name: 'Default', variable: 'text_lt_default' },\n  { name: 'Light', variable: 'text_lt_light' },\n  { name: 'Lighter', variable: 'text_lt_lighter' },\n  { name: 'Default Dk', variable: 'text_dk_default', dark: true },\n  { name: 'Light Dk', variable: 'text_dk_light', dark: true },\n  { name: 'Lighter Dk', variable: 'text_dk_lighter', dark: true },\n]\n export const BACKGROUND = [\n  {name: \"Bg Light\", variable: \"bg_light\"},\n  {name: \"Bg Dark\", variable: \"bg_dark\"},\n  {name: \"Bg Gradient\", variable: \"bg_gradient\"}\n ]\n\n export const CARDS = [\n  {name: \"Card Light\", variable: \"card_light\"},\n  {name: \"Card Dark\", variable: \"card_dark\", dark: true}\n ]\n\n export const STATUS = [\n  {name: \"Success\", variable: \"success\"},\n  {name: \"Warning\", variable: \"warning\"},\n  {name: \"Error\", variable: \"error\"},\n  {name: \"Info\", variable: \"info\"},\n  {name: \"Neutral\", variable: \"neutral\"},\n ]\n\n export const STATUS_SUBTLE = [\n  {name: \"Success Subtle\", variable: \"success_subtle\"},\n  {name: \"Warning Subtle\", variable: \"warning_subtle\"},\n  {name: \"Error Subtle\", variable: \"error_subtle\"},\n  {name: \"Info Subtle\", variable: \"info_subtle\"},\n  {name: \"Neutral Subtle\", variable: \"neutral_subtle\"}\n ]\n\n export const DATA = [\n  {name: \"Data 1\", variable: \"data_1\"},\n  {name: \"Data 2\", variable: \"data_2\"},\n  {name: \"Data 3\", variable: \"data_3\"},\n  {name: \"Data 4\", variable: \"data_4\"},\n  {name: \"Data 5\", variable: \"data_5\"},\n  {name: \"Data 6\", variable: \"data_6\"},\n  {name: \"Data 7\", variable: \"data_7\"},\n  {name: \"Data 8\", variable: \"data_8\"}\n ]\n\n export const ACTIONS = [\n  {name: \"Primary\", variable: \"primary_action\"}\n ]\n\n export const ACTIVE = [\n  {name: \"Active Light\", variable: \"active_light\"},\n  {name: \"Active Dark\", variable: \"active_dark\", dark: true}\n ]\n\n export const BORDER = [\n  {name: \"Border Light\", variable: \"border_light\"},\n  {name: \"Border Dark\", variable: \"border_dark\", dark: true}\n ]\n\n export const SHADOW = [\n  {name: \"Shadow\", variable: \"shadow\"}\n ]\n\n export const PRODUCTS = [\n  {name: \"Product 1 Background\", variable: \"product_1_background\"},\n  {name: \"Product 1 Highlight\", variable: \"product_1_highlight\"},\n  {name: \"Product 2 Background\", variable: \"product_2_background\"},\n  {name: \"Product 2 Highlight\", variable: \"product_2_highlight\"},\n  {name: \"Product 3 Background\", variable: \"product_3_background\"},\n  {name: \"Product 3 Highlight\", variable: \"product_3_highlight\"},\n  {name: \"Product 4 Background\", variable: \"product_4_background\"},\n  {name: \"Product 4 Highlight\", variable: \"product_4_highlight\"},\n  {name: \"Product 5 Background\", variable: \"product_5_background\"},\n  {name: \"Product 5 Highlight\", variable: \"product_5_highlight\"},\n  {name: \"Product 6 Background\", variable: \"product_6_background\"},\n  {name: \"Product 6 Highlight\", variable: \"product_6_highlight\"},\n  {name: \"Product 7 Background\", variable: \"product_7_background\"},\n  {name: \"Product 7 Highlight\", variable: \"product_7_highlight\"},\n  {name: \"Product 8 Background\", variable: \"product_8_background\"},\n  {name: \"Product 8 Highlight\", variable: \"product_8_highlight\"},\n  {name: \"Product 9 Background\", variable: \"product_9_background\"},\n  {name: \"Product 9 Highlight\", variable: \"product_9_highlight\"},\n  {name: \"Product 10 Background\",  variable: \"product_10_background\"},\n  {name: \"Product 10 Highlight\", variable: \"product_10_highlight\"}\n ]\n\n export const CATEGORY = [\n  {name: \"Category 1\", variable: \"category_1\"},\n  {name: \"Category 2\", variable: \"category_2\"},\n  {name: \"Category 3\", variable: \"category_3\"},\n  {name: \"Category 4\", variable: \"category_4\"},\n  {name: \"Category 5\", variable: \"category_5\"},\n  {name: \"Category 6\", variable: \"category_6\"},\n  {name: \"Category 7\", variable: \"category_7\"},\n  {name: \"Category 8\", variable: \"category_8\"},\n  {name: \"Category 9\", variable: \"category_9\"},\n  {name: \"Category 10\", variable: \"category_10\"},\n  {name: \"Category 11\", variable: \"category_11\"},\n  {name: \"Category 12\", variable: \"category_12\"},\n  {name: \"Category 13\", variable: \"category_13\"},\n  {name: \"Category 14\", variable: \"category_14\"},\n  {name: \"Category 15\", variable: \"category_15\"},\n  {name: \"Category 16\", variable: \"category_16\"},\n  {name: \"Category 17\", variable: \"category_17\"},\n  {name: \"Category 18\", variable: \"category_18\"},\n  {name: \"Category 19\", variable: \"category_19\"},\n  {name: \"Category 20\", variable: \"category_20\"},\n  {name: \"Category 21\", variable: \"category_21\"}\n ]\n","import React from 'react'\n\nimport {\n  Body,\n  Caption,\n  Flex,\n  Title,\n} from 'playbook-ui'\n\nimport Example from '../Templates/Example'\n\nconst TOKENS = {\n  'Rounded': '$border_radius_rounded',\n  'Extra Large': '$border_radius_xl',\n  'Large': '$border_radius_lg',\n  'Medium': '$border_radius_md',\n  'Small': '$border_radius_sm',\n  'Extra Small': '$border_radius_xs',\n  'None': '$border_radius_none',\n}\n\nconst DATASET = [\n  {name: 'Rounded', class: 'border_radius_rounded'},\n  {name: 'Extra Large', class: 'border_radius_xl'},\n  {name: 'Large', class: 'border_radius_lg'},\n  {name: 'Medium', class: 'border_radius_md'},\n  {name: 'Small', class: 'border_radius_sm'},\n  {name: 'Extra Small', class: 'border_radius_xs'},\n  {name: 'None', class: 'border_radius_none'},\n]\n\nconst BorderRadius = ({tokensExample}: { tokensExample: string }) => (\n  <React.Fragment>\n    <Title\n        size={1}\n        text='Border Radius'\n    />\n    <Body\n        marginBottom='lg'\n        marginTop='xs'\n        text='We have very specific settings for border radius to keep the interface looking consistent and clean. If you ever need to access these to build new things here are examples for how to do that.'\n    />\n    <Example\n        example={tokensExample}\n        tokens={TOKENS}\n    >\n      <Flex\n          align='center'\n          flexWrap='wrap'\n          justifyContent='center'\n          orientation='row'\n      >\n        {DATASET.map((data: {[key: string]: string}) => (\n          <div className='border_radius_container'>\n            <div className={data.class}/>\n            <Title\n                marginTop=\"xs\"\n                size={4}\n                tag=\"h4\"\n                text={data.name}\n            />\n            <Caption\n                size=\"xs\"\n                text={`$${data.class}`}\n            />\n          </div>\n        ))}\n      </Flex>\n    </Example>\n  </React.Fragment>\n)\n\nexport default BorderRadius\n","import React from \"react\"\nimport { Card, Caption, FlexItem, Flex, Body } from 'playbook-ui'\nimport Example from '../Templates/Example'\n\nconst CURSOR = [\n  \"auto\", \"default\", \"none\", \"contextMenu\", \"help\", \"pointer\", \"progress\", \"wait\", \"cell\",\n  \"crosshair\", \"text\", \"verticalText\", \"alias\", \"copy\", \"move\", \"noDrop\", \"notAllowed\", \"grab\",\n  \"grabbing\", \"eResize\", \"nResize\", \"neResize\", \"nwResize\", \"sResize\", \"seResize\", \"swResize\", \"wResize\",\n  \"ewResize\", \"nsResize\", \"neswResize\", \"nwseResize\", \"colResize\", \"rowResize\", \"allScroll\", \"zoomIn\", \"zoomOut\",\n]\n\nconst Cursor = ({ example }: { example: string }) => (\n  <>\n    <Example\n      example={example}\n      globalProps={{\n        cursor: CURSOR\n      }}\n      title=\"Cursor\"\n    />\n    <Card\n      marginTop=\"md\"\n      padding=\"none\"\n      rounded\n      shadow=\"deeper\"\n    >\n      <FlexItem>\n        <Card.Body>\n          <Caption\n            marginBottom=\"xs\"\n            text=\"Visual Guide\"\n          />\n\n          <Body text=\"Hover over any card below to display its cursor.\" marginBottom=\"sm\" />\n\n          <Flex gap=\"xxs\" wrap>\n            {CURSOR.map(function (cursor, i) {\n              return <Card borderRadius=\"none\" padding=\"xs\" cursor={cursor} key={i}>\n                {cursor}\n              </Card>\n            })}\n          </Flex>\n          </Card.Body>\n      </FlexItem>\n    </Card>\n  </>\n  )\n\n  export default Cursor","import React from 'react'\nimport {\n  Body,\n  Caption,\n  Table,\n  Title,\n} from 'playbook-ui'\n\nimport Example from '../Templates/Example'\n\nconst screenSizeProps = {\n  display: ['xs', 'sm', 'md', 'lg', 'xl']\n}\n\nconst UTILITY_CLASSES = [\n  {size: 'xs', media: '@media screen and (max-width: 575px)', class: '.display_xs_hidden', properties: 'display: hidden !important'},\n  {size: 'sm', media: '@media screen and (max-width: 576px)', class: '.display_sm_block', properties: 'display: block !important'},\n  {size: 'md', media: '@media screen and (max-width: 768px)', class: '.display_md_inline_block', properties: 'display: inline-block !important'},\n  {size: 'lg', media: '@media screen and (max-width: 992px)', class: '.display_lg_inline', properties: 'display: inline !important'},\n  {size: 'xl', media: '@media screen and (max-width: 1200px)', class: '.display_xl_flex', properties: 'display: flex !important'},\n]\n\nconst DISPLAY_VALUES = ['inline', 'flex', 'inline_flex', 'inline_block', 'block', 'none']\n\nconst Display = ({example}: {example: string}) => (\n  <React.Fragment>\n    <Example\n        example={example}\n        globalProps={{\n          display: DISPLAY_VALUES\n        }}\n        screenSizes={screenSizeProps}\n        title='Display'\n    />\n    <Title\n        size={4}\n        text='Utility Classes'\n    />\n    <Body\n        text='Just want the raw classes? We got you. All of our global props are simple CSS utilities available through classes.'\n        marginBottom='sm'\n    />\n    <Caption\n        text='Visual Guide'\n        marginBottom='sm'\n    />\n    <Table\n        shadow='deep'\n        size='sm'\n    >\n      <thead>\n        <tr>\n          <th>{'Screen Size'}</th>\n          <th>{'@Media Screen'}</th>\n          <th>{'Class'}</th>\n          <th>{'Properties'}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {UTILITY_CLASSES.map((utilityClass: {[key: string]: string}) => (\n          <tr>\n            <td>\n              {utilityClass.size}\n            </td>\n            <td>\n              {utilityClass.media}\n            </td>\n            <td>\n              {utilityClass.class}\n            </td>\n            <td>\n              {utilityClass.properties}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  </React.Fragment>\n)\n\nexport default Display\n","import React from 'react'\nimport { Pill, Table } from 'playbook-ui'\nimport Example from '../Templates/Example'\n\nconst SCREEN_SIZES = ['xs', 'sm', 'md', 'lg', 'xl']\n\nconst PROPS = {\n  flexDirection: ['row', 'column', 'rowReverse', 'columnReverse'],\n  flexWrap: ['wrap', 'nowrap', 'wrapReverse'],\n  justifyContent: ['start', 'end', 'center', 'spaceBetween', 'spaceAround', 'spaceEvenly'],\n  justifySelf: ['start', 'end', 'center', 'auto', 'stretch'],\n  alignItems: ['flexStart', 'flexEnd', 'start', 'end', 'center', 'stretch', 'baseline'],\n  alignContent: ['start', 'end', 'center', 'spaceBetween', 'spaceAround', 'spaceEvenly'],\n  alignSelf: ['start', 'end', 'center', 'auto', 'stretch', 'baseline'],\n  flex: ['none', 'initial', 'auto', '1'],\n  flexGrow: ['0', '1'],\n  flexShrink: ['0', '1'],\n  order: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', 'none']\n}\nconst TABLE_HEADERS = ['Props', 'Screen Sizes', 'Values']\n\nlet buildPillElement = (value, propName) => (\n  <Pill\n    key={`${propName}-${value}`}\n    text={value}\n    textTransform=\"none\"\n    variant=\"warning\"\n  />\n)\n\nconst FlexBox = ({example}: {example: string}) => (\n  <Example\n    example={example}\n    customChildren={true}\n    title='Flex Box'\n  >\n    <Table>\n      <thead>\n        <tr>\n          { TABLE_HEADERS.map((header, idx) => (\n            <th key={`${header}-${idx}`}>{header}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        { Object.keys(PROPS).map((propName: string, idx) => (\n          <tr key={`${propName}-${idx}`}>\n            <td>\n              <Pill\n                text={propName}\n                textTransform=\"none\"\n              />\n            </td>\n            <td>\n              { SCREEN_SIZES.map((value) => (\n                buildPillElement(value, propName)\n              ))}\n            </td>\n            <td>\n              { PROPS[propName].map((value) => (\n                buildPillElement(value, propName)\n              ))}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  </Example>\n)\n\nexport default FlexBox\n","import React from 'react'\nimport {\n  Body,\n  Button,\n  Caption,\n  Card,\n  Flex,\n  FlexItem,\n  Icon,\n  Pill,\n  SectionSeparator,\n  Table,\n  Title,\n} from 'playbook-ui'\n\nimport Example from '../Templates/Example'\n\nconst shadowArr = ['deep', 'deeper', 'deepest']\nconst scaleObj = { 'sm': '@1.05', 'md': '@1.10', 'lg': '@1.15' }\n\nconst Hover = ({ example }: { example: string }) => (\n  <React.Fragment>\n    <Title\n        marginBottom=\"sm\"\n        size={1}\n        tag=\"h1\"\n        text=\"Hover\"\n    />\n    <Body\n        paddingBottom=\"xxs\"\n        text=\"Adding our hover prop is usefull for easily customizing UI for kit ineractions.\"\n    />\n    <Button\n        link=\"https://codesandbox.io/s/playbook-global-hover-prop-example-forked-mhssmm?file=/src/App.js\"\n        newWindow\n        padding=\"none\"\n        tabIndex={0}\n        variant=\"link\"\n    >\n      <Body\n          variant=\"link\"\n      >\n        {'See this prop in action in our sample UI'}\n        <Icon\n            fixedWidth\n            icon=\"angle-right\"\n        />\n      </Body>\n    </Button>\n    <Title\n        marginBottom=\"xs\"\n        marginTop=\"md\"\n        size={4}\n        tag=\"h4\"\n        text=\"Global Props\"\n    />\n    <Body\n        marginBottom=\"md\"\n        text=\"Available in every kit. These are added globally as they are most flexible when developing.\"\n    />\n    <Example\n        customChildren\n        example={example}\n    >\n      <Flex\n          paddingBottom=\"sm\"\n          vertical=\"stretch\"\n      >\n        <Card.Body\n            marginRight=\"xl\"\n            paddingRight=\"xl\"\n        >\n          <Caption\n              marginBottom=\"sm\"\n              text=\"Props\"\n          />\n          <Pill\n              text=\"hover\"\n              textTransform=\"none\"\n          />\n        </Card.Body>\n        <SectionSeparator\n            marginBottom=\"xs\"\n            marginLeft=\"xl\"\n            marginTop=\"md\"\n            orientation=\"vertical\"\n            paddingLeft=\"xl\"\n            variant=\"card\"\n        />\n        <Table\n            container={false}\n            dataTable\n            marginTop=\"sm\"\n            marginX=\"sm\"\n            size=\"sm\"\n        >\n          <thead>\n            <tr>\n              <th>{'options'}</th>\n              <th>{'values'}</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <Pill\n                    text=\"background\"\n                    textTransform=\"none\"\n                    variant=\"warning\"\n                />\n              </td>\n              <td>\n                <Pill\n                    text=\"${color}\"\n                    textTransform=\"none\"\n                    variant=\"warning\"\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <Pill\n                    text=\"shadow\"\n                    textTransform=\"none\"\n                    variant=\"warning\"\n                />\n              </td>\n              <td>\n                {shadowArr.map((value) => {\n                  return (\n                    <Pill\n                        key={value}\n                        text={value}\n                        textTransform=\"none\"\n                        variant=\"warning\"\n                    />\n                  )\n                })}\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <Pill\n                    text=\"scale\"\n                    textTransform=\"none\"\n                    variant=\"warning\"\n                />\n              </td>\n              <td>\n                {Object.entries(scaleObj).map(([key]) => {\n                  return (\n                    <Pill\n                        key={key}\n                        text={key}\n                        textTransform=\"none\"\n                        variant=\"warning\"\n                    />\n                  )\n                })}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      </Flex>\n    </Example>\n\n    <Card\n        marginTop=\"md\"\n        shadow=\"deep\"\n    >\n      <Flex\n          orientation=\"column\"\n          wrap\n      >\n        <FlexItem paddingBottom=\"xs\">\n          <Caption\n              text=\"Visual Guide\"\n          />\n        </FlexItem>\n        <FlexItem>\n          <Body\n              text=\"Hover over any card below to view hover property.\"\n          />\n        </FlexItem>\n        <FlexItem paddingY=\"sm\">\n          <Flex\n              gap=\"sm\"\n              wrap\n          >\n            <Card\n                hover={{ background: 'success_subtle' }}\n                padding=\"xs\"\n            >\n              <Body\n                  text=\"background color*\"\n              />\n            </Card>\n            {shadowArr.map((value) => {\n              return (\n                <Card\n                    hover={{ shadow: value }}\n                    key={value}\n                    padding=\"xs\"\n                >\n                  <Body\n                      text={`shadow ${value}`}\n                  />\n                </Card>\n              )\n            })}\n            {Object.entries(scaleObj).map(([key, value]) => {\n              return (\n                <Card\n                    hover={{ scale: key }}\n                    key={key}\n                    padding=\"xs\"\n                >\n                  <Flex align=\"center\">\n                    <Body\n                        paddingRight=\"xxs\"\n                        text={`scale ${key}`}\n                    />\n                    <Caption\n                        size=\"xs\"\n                        text={value}\n                    />\n                  </Flex>\n                </Card>\n              )\n            })}\n          </Flex>\n        </FlexItem>\n        <FlexItem>\n          <Caption\n              size=\"xs\"\n              text=\"*background accepts any color token\"\n          />\n        </FlexItem>\n      </Flex>\n    </Card>\n  </React.Fragment>\n)\n\nexport default Hover\n","/* eslint-disable flowtype/no-types-missing-file-annotation */\n\nimport React from 'react'\n\nimport Example from '../Templates/Example'\n\nimport {\n  Title,\n  Caption,\n  Card,\n  Layout\n} from 'playbook-ui'\n\nconst HEIGHTS = ['tightest', 'tighter', 'tight', 'normal', 'loose', 'looser', 'loosest']\nconst TOKENS = {\n  '$lh_tightest': 'tightest',\n  '$lh_tighter': 'tighter',\n  '$lh_tight': 'tight',\n  '$lh_normal': 'normal',\n  '$lh_loose': 'loose',\n  '$lh_looser': 'looser',\n  '$lh_loosest': 'loosest',\n}\n\nconst LineHeightDescription = () => (\n  <>\n    Odds are you might want to build or expand upon the text patterns we have provided. If so below is a good reference of the tokens that are available for you and your typography needs. For articles we recommend pairing a \"medium\" width with \"loose\" line height. See our <a href=\"https://playbook.powerapp.cloud/kits/body/react\" target=\"_blank\">Body Kit</a> for an example.\n  </>\n)\n\nconst LineHeight = ({ example, tokensExample }: {example: string, tokensExample?: string}) => (\n  <React.Fragment>\n    <Example\n       description={<LineHeightDescription />}\n       example={example}\n        globalProps={{\n          lineHeight: HEIGHTS,\n        }}\n        title=\"Line Height\"\n    />\n    <Example\n        example={tokensExample}\n        tokens={TOKENS}\n    >\n      <Layout\n          layout=\"collection\"   \n      >\n        <Layout.Body>\n        {Object.keys(TOKENS).map((token) => (\n          <Card\n              borderNone\n              key={`token-example-${token}`}\n          >\n            <Title\n                lineHeight={TOKENS[token]}\n                text=\"The quick brown fox jumps over the lazy dog\"\n            />\n            <Caption\n                size=\"xs\"\n                text={token}\n            />\n          </Card>\n        ))}\n        </Layout.Body>\n      </Layout>\n    </Example>\n  </React.Fragment>\n)\n\nexport default LineHeight\n","/* eslint-disable flowtype/no-types-missing-file-annotation */\n\nimport React from 'react'\n\nimport {\n  Background,\n  Title,\n} from 'playbook-ui'\n\nimport Example from '../Templates/Example'\n\nconst SIZES = ['xs', 'sm', 'md', 'lg', 'xl'] //TODO: investigate using types\n\nconst MaxWidthDescription = () => (\n  <>\n    When building your interface it is common to add max width to specific kits so the interface looks good at all sizes. For articles we recommend pairing a \"medium\" width with \"loose\" line height. See our <a href=\"https://playbook.powerapp.cloud/kits/body/react\" target=\"_blank\">Body Kit</a> for an example. We've made it easy to add max with ANY kit through our global props. See below:\n  </>\n)\n\nconst MaxWidth = ({ example }: {example: string}) => (\n  <Example\n      description={<MaxWidthDescription />}\n      example={example}\n      globalProps={{\n        maxWidth: SIZES,\n      }}\n      title=\"Max Width\"\n  >\n    {SIZES.map((size: string) => (\n      <Background\n          backgroundColor=\"gradient\"\n          key={size}\n          marginBottom=\"xs\"\n          maxWidth={size}\n          padding=\"xs\"\n      >\n        <Title\n            dark\n            size={4}\n        >\n          {size.toUpperCase()}\n        </Title>\n      </Background>\n    ))}\n  </Example>\n)\n\nexport default MaxWidth\n","/* eslint-disable flowtype/no-types-missing-file-annotation */\n\nimport React from 'react'\n\nimport {\n  Body,\n  Table,\n} from 'playbook-ui'\n\nimport Example from '../Templates/Example'\n\nconst NUMBERS = ['$1,231,123,123.00', '$7,444,112,512.00']\n\nconst NumberSpacing = ({ example }: {example: string}) => (\n  <Example\n      description=\"When dealing with numbers it can be helpful to controll the way the font handles number spacing. A font like proxima nova is an open type face that enables us to use tabular spacing for example. This alligns the numbers equally to make those numbers in a table easier to compare. This is avaliable in EVERY kit as a global prop. See example:\"\n      example={example}\n      globalProps={{\n        numberSpacing: ['tabular'],\n      }}\n      title=\"Number Spacing\"\n  >\n    <Table size=\"md\">\n      <thead>\n        <tr>\n          <th>{'Normal'}</th>\n          <th>{'Tabular'}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {NUMBERS.map((number: string) => (\n          <tr key={number}>\n            <td>\n              <Body\n                  text={number}\n              />\n            </td>\n            <td>\n              <Body\n                  numberSpacing=\"tabular\"\n                  text={number}\n              />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  </Example>\n)\n\nexport default NumberSpacing\n","import React from 'react'\nimport Example from '../Templates/Example'\n\nconst POSITION = [\"relative\", \"absolute\", \"fixed\", \"sticky\", \"static\"]\nconst TOKENS = {\n  '$relative': 'relative',\n  '$absolute': 'absolute',\n  '$fixed': 'fixed',\n  '$sticky': 'sticky',\n  '$static': 'static',\n}\n\nconst Position = ({ example, tokensExample }: { example: string, tokensExample?: string }) => (\n  <React.Fragment>\n    <Example\n      description=\"Specifying position can be useful for customizing page elements and layouts. The examples below demonstrate how you can apply (or override) position:\"\n      example={example}\n      globalProps={{\n        position: POSITION,\n      }}\n      title=\"Position\"\n    />\n    <Example\n      example={tokensExample}\n      tokens={TOKENS}\n    />\n  </React.Fragment>\n)\n\nexport default Position\n","import React from 'react'\n\nimport Example from '../Templates/Example'\n\nimport {\n  Caption,\n  Card,\n  CircleIconButton,\n  Flex\n} from 'playbook-ui'\n\nconst SHADOW_VALUES = [ \"none\", \"deep\", \"deeper\", \"deepest\" ]\nconst TOKENS = {\n  \"$shadow_deep\": \"value: 0 4px 10px 0 rgb(60 106 172 / 16%)\",\n  \"$shadow_deeper\": \"value: 0 12px 28px 0 rgb(60 106 172 / 18%)\",\n  \"$shadow_deepest\": \"value: 0 30px 38px 4px rgb(60 106 172 / 20%), 0 2px 14px 4px rgb(60 106 172 / 10%)\"\n}\n\nconst Shadows = ({example, tokensExample}: {example: string, tokensExample: string}) => (\n  <React.Fragment>\n    <Example\n        description=\"Shadows are a nice way of showing depth. Modals, buttons, & popovers are examples of items that need to have a shadow to indicate their position relative to others. Our global props and tokens help you expand those to the other custom elements you build using playbook.\"\n        example={example}\n        globalProps={{\n          shadow: SHADOW_VALUES,\n        }}\n        title=\"Shadows\"\n    />\n    <Example\n        example={tokensExample}\n        tokens={TOKENS}\n    >\n    <div className=\"shadow-wrapper\">\n      {Object.keys(TOKENS).map((token, index) => (\n          <Card\n              key={`token-example-${token}`}\n              marginX=\"sm\"\n              marginY=\"xl\"\n              padding=\"none\"\n              shadow={SHADOW_VALUES[index + 1]}\n          >\n            <Flex\n                align=\"center\"\n                key={`token-example-${token}`}\n                shadow={TOKENS[token]}\n                spacing=\"between\"\n            >\n              <Flex\n                  align=\"center\"\n                  justfyContent=\"center\"\n                  wrap={true}\n              >\n                <CircleIconButton\n                    icon=\"copy\"\n                    paddingRight=\"sm\"\n                    variant=\"link\"\n                />\n                <span>{token}</span>\n              </Flex>\n              <Flex justify=\"end\">\n                <Caption\n                    paddingRight=\"xs\"\n                    size=\"xs\"\n                >\n                  {TOKENS[token]}\n                </Caption>\n              </Flex>\n            </Flex>\n          </Card>\n      ))}\n    </div>\n    </Example>\n  </React.Fragment>\n)\n\nexport default Shadows\n","/* eslint-disable flowtype/no-types-missing-file-annotation */\n\nimport React from 'react'\n\nimport {\n  Body,\n  Caption,\n  Flex,\n  FlexItem,\n} from 'playbook-ui'\n\nimport Example from '../Templates/Example'\nimport SpacingProps from '../Templates/SpacingProps'\n\nconst PROPVALUES = ['none', 'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'auto', 'initial', 'inherit']\nconst PROPNAMES = [\n  'margin', \n  'marginLeft', \n  'marginBottom', \n  'marginRight', \n  'marginTop', \n  'marginX', \n  'marginY', \n  'padding', \n  'paddingBottom', \n  'paddingTop', \n  'paddingLeft', \n  'paddingRight', \n  'paddingX', \n  'paddingY' ]\n\nconst TOKENS = {\n  'XX Small': 'space_xxs',\n  'X Small': 'space_xs',\n  'Small': 'space_sm',\n  'Medium': 'space_md',\n  'Large': 'space_lg',\n  'X Large': 'space_xl',\n}\n\nconst screenSizeProps = {\n  display: ['xs', 'sm', 'md', 'lg', 'xl']\n}\n\nconst Spacing = ({ example, tokensExample }: {example: string, tokensExample?: string}) => (\n  <React.Fragment>\n    <Example\n      description=\"Used for building Kits: Spacing is sized by 8px which serves as the starting point and base that all spacing options follow.\"\n      // codesandboxExample\n      example={example}\n      screenSizes={screenSizeProps}\n      title=\"Spacing\"\n    >\n      <SpacingProps propValues={PROPVALUES} propNames={PROPNAMES} screenSizes={screenSizeProps} />\n    </Example>\n    <Example\n        example={tokensExample}\n        tokens={TOKENS}\n    >\n      <Flex justify=\"evenly\" wrap>\n        { Object.keys(TOKENS).map((token) => (\n          <Flex\n              key={token}\n              orientation=\"column\"\n              align=\"center\"\n          >\n            <FlexItem>\n              <div className=\"pb--tokens-spacing-token-example\">\n                <div className={`pb--spacing_${TOKENS[token]}`} />\n              </div>\n            </FlexItem>\n            <FlexItem alignSelf=\"center\">\n              <Body text={token} />\n            </FlexItem>\n            <FlexItem alignSelf=\"center\">\n              <Caption\n                  size=\"xs\"\n                  text={`$${TOKENS[token]}`}\n              />\n            </FlexItem>\n          </Flex>\n        )) }\n      </Flex>\n    </Example>\n  </React.Fragment>\n)\n\nexport default Spacing\n","//data for headings\nexport const HEADINGSIZE = [\"48px\", \"34px\", \"28px\", \"16px\"];\nexport const HEADINGS = {\n  $heading_1: \"Heading 1\",\n  $heading_2: \"Heading 2\",\n  $heading_3: \"Heading 3\",\n  $heading_4: \"Heading 4\",\n};\n\n//data for text sizes\nexport const TEXTDATA = [\n  {\n    name: \"Text Jumbo\",\n    class: \"text_jumbo\",\n    text: \"$text_jumbo\",\n    size: \"36px\",\n  },\n  {\n    name: \"Text Largest\",\n    class: \"text_largest\",\n    text: \"$text_largest\",\n    size: \"32px\",\n  },\n  {\n    name: \"Text Larger\",\n    class: \"text_larger\",\n    text: \"$text_larger\",\n    size: \"28px\",\n  },\n  {\n    name: \"Text Large\",\n    class: \"text_large\",\n    text: \"$text_large\",\n    size: \"20px\",\n  },\n  { name: \"Text Base\", class: \"text_base\", text: \"$text_base\", size: \"16px\" },\n  {\n    name: \"Text Small\",\n    class: \"text_small\",\n    text: \"$text_small\",\n    size: \"14px\",\n  },\n  {\n    name: \"Text Smaller\",\n    class: \"text_smaller\",\n    text: \"$text_smaller\",\n    size: \"12px\",\n  },\n  {\n    name: \"Text Smallest\",\n    class: \"text_smallest\",\n    text: \"$text_smallest\",\n    size: \"11px\",\n  },\n];\n\n//Data for letter spacing\nexport const SPACINGDATA = [\n  {\n    name: \"Tightest\",\n    class: \"ls_tightest\",\n    text: \"$lspace_tightest\",\n    value: \"-0.1em\",\n  },\n  {\n    name: \"Tighter\",\n    class: \"ls_tighter\",\n    text: \"$lspace_tighter\",\n    value: \"-0.07em\",\n  },\n  {\n    name: \"Tight\",\n    class: \"ls_tight\",\n    text: \"$lspace_tight\",\n    value: \"-0.03em\",\n  },\n  {\n    name: \"Normal\",\n    class: \"ls_normal\",\n    text: \"$lspace_normal\",\n    value: \"0\",\n  },\n  {\n    name: \"Loose\",\n    class: \"ls_loos\",\n    text: \"$lspace_loose\",\n    value: \"0.03em\",\n  },\n  {\n    name: \"Looser\",\n    class: \"ls_looser\",\n    text: \"$lspace_looser\",\n    value: \"0.07em\",\n  },\n  {\n    name: \"Loosest\",\n    class: \"ls_loosest\",\n    text: \"$lspace_loosest\",\n    value: \"0.1em\",\n  },\n  {\n    name: \"Super Loosest\",\n    class: \"ls_super_loosest\",\n    text: \"$lspace_super_loosest\",\n    value: \"0.2em\",\n  },\n];\n","import React from \"react\";\nimport {\n  Flex,\n  Card,\n  Title,\n  Caption,\n  CircleIconButton,\n  SectionSeparator,\n} from \"playbook-ui\";\nimport {\n  HEADINGS,\n  HEADINGSIZE,\n  TEXTDATA,\n  SPACINGDATA,\n} from \"./TYPOGRAPHY_DATA\";\nimport Example from \"../Templates/Example\";\n\nconst Typography = ({\n  example,\n  tokensExample,\n}: {\n  example: string;\n  tokensExample?: string;\n}) => (\n  <>\n    <Example\n      title=\"Typography\"\n      description=\"Odds are, you might want to build or expand upon the text patterns we have provided. Below are the tokens that are available for you and your typography needs.\"\n      example={example}\n      customChildren={true}\n      tokens={HEADINGS}\n    >\n      <Caption margin=\"md\" text=\"Headings\" />\n      <Flex\n        alignItems=\"end\"\n        paddingBottom=\"lg\"\n        paddingLeft=\"md\"\n        paddingTop=\"md\"\n        columnGap=\"lg\"\n        wrap\n      >\n        {Object.keys(HEADINGS).map((heading, i) => (\n          <Flex\n            orientation=\"column\"\n            justifyContent=\"between\"\n            key={`token-example-${heading}`}\n            alignItems=\"center\"\n          >\n            <Title\n              Typography={HEADINGS[heading]}\n              text={HEADINGS[heading]}\n              size={HEADINGS[heading]}\n            />\n            <Caption size=\"xs\" text={HEADINGSIZE[i]} />\n            <Caption size=\"xs\" text={heading} />\n            <CircleIconButton icon=\"copy\" paddingRight=\"sm\" variant=\"link\" />\n          </Flex>\n        ))}\n      </Flex>\n      <SectionSeparator />\n\n      <Caption marginTop=\"xl\" marginLeft=\"md\" text=\"Text Size\" />\n      <Flex\n        alignItems=\"end\"\n        paddingBottom=\"lg\"\n        paddingLeft=\"md\"\n        paddingTop=\"md\"\n        columnGap=\"lg\"\n        wrap\n      >\n        {TEXTDATA.map((data) => (\n          <Flex\n            orientation=\"column\"\n            justifyContent=\"between\"\n            key={`token-example-${data.name}`}\n            alignItems=\"center\"\n          >\n            <div className={data.class}>{data.name}</div>\n            <Caption size=\"xs\" text={data.size} />\n            <Caption size=\"xs\" text={data.text} />\n            <CircleIconButton icon=\"copy\" paddingRight=\"sm\" variant=\"link\" />\n          </Flex>\n        ))}\n      </Flex>\n      <SectionSeparator />\n\n      <Caption marginTop=\"xl\" marginLeft=\"md\" text=\"Letter Spacing\" />\n      <Flex\n        alignItems=\"end\"\n        paddingBottom=\"lg\"\n        paddingLeft=\"md\"\n        paddingTop=\"md\"\n        columnGap=\"lg\"\n        wrap\n      >\n        {SPACINGDATA.map((data) => (\n          <Flex\n            orientation=\"column\"\n            justifyContent=\"between\"\n            key={`token-example-${data.name}`}\n            alignItems=\"center\"\n          >\n            <div className={data.class}>{data.name}</div>\n            <Caption size=\"xs\" text={data.value} />\n            <Caption size=\"xs\" text={data.text} />\n            <CircleIconButton icon=\"copy\" paddingRight=\"sm\" variant=\"link\" />\n          </Flex>\n        ))}\n      </Flex>\n    </Example>\n  </>\n);\n\nexport default Typography;\n","import React from 'react'\n\nimport {\n  Body,\n  Caption,\n  Card,\n  Title,\n  Table,\n} from 'playbook-ui'\n\nimport Example from '../Templates/Example'\n\nconst ZINDEX = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconst TOKENS = {\n  '$z_1': 100,\n  '$z_2': 200,\n  '$z_3': 300,\n  '$z_4': 400,\n  '$z_5': 500,\n  '$z_6': 600,\n  '$z_7': 700,\n  '$z_8': 800,\n  '$z_9': 900,\n  '$z_10': 1000,\n}\n\nconst screenSizeProps = {\n  display: ['xs', 'sm', 'md', 'lg', 'xl']\n}\n\nconst UTILITY_CLASSES = [\n  {size: 'xs', media: '@media screen and (max-width: $screen-xs-min)', class: '.z_index_xs_{1-10}', properties: 'z_index: {100-1000} !important'},\n  {size: 'sm', media: '@media screen and (max-width: $screen-sm-min)', class: '.z_index_sm_{1-10}', properties: 'z_index: {100-1000} !important'},\n  {size: 'md', media: '@media screen and (max-width: $screen-md-min)', class: '.z_index_md_{1-10}', properties: 'z_index: {100-1000} !important'},\n  {size: 'lg', media: '@media screen and (max-width: $screen-lg-min)', class: '.z_index_lg_{1-10}', properties: 'z_index: {100-1000} !important'},\n  {size: 'xl', media: '@media screen and (max-width: $screen-xl-min)', class: '.z_index_xl_{1-10}', properties: 'z_index: {100-1000} !important'},\n]\n\nconst globalPropsDescription = (\n  <>\n    {'Available in every kit. These are added globally as they are most flexible when developing. *Screen sizes are optional.'}\n    <p>{'NOTE: For best results, specify a position using the \"position\" global prop in conjunction with any \"zIndex\" prop calls.'}</p>\n  </>\n)\n\nconst tokensDescription = (\n  <>\n    {'Make your own styles using Playbook tokens to keep your site consistent.'}\n    <p>{'NOTE: For best results, specify a position value using \"position\" tokens in conjunction with any \"zIndex\" style calls.'}</p>\n  </>\n)\n\nconst ZIndex = ({ example, tokensExample }: { example: string, tokensExample?: string }) => (\n  <React.Fragment>\n    <Example\n      description=\"If you're using Position, you might also find it useful to specify a z-index. We have multiple ways to use z-index, take a look at the examples below:\"\n      example={example}\n      globalProps={{\n        zIndex: ZINDEX,\n      }}\n      globalPropsDescription={globalPropsDescription}\n      screenSizes={screenSizeProps}\n      title=\"Z-Index\"\n    />\n\n    <Title\n      marginTop='sm'\n      size={4}\n      text='Utility Classes'\n    />\n    <Body\n      text='Just want the raw classes? We got you. All of our global props are simple CSS utilities available through classes.'\n      marginBottom='sm'\n    />\n    <Caption\n      text='Visual Guide'\n      marginBottom='sm'\n    />\n    <Table\n      shadow='deep'\n      size='sm'\n    >\n      <thead>\n        <tr>\n          <th>{'Screen Size'}</th>\n          <th>{'@Media Screen'}</th>\n          <th>{'Class'}</th>\n          <th>{'Properties'}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {UTILITY_CLASSES.map((utilityClass: { [key: string]: string }) => (\n          <tr>\n            <td>\n              {utilityClass.size}\n            </td>\n            <td>\n              {utilityClass.media}\n            </td>\n            <td>\n              {utilityClass.class}\n            </td>\n            <td>\n              {utilityClass.properties}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n\n    <Example\n      example={tokensExample}\n      tokens={TOKENS}\n      tokensDescription={tokensDescription}\n    >\n      <div className=\"zindex-wrapper\">\n        {Object.keys(TOKENS).map((token) => (\n          <Card\n            className=\"zIndex\"\n            key={`token-example-${token}`}\n            shadow=\"deeper\"\n            zIndex={TOKENS[token]/100}\n          >\n            <Body>{token}</Body>\n            <Caption size=\"md\">{`value: ${TOKENS[token]}`}</Caption>\n          </Card>\n        ))}\n      </div>\n    </Example>\n  </React.Fragment>\n)\n\nexport default ZIndex\n","/* eslint-disable react/no-danger */\n/* eslint-disable flowtype/no-types-missing-file-annotation */\n\nimport React from 'react'\n\nimport {\n  Body,\n  Caption,\n  Card,\n  CircleIconButton,\n  Flex,\n  FlexItem,\n  SectionSeparator,\n  Title,\n  Tooltip\n} from 'playbook-ui'\n\nimport PropsValues from './PropsValues'\n\ntype ExampleType = {\n  children?: React.ReactChild[] | React.ReactChild,\n  // codesandboxExample? : boolean,\n  customChildren?: boolean,\n  description?: React.ReactChild[] | React.ReactChild | string | (() => JSX.Element),\n  example?: string,\n  globalProps?: { [key: string]: string[] | number[] },\n  globalPropsDescription?: React.ReactElement | React.ReactElement[] | string,\n  screenSizes?: { [key: string]: string[] | number[] },\n  title?: string,\n  tokens?: { [key: string]: string | number },\n  tokensDescription?: React.ReactElement | React.ReactElement[] | string,\n}\n\nconst Example = ({\n  children,\n  // codesandboxExample,\n  customChildren,\n  description,\n  example = '',\n  globalProps,\n  globalPropsDescription = '',\n  screenSizes,\n  title,\n  tokens,\n  tokensDescription = '',\n}: ExampleType): React.ReactElement => {\n  const parser = new DOMParser(),\n    parsedExample = parser.parseFromString(example, 'text/html'),\n    exampleHtml = parsedExample.body.innerHTML,\n    defaultGlobalPropsDescription = screenSizes ? 'Available in every kit. These are added globally as they are most flexible when developing. *Screen sizes are optional.' : 'Available in every kit. These are added globally as they are most flexible when developing.',\n    defaultTokensDescription = 'Make your own styles using Playbook tokens to keep your site consistent.'\n\n  return (\n    <div id={title?.replace(/\\s+/g, '')}>\n      {title && (\n        <Title\n            marginBottom=\"xs\"\n            size={1}\n            tag=\"h1\"\n            text={title}\n        />\n      )}\n      {description && (\n        <Body marginBottom=\"lg\">\n          {description}\n        </Body>\n      )}\n      { globalProps && (\n        <React.Fragment>\n          <Title\n              marginBottom=\"xs\"\n              marginTop=\"sm\"\n              size={4}\n              tag=\"h4\"\n              text=\"Global Props\"\n          />\n          <Body marginBottom=\"lg\">\n            {globalPropsDescription && globalPropsDescription}\n            {!globalPropsDescription && defaultGlobalPropsDescription}\n          </Body>\n        </React.Fragment>\n      )}\n      { tokens && (\n        <React.Fragment>\n          <Title\n              marginBottom=\"xs\"\n              marginTop=\"lg\"\n              size={4}\n              tag=\"h4\"\n              text=\"Tokens\"\n          />\n          <Body marginBottom=\"lg\">\n            {tokensDescription && tokensDescription}\n            {!tokensDescription && defaultTokensDescription}\n          </Body>\n        </React.Fragment>\n      )}\n      <Card\n          padding=\"none\"\n          rounded\n          shadow=\"deeper\"\n      >\n        {children && !customChildren && (\n          <FlexItem>\n            <Card.Body>\n              <Caption\n                  marginBottom=\"xs\"\n                  text=\"Visual Guide\"\n              />\n              { children }\n            </Card.Body>\n            <SectionSeparator\n                alignItems=\"center\"\n                variant=\"card\"\n            />\n          </FlexItem>\n        )}\n        {children && customChildren && (children)}\n        {globalProps && (\n          <PropsValues\n              globalProps={globalProps}\n              screenSizes={screenSizes}\n          />\n        )}\n        <Card\n            background=\"dark\"\n            className=\"border_radius_flat\"\n            dark\n            padding=\"none\"\n        >\n          <Caption\n              marginLeft=\"md\"\n              paddingBottom=\"none\"\n              paddingTop=\"md\"\n              text=\"EXAMPLE IN USE\"\n          />\n          <div className=\"pb--codeCopy\">\n            <pre\n                className=\"highlight pt_sm codeSnippetGuidelines\"\n                style={{ margin: '0px' }}\n            >\n              <span dangerouslySetInnerHTML={{ __html: exampleHtml }} />\n            </pre>\n          </div>\n          {/* { codesandboxExample && (\n              <Flex className=\"codeSandBoxLink\" justify=\"end\" >\n              <Tooltip\n                placement='top'\n                text='Codesandbox'\n                zIndex={10}\n                dark\n              >\n                <CircleIconButton\n                  dark\n                  icon=\"arrow-up-right-from-square\"\n                  link=\"https://codesandbox.io/s/epic-wozniak-2i0i6r?file=/src/App.js\"\n                  newWindow\n                  padding=\"xs\"\n                  variant=\"secondary\"\n                />\n                </Tooltip>\n              </Flex>\n          )} */}\n        </Card>\n      </Card>\n    </div>\n  )\n}\n\nexport default Example\n","/* eslint-disable flowtype/no-types-missing-file-annotation */\n// React Pure component - do not use state!\n\n// This template has sections Props, Values, and Example In Use space.\n// This template does not have a Visual Guide section.\n\nimport React from 'react'\nimport { Caption, Card, Flex, FlexItem, Pill, SectionSeparator } from 'playbook-ui'\n\ntype Props = {\n  globalProps: {[key: string]: string[] | number[]},\n  screenSizes?: {[key: string]: string[] | number[]}\n}\n\nconst PropsValues = (props: Props): React.ReactElement => {\n  return (\n    <Flex\n        inline=\"flex-container\"\n        justifyContent=\"spaceBetween\"\n        orientation=\"row\"\n        vertical=\"stretch\"\n    >\n      { Object.keys(props.globalProps).map((propKey: string) => (\n        <React.Fragment key={propKey}>\n          <FlexItem flex={1}>\n            <Card.Body>\n              <Caption\n                  marginBottom=\"sm\"\n                  text=\"Props\"\n              />\n              <Pill\n                  text={propKey}\n                  textTransform=\"none\"\n              />\n            </Card.Body>\n          </FlexItem>\n          <SectionSeparator\n              marginBottom=\"md\"\n              marginTop=\"md\"\n              orientation=\"vertical\"\n              variant=\"card\"\n          />\n          {props.screenSizes && (\n            <>\n              <FlexItem flex={1}>\n                <Card.Body>\n                  <Caption\n                      marginBottom=\"sm\"\n                      text=\"Screen Size\"\n                  />\n                  {Object.values(props.screenSizes)[0].map((propValue) => (\n                    <Pill\n                        key={`${propKey}-${propValue}`}\n                        text={propValue}\n                        textTransform=\"none\"\n                        variant=\"warning\"\n                    />\n                  ))}\n                </Card.Body>\n              </FlexItem>\n              <SectionSeparator\n                  marginBottom=\"md\"\n                  marginTop=\"md\"\n                  orientation=\"vertical\"\n                  variant=\"card\"\n              />\n            </>\n          )}\n          <FlexItem flex={1}>\n            <Card.Body>\n              <Caption\n                  marginBottom=\"sm\"\n                  text=\"Values\"\n              />\n              {Object.values(props.globalProps)[0].map((propValue) => (\n                <Pill\n                    key={`${propKey}-${propValue}`}\n                    text={propValue}\n                    textTransform=\"none\"\n                    variant=\"warning\"\n                />\n              ))}\n            </Card.Body>\n          </FlexItem>\n        </React.Fragment>\n      ))}\n    </Flex>\n  )\n}\n\nexport default PropsValues\n","/* eslint-disable flowtype/no-types-missing-file-annotation */\n// React Pure component - do not use state!\n\n// This template is specifically for props section of the Spacing example.\n// All other examples use PropsValues.tsx\n// This template does not have a Visual Guide section.\n\nimport React from \"react\";\nimport {\n  Caption,\n  Card,\n  Flex,\n  FlexItem,\n  Pill,\n  SectionSeparator,\n} from \"playbook-ui\";\n\ntype Props = {\n  propValues: string[];\n  propNames: string[];\n  screenSizes: { [key: string]: string[] | number[] },\n};\n\nconst SpacingProps = ({ propNames, propValues, screenSizes }: Props): React.ReactElement => {\n  return (\n    <Flex\n      inline=\"flex-container\"\n      justifyContent=\"center\"\n      orientation=\"row\"\n      vertical=\"stretch\"\n    >\n      <FlexItem flex={1}>\n        <Card.Body>\n          <Caption marginBottom=\"sm\" text=\"Props\" />\n          {propNames.map((prop) => (\n            <Pill\n              key={prop}\n              text={prop}\n              marginRight=\"xs\"\n              textTransform=\"none\"\n            />\n          ))}\n        </Card.Body>\n      </FlexItem>\n      <SectionSeparator\n        marginBottom=\"md\"\n        marginTop=\"md\"\n        orientation=\"vertical\"\n        variant=\"card\"\n      />\n\n      <FlexItem flex={1}>\n        <Card.Body>\n          <Caption marginBottom=\"sm\" text=\"Screen Size\" />\n          {Object.values(screenSizes)[0].map((value) => (\n            <Pill\n              key={value}\n              text={value}\n              marginRight=\"xs\"\n              textTransform=\"none\"\n              variant=\"warning\"\n            />\n          ))}\n        </Card.Body>\n      </FlexItem>\n      <SectionSeparator\n        marginBottom=\"md\"\n        marginTop=\"md\"\n        orientation=\"vertical\"\n        variant=\"card\"\n      />\n\n      <FlexItem flex={1}>\n        <Card.Body>\n          <Caption marginBottom=\"sm\" text=\"Values\" />\n          {propValues.map((value) => (\n            <Pill\n              key={value}\n              text={value}\n              marginRight=\"xs\"\n              textTransform=\"none\"\n              variant=\"warning\"\n            />\n          ))}\n        </Card.Body>\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport default SpacingProps;\n","/* eslint-disable flowtype/no-types-missing-file-annotation */\n\n// React Pure component - do not use state!\nimport React from \"react\";\n\nimport Colors from \"../VisualGuidelines/Colors\";\nimport MaxWidth from \"../VisualGuidelines/Examples/MaxWidth\";\nimport ZIndex from \"../VisualGuidelines/Examples/ZIndex\";\nimport LineHeight from \"../VisualGuidelines/Examples/LineHeight\";\nimport NumberSpacing from \"../VisualGuidelines/Examples/NumberSpacing\";\nimport Shadows from \"../VisualGuidelines/Examples/Shadows\";\nimport Spacing from \"../VisualGuidelines/Examples/Spacing\";\nimport BorderRadius from \"../VisualGuidelines/Examples/BorderRadius\";\nimport Typography from \"../VisualGuidelines/Examples/Typography\";\nimport Display from \"../VisualGuidelines/Examples/Display\";\nimport Cursor from \"../VisualGuidelines/Examples/Cursor\";\nimport FlexBox from \"../VisualGuidelines/Examples/FlexBox\";\nimport Position from \"../VisualGuidelines/Examples/Position\";\nimport Hover from \"../VisualGuidelines/Examples/Hover\";\n\nconst VisualGuidelines = ({\n  examples,\n}: {\n  examples: { [key: string]: string };\n}): React.ReactElement => {\n  const urlPath = window.location.pathname;\n  const regex = /(?:(?:[^/]*\\/){2})(.*)/;\n  const result = urlPath.match(regex)[1];\n\n\n  function getComponent(result) {\n    switch (result) {\n      case \"colors\":\n        return <Colors />;\n      case \"max_width\":\n        return <MaxWidth example={examples.width_jsx}/>;\n      case \"z_index\":\n        return <ZIndex example={examples.z_index_jsx}\n                  tokensExample={examples.z_index_token}\n                />;\n      case \"line_height\":\n        return <LineHeight example={examples.line_height_code_jsx}\n                    tokensExample={examples.line_height_jsx}\n                />;\n      case \"number_spacing\":\n        return <NumberSpacing example={examples.number_spacing_jsx} />;\n      case \"shadows\":\n        return <Shadows example={examples.shadow_in_use_jsx}\n                   tokensExample={examples.shadow_erb}\n               />;\n      case \"spacing\":\n        return <Spacing\n                  example={examples.spacing_global_props_jsx}\n                  tokensExample={examples.spacing_tokens_jsx}\n               />;\n      case \"typography\":\n        return <Typography example={examples.typography_tokens}/>;\n      case \"border_radius\":\n        return <BorderRadius tokensExample={examples.border_radius_tokens}/>;\n      case \"display\":\n        return <Display example={examples.display_in_use_jsx}/>;\n      case \"cursor\":\n        return <Cursor example={examples.cursor_jsx}/>;\n      case \"flex_box\":\n        return <FlexBox example={examples.justify_self_jsx}/>;\n      case \"position\":\n        return <Position example={examples.position_jsx}\n                   tokensExample={examples.position_token}\n               />;\n      case \"hover\":\n        return <Hover example={examples.hover_jsx}/>;\n\n      default:\n        return <Colors/>;\n    }\n  }\n  return <div className=\"visual_guidelines_individual\">{getComponent(result)}</div>;\n};\n\nexport default VisualGuidelines;\n","import WebpackerReact from 'webpacker-react'\n\nimport VisualGuidelines from '../components/VisualGuidelines'\n\nWebpackerReact.setup({\n  VisualGuidelines,\n})\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA,WAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAeA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AC5GA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AAEA;AAOA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;AAGA;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AAcA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAGA;;;;;;;;;;;;;;;;;;;;ACnPA;AACA;AACA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAKA;AAGA;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AAEA;AAKA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAGA;;;;;;;;;;;;;;;;;;AClDA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;AC7BA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAGA;;;;;;;;;;;;ACvFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AAQA;AAMA;AAEA;AAAA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;ACjHA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AAEA;AAYA;AAgBA;AAYA;AATA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAEA;;;;;;;;;;;;;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;;;;A","sourceRoot":""}