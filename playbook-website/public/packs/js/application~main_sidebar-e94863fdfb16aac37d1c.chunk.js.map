{"version":3,"file":"js/application~main_sidebar-e94863fdfb16aac37d1c.chunk.js","sources":["webpack:///./app/javascript/components/KitSearch.jsx","webpack:///./app/javascript/components/MainSidebar/MenuData/GuidelinesNavItems.ts","webpack:///./app/javascript/components/MainSidebar/MenuData/GuildesNavItems.ts","webpack:///./app/javascript/components/MainSidebar/MenuData/SidebarNavItems.ts","webpack:///./app/javascript/components/MainSidebar/NavComponents/KitsNavComponent.tsx","webpack:///./app/javascript/components/MainSidebar/NavComponents/OtherNavComponent.tsx","webpack:///./app/javascript/components/MainSidebar/TopLevelNavItems.tsx","webpack:///./app/javascript/components/MainSidebar/index.tsx","webpack:///./app/javascript/images/pb-logo.svg"],"sourcesContent":["/* @flow */\n\nimport React, { useEffect } from 'react'\nimport { Typeahead } from 'playbook-ui'\n\ntype KitSearchProps = {\n  classname: String,\n  kits: Array,\n  id: String,\n}\nconst KitSearch = ({ classname, id, kits }: KitSearchProps) => {\n  useEffect(() => {\n    if (id === 'desktop-kit-search') {\n      window.addEventListener('keydown', (e) => {\n        if (e.ctrlKey && e.key === 'k') {\n          const kitSearch = document.querySelector('#desktop-kit-search #react-select-2-input')\n          kitSearch === document.activeElement ? kitSearch.blur() : kitSearch.focus()\n        }\n      })\n    }\n  }, [ id ])\n\n  const handleChange = (selection) => {\n    if (selection) {\n      window.location = selection.value\n    }\n  }\n\n  return (\n    <div>\n      <Typeahead\n          className={classname}\n          dark={document.cookie.split('; ').includes('dark_mode=true')}\n          id={id}\n          onChange={handleChange}\n          options={kits}\n          placeholder=\"Search...\"\n      />\n    </div>\n  )\n}\n\nexport default KitSearch\n","export const VisualGuidelinesItems = [\n    {\n        name: \"Colors\",\n        link: \"/visual_guidelines/colors\"\n    },\n    {\n        name: \"Max Width\",\n        link: \"/visual_guidelines/max_width\"\n    },\n    {\n        name: \"Position\",\n        link: \"/visual_guidelines/position\"\n    },\n    {\n        name: \"Z-Index\",\n        link: \"/visual_guidelines/z_index\"\n    },\n    {\n        name: \"Line Height\",\n        link: \"/visual_guidelines/line_height\"\n    },\n    {\n        name: \"Number Spacing\",\n        link: \"/visual_guidelines/number_spacing\"\n    },\n    {\n        name: \"Shadows\",\n        link: \"/visual_guidelines/shadows\"\n    },\n    {\n        name: \"Spacing\",\n        link: \"/visual_guidelines/spacing\"\n    },\n    {\n        name: \"Border Radius\",\n        link: \"/visual_guidelines/border_radius\"\n    },\n    {\n        name: \"Typography\",\n        link: \"/visual_guidelines/typography\"\n    },\n    {\n        name: \"Display\",\n        link: \"/visual_guidelines/display\"\n    },\n    {\n        name: \"Cursor\",\n        link: \"/visual_guidelines/cursor\"\n    },\n    {\n        name: \"Flex Box\",\n        link: \"/visual_guidelines/flex_box\"\n    },\n    {\n        name: \"Hover\",\n        link: \"/visual_guidelines/hover\"\n    },\n    {\n        name: \"Text Align\",\n        link: \"/visual_guidelines/text_align\"\n    },\n    {\n        name: \"Overflow\",\n        link: \"/visual_guidelines/overflow\"\n    },\n  ];","export const GuidesNavItems = [\n  {\n    name: \"Ruby & React Setup\",\n    link: \"/guides/getting_started/rails_&_react_setup\",\n  },\n  {\n    name: \"React Setup\",\n    link: \"/guides/getting_started/react_setup\",\n  },\n  {\n    name: \"Ruby on Rails Setup\",\n    link: \"/guides/getting_started/ruby_on_rails_setup\",\n  },\n  {\n    name: \"Swift Setup\",\n    link: \"/guides/getting_started/swift_setup\",\n  },\n  {\n    name: \"HTML & CSS Setup\",\n    link: \"/guides/getting_started/HTML_&_CSS\",\n  },\n];\n","export const SideBarNavItems = [\n    {\n        name: \"What's New\",\n        key: \"top-nav-item-1\",\n        link: \"/changelog\",\n        children: false,\n        leftIcon: \"sparkles\",\n    },\n    {\n        name: \"Getting Started\",\n        key: \"top-nav-item-2\",\n        link: \"/guides/getting_started\",\n        children: true,\n        leftIcon:\"flag\"\n    },\n    {\n        name: \"Components\",\n        key: \"top-nav-item-3\",\n        link: \"/kits\",\n        children: true,\n        leftIcon:\"grid-2\"\n    },\n    {\n        name: \"Tokens & Guidelines\",\n        key: \"top-nav-item-4\",\n        link: \"/visual_guidelines\",\n        children: true,\n        leftIcon:\"shapes\"\n    },\n    {\n        name: \"UI Samples\",\n        key: \"top-nav-item-5\",\n        link: \"/samples\",\n        children: true,\n        leftIcon:\"vial\"\n    },\n    {\n        name: \"Playground\",\n        key: \"top-nav-item-6\",\n        link: \"/kit_playground_rails\",\n        children: false,\n        leftIcon:\"laptop-code\"\n    }\n]","import React, { useState, useEffect } from \"react\";\nimport { NavItem } from \"playbook-ui\";\nimport { linkFormat } from \"../../../utilities/website_sidebar_helper\";\n\nconst currentURL = window.location.pathname + window.location.search;\n\nexport const kitsType = (type) => {\n  if (type === null || type === undefined) {\n    return \"react\";\n  } else {\n    return type;\n  }\n};\n\nexport const KitsNavItem = ({\n  link,\n  kitIndex,\n  collapsibles,\n  category,\n  type,\n  dark,\n  kit,\n  isActive,\n  setIsActive,\n  updateTopLevelNav,\n  parentIndex\n}) => {\n  const [collapsed] = collapsibles[kitIndex];\n  //set up custom toggling\n  const handleMainClick = (index, categoryKey) => {\n    collapsibles.forEach(([, , setCollapsed], idx) => {\n      setIsActive(() => {\n        const newIsActive = {};\n        newIsActive[`${categoryKey}-${index}`] = true;\n        return newIsActive;\n      });\n      if (idx === index) {\n        setCollapsed(false);\n      } else {\n        setCollapsed(true);\n      }\n      updateTopLevelNav(parentIndex);\n    });\n    //return true at end to disable default collapsible behavior\n    return true;\n  };\n\n  //make sure kits nav will stay toggled open when nested item is clicked\n  const updateKitsNav = (index) => {\n    collapsibles.forEach((collapsible, i) => {\n      const [, , setCollapsed] = collapsible;\n      if (i !== index) {\n        setCollapsed(true);\n      } else {\n        setCollapsed(false);\n      }\n    });\n  };\n\n  //click on nested items\n  const handleSubItemClick = (subLinkIndex, sublink, Index) => {\n    setIsActive(() => {\n      const newIsActive = {};\n      newIsActive[`${sublink}-${subLinkIndex}`] = true;\n      return newIsActive;\n    });\n    updateTopLevelNav(parentIndex);\n    updateKitsNav(Index);\n  };\n\n  //click on non-collapsible navitem click\n  const handleNonCollapseLinkClick = (link) => {\n    setIsActive(() => {\n      const newIsActive = {};\n      newIsActive[link] = true;\n      return newIsActive;\n    });\n    updateTopLevelNav(parentIndex);\n  };\n\n  const generateLink = (categoryKey, sublink, type) => {\n    if (sublink) {\n      const link = `/kits/${sublink}/${kitsType(type)}`;\n      return currentURL === link ? \"\" : link;\n    } else {\n      const link = `/kit_category/${categoryKey}?type=${kitsType(type)}`;\n      return currentURL === link ? \"\" : link;\n    }\n  };\n\n  if (typeof link === \"object\") {\n    const categoryKey = Object.keys(link)[0];\n    const sublinks = link[categoryKey];\n    const isActiveCategory = isActive[kitIndex]\n      ? true\n      : Object.keys(isActive).length === 0\n      ? category === categoryKey\n      : false;\n\n    const hasActiveSublink = link[Object.keys(link)[0]].some(\n      (sublink) => sublink === kit\n    );\n\n    //useState for handling collapsed state\n    const [toggleNav, setToggleNav] = useState(\n      isActiveCategory || hasActiveSublink ? false : true\n    );\n    //useEffect to handle toggle to consolidate logic\n    useEffect(() => {\n      // isActive will always be empty on first render due to rails navigation. Once we move to React router, this code will not be needed\n      if (Object.keys(isActive).length === 0) {\n        setToggleNav(isActiveCategory || hasActiveSublink ? false : collapsed);\n      } else {\n        setToggleNav(collapsed);\n      }\n    }, [collapsed, isActive]);\n\n    //click event for right icon\n    const handleIconClick = (index) => {\n      collapsibles.forEach(([, ,], idx) => {\n        if (idx === index) {\n          toggleNav === true ? setToggleNav(false) : setToggleNav(true);\n        }\n      });\n    };\n\n    const calculateIsActiveCategory = (i, categoryKey, sublink) => {\n      if (sublink) {\n        return isActive[`${sublink}-${i}`]\n          ? true\n          : Object.keys(isActive).length === 0\n          ? kit === sublink\n          : false;\n      } else {\n        return isActive[`${categoryKey}-${i}`]\n          ? true\n          : Object.keys(isActive).length === 0\n          ? category === categoryKey\n          : false;\n      }\n    };\n\n    return (\n      <NavItem\n        active={calculateIsActiveCategory(kitIndex, categoryKey, null)}\n        collapsed={toggleNav}\n        collapsible\n        collapsibleTrail\n        cursor=\"pointer\"\n        dark={dark}\n        fontSize=\"small\"\n        iconRight={[\"plus\", \"minus\"]}\n        key={`${categoryKey}-${kitIndex}`}\n        link={generateLink(categoryKey, null, type)}\n        marginBottom=\"none\"\n        marginTop=\"xxs\"\n        onClick={() => handleMainClick(kitIndex, categoryKey)}\n        onIconRightClick={() => handleIconClick(kitIndex)}\n        paddingY=\"xxs\"\n        text={linkFormat(categoryKey)}\n      >\n        {sublinks.map((sublink, j) => (\n          <NavItem\n            active={calculateIsActiveCategory(j, null, sublink)}\n            cursor=\"pointer\"\n            dark={dark}\n            fontSize=\"small\"\n            key={`${sublink}-${j}`}\n            link={generateLink(categoryKey, sublink, type)}\n            marginY=\"none\"\n            onClick={() => handleSubItemClick(j, sublink, kitIndex)}\n            paddingY=\"xxs\"\n            text={linkFormat(sublink)}\n          />\n        ))}\n      </NavItem>\n    );\n  } else {\n    return (\n      <NavItem\n        active={\n          isActive[link]\n            ? true\n            : Object.keys(isActive).length === 0\n            ? kit === link\n            : false\n        }\n        cursor=\"pointer\"\n        dark={dark}\n        fontSize=\"small\"\n        key={`${link}-${kitIndex}`}\n        link={generateLink(null, link, type)}\n        marginBottom=\"none\"\n        marginTop=\"xxs\"\n        onClick={() => handleNonCollapseLinkClick(link)}\n        text={linkFormat(link)}\n        paddingY=\"xxs\"\n      />\n    );\n  }\n};\n","import React from \"react\";\nimport { NavItem } from \"playbook-ui\";\nimport { VisualGuidelinesItems } from \"../MenuData/GuidelinesNavItems\";\nimport { GuidesNavItems } from \"../MenuData/GuildesNavItems\";\n\nexport const OtherNavItems = ({\n  name,\n  currentURL,\n  dark,\n  samples,\n  setIsActive,\n  isActive,\n  updateTopLevelNav,\n  parentIndex\n}) => {\n  //transform text from samples yml\n  const transformMenuTitle = (link) => {\n    if (name === \"UI Samples\") {\n      const words = link\n        .split(\"_\")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1));\n      return words.join(\" \");\n    } else {\n      return link.name;\n    }\n  };\n\n  const samplesMenu: string[] = [];\n\n  //Get samples pages from Samples yml file\n  for (const key in samples) {\n    if (samples.hasOwnProperty(key)) {\n      samples[key].forEach((item: string) => samplesMenu.push(item));\n    }\n  }\n  let menuItems: { [key: string]: string }[] | string[] = [];\n\n  //conditionally render navitems depending on name\n  if (name === \"Tokens & Guidelines\") {\n    menuItems = VisualGuidelinesItems;\n  } else if (name === \"UI Samples\" && samples) {\n    menuItems = samplesMenu;\n  } else if (name === \"Getting Started\") {\n    menuItems = GuidesNavItems;\n  }\n\n  const handleItemClick = (link, i) => {\n    const key = name === \"UI Samples\" ? `${link}-${i}` : `${link.link}-${i}`;\n    setIsActive(() => {\n      const newIsActive = {};\n      newIsActive[key] = true;\n      return newIsActive;\n    });\n    updateTopLevelNav(parentIndex);\n  };\n\n  const activeForItems = (link, i) => {\n    const key = name === \"UI Samples\" ? `${link}-${i}` : `${link.link}-${i}`;\n    return isActive[key]\n      ? true\n      : Object.keys(isActive).length === 0\n      ? name === \"UI Samples\"\n        ? `/samples/${link}` === currentURL\n        : link.link === currentURL\n      : null;\n  };\n\n  return (\n    <>\n      {menuItems.map((link, i) => (\n        <NavItem\n          active={activeForItems(link, i)}\n          cursor=\"pointer\"\n          dark={dark}\n          fontSize=\"small\"\n          key={name === \"UI Samples\" ? `${link}-${i}` : `${link.link}-${i}`}\n          link={name === \"UI Samples\" ? `/samples/${link}` : link.link}\n          marginBottom=\"none\"\n          marginTop=\"xxs\"\n          onClick={() => handleItemClick(link, i)}\n          paddingY=\"xxs\"\n          text={transformMenuTitle(link)}\n        />\n      ))}\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { NavItem, useCollapsible } from \"playbook-ui\";\nimport { KitsNavItem, kitsType } from \"./NavComponents/KitsNavComponent\";\nimport { SideBarNavItems } from \"./MenuData/SidebarNavItems\";\nimport { OtherNavItems } from \"./NavComponents/OtherNavComponent\";\n\nconst currentURL = window.location.pathname + window.location.search;\n\nexport const TopLevelNavItem = ({\n  dark,\n  type,\n  isActive,\n  setIsActive,\n  kits,\n  kit,\n  category,\n  collapsibles,\n  samples,\n}) => {\n  //hook into collapsible logic for top level item\n  const topLevelCollapsibles = SideBarNavItems.map(() => useCollapsible());\n\n  //logic to make it so no navigation if already on that page(prevent unneeded rerenders)\n  const TopLevelLink = (link) => {\n    if (link === \"/kits\") {\n      return currentURL ===\n        `/kits${kitsType(type) ? `?type=${kitsType(type)}` : \"\"}`\n        ? \"\"\n        : `/kits${kitsType(type) ? `?type=${kitsType(type)}` : \"\"}`;\n    } else {\n      return currentURL === link ? \"\" : link;\n    }\n  };\n\n  //set up toggling for top level item\n  const handleComponentsClick = (item, index) => {\n    topLevelCollapsibles.forEach(([, , setCollapsed], idx) => {\n      setIsActive(() => {\n        const newIsActive = {};\n        newIsActive[item] = true;\n        return newIsActive;\n      });\n      if (idx === index) {\n        setCollapsed(false);\n      } else {\n        setCollapsed(true);\n      }\n    });\n    //return true at end to disable default collapsible behavior\n    return true;\n  };\n\n  //NOTE: All toggle and active state logic should be replaced with state once website moves to react router\n  const activeTopLevel = (key, link) => {\n    const kitsLink =\n      link === \"/kits\"\n        ? `/kits${kitsType(type) ? `?type=${kitsType(type)}` : \"\"}`\n        : link;\n    return isActive[key]\n      ? true\n      : Object.keys(isActive).length === 0\n      ? currentURL === kitsLink || currentURL === link\n      : false;\n  };\n\n  // if url starts with /visual_guidelines or /kits, then relevant collapsible nav to be toggled open on first render\n  const currentPage = currentURL.match(/^(\\/[^/]+)\\/[^/]+/);\n  const kitsPage = currentURL.match(/^\\/([^/?#]+)/);\n  // if url starts with /kit, then relevant collapsible nav to be toggled open on first render\n  const kitCategoryPage = currentURL.match(/^\\/([^/]{3})/);\n  // if url matches /guides, than relevant collapsible nav to be toggled open on first render\n  const guidesPage = currentURL.split(\"/\").slice(0, 3).join(\"/\");\n\n  //extract render logic out of return for better performance\n  const renderTopItems = (name, key, children, leftIcon, link, i) => {\n    const [collapsed] = topLevelCollapsibles[i];\n\n    //is link for navitem equal to current url? Logic will be redundant once website moves to react\n    const onCurrentPage = () => {\n      const categoryMatch =\n        (currentPage &&\n          (currentPage[1] === link ||\n            (kitCategoryPage &&\n              `/${kitCategoryPage[1]}` ===\n                link.substring(0, link.length - 1)))) ||\n        (kitsPage && kitsPage[0] === link);\n\n      const guidesMatch = guidesPage === link;\n\n      return categoryMatch || guidesMatch ? true : false;\n    };\n\n    //use state to handle toggle logic to make sure both main click and right icon click works as expected\n    const [toggleTopNav, setToggleTopNav] = useState(\n      onCurrentPage() ? false : true\n    );\n\n    //on first render, active item should be toggled open, after that custom toggling logic to run\n    useEffect(() => {\n      //isActive will always be empty on first render due to rails navigation. Once we move to React router, this code will not be needed\n      if (Object.keys(isActive).length === 0) {\n        setToggleTopNav(onCurrentPage() ? false : true);\n      } else {\n        setToggleTopNav(collapsed);\n      }\n    }, [collapsed, isActive]);\n\n    //right icon click for top level item\n    const handleComponentsIconClick = (i) => {\n      topLevelCollapsibles.forEach(([, toggle], idx) => {\n        if (idx === i) {\n          toggleTopNav === true\n            ? setToggleTopNav(false)\n            : setToggleTopNav(true);\n        }\n      });\n    };\n\n    //callback function so top level nav item stays toggled opwn if child is clicked\n    const updateTopLevelNav = (index) => {\n      topLevelCollapsibles.forEach((collapsible, i) => {\n        const [, , setCollapsed] = collapsible;\n\n        if (i !== index) {\n          setCollapsed(true);\n        } else {\n          setCollapsed(false);\n        }\n      });\n    };\n\n    return (\n      <NavItem\n        active={activeTopLevel(key, link)}\n        collapsed={children && toggleTopNav}\n        collapsible={children}\n        collapsibleTrail={children}\n        cursor=\"pointer\"\n        dark={dark}\n        fontSize=\"small\"\n        fontWeight=\"bolder\"\n        iconLeft={leftIcon}\n        iconRight={children && [\"plus\", \"minus\"]}\n        key={key}\n        link={TopLevelLink(link)}\n        marginY=\"none\"\n        onClick={() => handleComponentsClick(key, i)}\n        onIconRightClick={children && (() => handleComponentsIconClick(i))}\n        paddingY=\"xxs\"\n        target={name === \"Playground\" ? \"_blank\" : \"_self\"}\n        text={name}\n      >\n        {children && (\n          <>\n            {name === \"Components\" ? (\n              <>\n                {kits.map((link, index) => (\n                  <KitsNavItem\n                    key={index}\n                    link={link}\n                    key={`kits-nav-item-${index}`}\n                    kitIndex={index}\n                    collapsibles={collapsibles}\n                    category={category}\n                    type={type}\n                    dark={dark}\n                    kit={kit}\n                    isActive={isActive}\n                    setIsActive={setIsActive}\n                    updateTopLevelNav={updateTopLevelNav}\n                    parentIndex={i}\n                  />\n                ))}\n              </>\n            ) : (\n              <OtherNavItems\n                name={name}\n                currentURL={currentURL}\n                dark={dark}\n                samples={samples}\n                setIsActive={setIsActive}\n                isActive={isActive}\n                updateTopLevelNav={updateTopLevelNav}\n                parentIndex={i}\n              />\n            )}\n          </>\n        )}\n      </NavItem>\n    );\n  };\n\n  return (\n    <>\n      {SideBarNavItems.map(({ name, key, children, leftIcon, link }, i) => {\n        return renderTopItems(name, key, children, leftIcon, link, i);\n      })}\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Nav, useCollapsible, Image, Badge, Flex } from \"playbook-ui\";\nimport { TopLevelNavItem } from \"./TopLevelNavItems\";\n// @ts-ignore\nimport PBLogo from \"../../images/pb-logo.svg\";\nimport KitSearch from \"../KitSearch\";\n\nconst MainSidebar = ({\n  dark,\n  type,\n  category,\n  kit,\n  kits,\n  PBversion,\n  search_list,\n  samples,\n}) => {\n  //active state for navItems(will be redundant once routing moved to react router)\n  const [isActive, setIsActive] = useState({});\n\n  //hook into collapsible logic for all components nested nav items\n  const collapsibles = kits.map(() => useCollapsible());\n\n  return (\n    <>\n      <Flex\n        orientation=\"row\"\n        spacing=\"between\"\n        align=\"center\"\n        marginTop=\"lg\"\n        marginX=\"sm\"\n      >\n        <a href={\"/\"}>\n          <Image alt=\"Playbook logo\" url={PBLogo} />\n        </a>\n        <Badge text={PBversion} dark={dark} variant=\"success\" rounded />\n      </Flex>\n      <Flex\n        orientation=\"column\"\n        align=\"stretch\"\n        marginBottom=\"xxs\"\n        marginTop=\"md\"\n        marginX=\"sm\"\n      >\n        <KitSearch\n          classname=\"desktop-kit-search\"\n          id=\"desktop-kit-search\"\n          kits={search_list}\n        />\n      </Flex>\n      <Nav dark={dark} variant=\"bold\" paddingTop=\"xxs\">\n        <TopLevelNavItem\n          dark={dark}\n          type={type}\n          isActive={isActive}\n          setIsActive={setIsActive}\n          kits={kits}\n          kit={kit}\n          category={category}\n          collapsibles={collapsibles}\n          samples={samples}\n        />\n      </Nav>\n    </>\n  );\n};\n\nexport default MainSidebar;\n","module.exports = __webpack_public_path__ + \"media/images/pb-logo-7c6d08a9717b9aeec0c40f3e68eb80fd.svg\";"],"mappings":";;;;;;;;;;;;;;;;;AAEA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;AChEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAFA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxMA;AACA;AACA;AACA;AAEA;AASA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAUA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AACA;AAAA;AAWA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvMA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;;;;;;;;;;;ACnEA;;;;A","sourceRoot":""}