{"version":3,"file":"HTML5FS.js","sourceRoot":"","sources":["../../../src/backend/HTML5FS.ts"],"names":[],"mappings":"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","sourcesContent":["import PreloadFile from '../generic/preload_file';\nimport {BaseFileSystem, FileSystem as IFileSystem, BFSOneArgCallback, BFSCallback, FileSystemOptions} from '../core/file_system';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport {FileFlag, ActionType} from '../core/file_flag';\nimport {default as Stats, FileType} from '../core/node_fs_stats';\nimport {File as IFile} from '../core/file';\nimport * as path from 'path';\nimport global from '../core/global';\nimport {each as asyncEach} from 'async';\nimport {buffer2ArrayBuffer, arrayBuffer2Buffer} from '../core/util';\n\n/**\n * @hidden\n */\nfunction isDirectoryEntry(entry: Entry): entry is DirectoryEntry {\n  return entry.isDirectory;\n}\n\n/**\n * @hidden\n */\nconst _getFS: (type: number, size: number, successCallback: FileSystemCallback, errorCallback?: ErrorCallback) => void = global.webkitRequestFileSystem || global.requestFileSystem || null;\n\n/**\n * @hidden\n */\nfunction _requestQuota(type: number, size: number, success: (size: number) => void, errorCallback: ErrorCallback) {\n  // We cast navigator and window to '<any>' because everything here is\n  // nonstandard functionality, despite the fact that Chrome has the only\n  // implementation of the HTML5FS and is likely driving the standardization\n  // process. Thus, these objects defined off of navigator and window are not\n  // present in the DefinitelyTyped TypeScript typings for FileSystem.\n  if (typeof (<any> navigator)['webkitPersistentStorage'] !== 'undefined') {\n    switch (type) {\n      case global.PERSISTENT:\n        (<any> navigator).webkitPersistentStorage.requestQuota(size, success, errorCallback);\n        break;\n      case global.TEMPORARY:\n        (<any> navigator).webkitTemporaryStorage.requestQuota(size, success, errorCallback);\n        break;\n      default:\n        errorCallback(new TypeError(`Invalid storage type: ${type}`));\n        break;\n    }\n  } else {\n    (<any> global).webkitStorageInfo.requestQuota(type, size, success, errorCallback);\n  }\n}\n\n/**\n * @hidden\n */\nfunction _toArray(list?: any[]): any[] {\n  return Array.prototype.slice.call(list || [], 0);\n}\n\n/**\n * Converts the given DOMError into an appropriate ApiError.\n * @url https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n * @hidden\n */\n// @ts-ignore\nfunction convertError(err: DOMError, p: string, expectedDir: boolean): ApiError {\n  switch (err.name) {\n    /* The user agent failed to create a file or directory due to the existence of a file or\n        directory with the same path.  */\n    case \"PathExistsError\":\n      return ApiError.EEXIST(p);\n    /* The operation failed because it would cause the application to exceed its storage quota.  */\n    case 'QuotaExceededError':\n      return ApiError.FileError(ErrorCode.ENOSPC, p);\n    /*  A required file or directory could not be found at the time an operation was processed.   */\n    case 'NotFoundError':\n      return ApiError.ENOENT(p);\n    /* This is a security error code to be used in situations not covered by any other error codes.\n        - A required file was unsafe for access within a Web application\n        - Too many calls are being made on filesystem resources */\n    case 'SecurityError':\n      return ApiError.FileError(ErrorCode.EACCES, p);\n    /* The modification requested was illegal. Examples of invalid modifications include moving a\n        directory into its own child, moving a file into its parent directory without changing its name,\n        or copying a directory to a path occupied by a file.  */\n    case 'InvalidModificationError':\n      return ApiError.FileError(ErrorCode.EPERM, p);\n    /* The user has attempted to look up a file or directory, but the Entry found is of the wrong type\n        [e.g. is a DirectoryEntry when the user requested a FileEntry].  */\n    case 'TypeMismatchError':\n      return ApiError.FileError(expectedDir ? ErrorCode.ENOTDIR : ErrorCode.EISDIR, p);\n    /* A path or URL supplied to the API was malformed.  */\n    case \"EncodingError\":\n    /* An operation depended on state cached in an interface object, but that state that has changed\n        since it was read from disk.  */\n    case \"InvalidStateError\":\n    /* The user attempted to write to a file or directory which could not be modified due to the state\n        of the underlying filesystem.  */\n    case \"NoModificationAllowedError\":\n    default:\n      return ApiError.FileError(ErrorCode.EINVAL, p);\n  }\n}\n\n// A note about getFile and getDirectory options:\n// These methods are called at numerous places in this file, and are passed\n// some combination of these two options:\n//   - create: If true, the entry will be created if it doesn't exist.\n//             If false, an error will be thrown if it doesn't exist.\n//   - exclusive: If true, only create the entry if it doesn't already exist,\n//                and throw an error if it does.\n\nexport class HTML5FSFile extends PreloadFile<HTML5FS> implements IFile {\n  private _entry: FileEntry;\n\n  constructor(fs: HTML5FS, entry: FileEntry, path: string, flag: FileFlag, stat: Stats, contents?: Buffer) {\n    super(fs, path, flag, stat, contents);\n    this._entry = entry;\n  }\n\n  public sync(cb: BFSOneArgCallback): void {\n    if (!this.isDirty()) {\n      return cb();\n    }\n\n    this._entry.createWriter((writer) => {\n      const buffer = this.getBuffer();\n      const blob = new Blob([buffer2ArrayBuffer(buffer) as ArrayBuffer]);\n      const length = blob.size;\n      writer.onwriteend = (err?: any) => {\n        writer.onwriteend = <any> null;\n        writer.onerror = <any> null;\n        writer.truncate(length);\n        this.resetDirty();\n        cb();\n      };\n      writer.onerror = (err: any) => {\n        cb(convertError(err, this.getPath(), false));\n      };\n      writer.write(blob);\n    });\n  }\n\n  public close(cb: BFSOneArgCallback): void {\n    this.sync(cb);\n  }\n}\n\nexport interface HTML5FSOptions {\n  // storage quota to request, in megabytes. Allocated value may be less.\n  size?: number;\n  // window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT.\n  type?: number;\n}\n\n/**\n * A read-write filesystem backed by the HTML5 FileSystem API.\n *\n * As the HTML5 FileSystem is only implemented in Blink, this interface is\n * only available in Chrome.\n */\nexport default class HTML5FS extends BaseFileSystem implements IFileSystem {\n  public static readonly Name = \"HTML5FS\";\n\n  public static readonly Options: FileSystemOptions = {\n    size: {\n      type: \"number\",\n      optional: true,\n      description: \"Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5.\"\n    },\n    type: {\n      type: \"number\",\n      optional: true,\n      description: \"window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT.\"\n    }\n  };\n\n  /**\n   * Creates an HTML5FS instance with the given options.\n   */\n  public static Create(opts: HTML5FSOptions, cb: BFSCallback<HTML5FS>): void {\n    const fs = new HTML5FS(opts.size, opts.type);\n    fs._allocate((e) => e ? cb(e) : cb(null, fs));\n  }\n  public static isAvailable(): boolean {\n    return Boolean(_getFS);\n  }\n\n  // HTML5File reaches into HTML5FS. :/\n  public fs: FileSystem;\n  private size: number;\n  private type: number;\n  /**\n   * @param size storage quota to request, in megabytes. Allocated value may be less.\n   * @param type window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT.\n   */\n  private constructor(size: number = 5, type: number = global.PERSISTENT) {\n    super();\n    // Convert MB to bytes.\n    this.size = 1024 * 1024 * size;\n    this.type = type;\n  }\n\n  public getName(): string {\n    return HTML5FS.Name;\n  }\n\n  public isReadOnly(): boolean {\n    return false;\n  }\n\n  public supportsSymlinks(): boolean {\n    return false;\n  }\n\n  public supportsProps(): boolean {\n    return false;\n  }\n\n  public supportsSynch(): boolean {\n    return false;\n  }\n\n  /**\n   * Deletes everything in the FS. Used for testing.\n   * Karma clears the storage after you quit it but not between runs of the test\n   * suite, and the tests expect an empty FS every time.\n   */\n  public empty(mainCb: BFSOneArgCallback): void {\n    // Get a list of all entries in the root directory to delete them\n    this._readdir('/', (err: ApiError, entries?: Entry[]): void => {\n      if (err) {\n        mainCb(err);\n      } else {\n        // Called when every entry has been operated on\n        const finished = (er: any): void => {\n          if (err) {\n            mainCb(err);\n          } else {\n            mainCb();\n          }\n        };\n        // Removes files and recursively removes directories\n        const deleteEntry = (entry: Entry, cb: (e?: any) => void): void => {\n          const succ = () => {\n            cb();\n          };\n          const error = (err: DOMException) => {\n            cb(convertError(err, entry.fullPath, !entry.isDirectory));\n          };\n          if (isDirectoryEntry(entry)) {\n            entry.removeRecursively(succ, error);\n          } else {\n            entry.remove(succ, error);\n          }\n        };\n        // Loop through the entries and remove them, then call the callback\n        // when they're all finished.\n        // @ts-ignore\n        asyncEach(entries!, deleteEntry, finished);\n      }\n    });\n  }\n\n  public rename(oldPath: string, newPath: string, cb: BFSOneArgCallback): void {\n    let semaphore: number = 2;\n    let successCount: number = 0;\n    const root: DirectoryEntry = this.fs.root;\n    let currentPath: string = oldPath;\n    const error = (err: DOMException): void => {\n      if (--semaphore <= 0) {\n          cb(convertError(err, currentPath, false));\n      }\n    };\n    const success = (file: Entry): void => {\n      if (++successCount === 2) {\n        return cb(new ApiError(ErrorCode.EINVAL, \"Something was identified as both a file and a directory. This should never happen.\"));\n      }\n\n      // SPECIAL CASE: If newPath === oldPath, and the path exists, then\n      // this operation trivially succeeds.\n      if (oldPath === newPath) {\n        return cb();\n      }\n\n      // Get the new parent directory.\n      currentPath = path.dirname(newPath);\n      root.getDirectory(currentPath, {}, (parentDir: DirectoryEntry): void => {\n        currentPath = path.basename(newPath);\n        file.moveTo(parentDir, currentPath, (entry: Entry): void => { cb(); }, (err: DOMException): void => {\n          // SPECIAL CASE: If oldPath is a directory, and newPath is a\n          // file, rename should delete the file and perform the move.\n          if (file.isDirectory) {\n            currentPath = newPath;\n            // Unlink only works on files. Try to delete newPath.\n            this.unlink(newPath, (e?): void => {\n              if (e) {\n                // newPath is probably a directory.\n                error(err);\n              } else {\n                // Recur, now that newPath doesn't exist.\n                this.rename(oldPath, newPath, cb);\n              }\n            });\n          } else {\n            error(err);\n          }\n        });\n      }, error);\n    };\n\n    // We don't know if oldPath is a *file* or a *directory*, and there's no\n    // way to stat items. So launch both requests, see which one succeeds.\n    root.getFile(oldPath, {}, success, error);\n    root.getDirectory(oldPath, {}, success, error);\n  }\n\n  public stat(path: string, isLstat: boolean, cb: BFSCallback<Stats>): void {\n    // Throw an error if the entry doesn't exist, because then there's nothing\n    // to stat.\n    const opts = {\n      create: false\n    };\n    // Called when the path has been successfully loaded as a file.\n    const loadAsFile = (entry: FileEntry): void => {\n      const fileFromEntry = (file: File): void => {\n        const stat = new Stats(FileType.FILE, file.size);\n        cb(null, stat);\n      };\n      entry.file(fileFromEntry, failedToLoad);\n    };\n    // Called when the path has been successfully loaded as a directory.\n    const loadAsDir = (dir: DirectoryEntry): void => {\n      // Directory entry size can't be determined from the HTML5 FS API, and is\n      // implementation-dependant anyway, so a dummy value is used.\n      const size = 4096;\n      const stat = new Stats(FileType.DIRECTORY, size);\n      cb(null, stat);\n    };\n    // Called when the path couldn't be opened as a directory or a file.\n    const failedToLoad = (err: DOMException): void => {\n      cb(convertError(err, path, false /* Unknown / irrelevant */));\n    };\n    // Called when the path couldn't be opened as a file, but might still be a\n    // directory.\n    const failedToLoadAsFile = (): void => {\n      this.fs.root.getDirectory(path, opts, loadAsDir, failedToLoad);\n    };\n    // No method currently exists to determine whether a path refers to a\n    // directory or a file, so this implementation tries both and uses the first\n    // one that succeeds.\n    this.fs.root.getFile(path, opts, loadAsFile, failedToLoadAsFile);\n  }\n\n  public open(p: string, flags: FileFlag, mode: number, cb: BFSCallback<IFile>): void {\n    // XXX: err is a DOMError\n    const error = (err: any): void => {\n      if (err.name === 'InvalidModificationError' && flags.isExclusive()) {\n        cb(ApiError.EEXIST(p));\n      } else {\n        cb(convertError(err, p, false));\n      }\n    };\n\n    this.fs.root.getFile(p, {\n      create: flags.pathNotExistsAction() === ActionType.CREATE_FILE,\n      exclusive: flags.isExclusive()\n    }, (entry: FileEntry): void => {\n      // Try to fetch corresponding file.\n      entry.file((file: File): void => {\n        const reader = new FileReader();\n        reader.onloadend = (event: Event): void => {\n          const bfsFile = this._makeFile(p, entry, flags, file, <ArrayBuffer> reader.result);\n          cb(null, bfsFile);\n        };\n        reader.onerror = (ev: Event) => {\n          error(reader.error);\n        };\n        reader.readAsArrayBuffer(file);\n      }, error);\n    }, error);\n  }\n\n  public unlink(path: string, cb: BFSOneArgCallback): void {\n    this._remove(path, cb, true);\n  }\n\n  public rmdir(path: string, cb: BFSOneArgCallback): void {\n    // Check if directory is non-empty, first.\n    this.readdir(path, (e, files?) => {\n      if (e) {\n        cb(e);\n      } else if (files!.length > 0) {\n        cb(ApiError.ENOTEMPTY(path));\n      } else {\n        this._remove(path, cb, false);\n      }\n    });\n  }\n\n  public mkdir(path: string, mode: number, cb: BFSOneArgCallback): void {\n    // Create the directory, but throw an error if it already exists, as per\n    // mkdir(1)\n    const opts = {\n      create: true,\n      exclusive: true\n    };\n    const success = (dir: DirectoryEntry): void => {\n      cb();\n    };\n    const error = (err: DOMException): void => {\n      cb(convertError(err, path, true));\n    };\n    this.fs.root.getDirectory(path, opts, success, error);\n  }\n\n  /**\n   * Map _readdir's list of `FileEntry`s to their names and return that.\n   */\n  public readdir(path: string, cb: BFSCallback<string[]>): void {\n    this._readdir(path, (e: ApiError, entries?: Entry[]): void => {\n      if (entries) {\n        const rv: string[] = [];\n        for (const entry of entries) {\n          rv.push(entry.name);\n        }\n        cb(null, rv);\n      } else {\n        return cb(e);\n      }\n    });\n  }\n\n  /**\n   * Returns a BrowserFS object representing a File.\n   */\n  private _makeFile(path: string, entry: FileEntry, flag: FileFlag, stat: File, data: ArrayBuffer = new ArrayBuffer(0)): HTML5FSFile {\n    const stats = new Stats(FileType.FILE, stat.size);\n    const buffer = arrayBuffer2Buffer(data);\n    return new HTML5FSFile(this, entry, path, flag, stats, buffer);\n  }\n\n  /**\n   * Returns an array of `FileEntry`s. Used internally by empty and readdir.\n   */\n  private _readdir(path: string, cb: BFSCallback<Entry[]>): void {\n    const error = (err: DOMException): void => {\n      cb(convertError(err, path, true));\n    };\n    // Grab the requested directory.\n    this.fs.root.getDirectory(path, { create: false }, (dirEntry: DirectoryEntry) => {\n      const reader = dirEntry.createReader();\n      let entries: Entry[] = [];\n\n      // Call the reader.readEntries() until no more results are returned.\n      const readEntries = () => {\n        reader.readEntries(((results) => {\n          if (results.length) {\n            entries = entries.concat(_toArray(results));\n            readEntries();\n          } else {\n            cb(null, entries);\n          }\n        }), error);\n      };\n      readEntries();\n    }, error);\n  }\n\n  /**\n   * Requests a storage quota from the browser to back this FS.\n   */\n  private _allocate(cb: BFSOneArgCallback): void {\n    const success = (fs: FileSystem): void => {\n      this.fs = fs;\n      cb();\n    };\n    const error = (err: DOMException): void => {\n      cb(convertError(err, \"/\", true));\n    };\n    if (this.type === global.PERSISTENT) {\n      _requestQuota(this.type, this.size, (granted: number) => {\n        _getFS(this.type, granted, success, error);\n      }, error);\n    } else {\n      _getFS(this.type, this.size, success, error);\n    }\n  }\n\n  /**\n   * Delete a file or directory from the file system\n   * isFile should reflect which call was made to remove the it (`unlink` or\n   * `rmdir`). If this doesn't match what's actually at `path`, an error will be\n   * returned\n   */\n  private _remove(path: string, cb: BFSOneArgCallback, isFile: boolean): void {\n    const success = (entry: Entry): void => {\n      const succ = () => {\n        cb();\n      };\n      const err = (err: DOMException) => {\n        cb(convertError(err, path, !isFile));\n      };\n      entry.remove(succ, err);\n    };\n    const error = (err: DOMException): void => {\n      cb(convertError(err, path, !isFile));\n    };\n    // Deleting the entry, so don't create it\n    const opts = {\n      create: false\n    };\n\n    if (isFile) {\n      this.fs.root.getFile(path, opts, success, error);\n    } else {\n      this.fs.root.getDirectory(path, opts, success, error);\n    }\n  }\n}\n"]}