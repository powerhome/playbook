{"version":3,"file":"CodeSandboxFS.js","sourceRoot":"","sources":["../../../src/backend/CodeSandboxFS.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\nimport {\n  SynchronousFileSystem,\n  FileSystem,\n  BFSOneArgCallback,\n  BFSCallback,\n  FileSystemOptions\n} from \"../core/file_system\";\nimport { File } from \"../core/file\";\nimport { FileFlag } from \"../core/file_flag\";\nimport { default as Stats, FileType } from \"../core/node_fs_stats\";\nimport PreloadFile from \"../generic/preload_file\";\nimport { ErrorCode, ApiError } from \"../core/api_error\";\n\nexport interface IModule {\n  path?: string;\n  code: string | undefined;\n}\n\nexport interface IManager {\n  getTranspiledModules: () => {\n    [path: string]: {\n      module: IModule;\n    };\n  };\n\n  addModule(module: IModule): void;\n  removeModule(module: IModule): void;\n  moveModule(module: IModule, newPath: string): void;\n  updateModule(module: IModule): void;\n}\n\nclass CodeSandboxFile extends PreloadFile<CodeSandboxFS> implements File {\n  constructor(\n    _fs: CodeSandboxFS,\n    _path: string,\n    _flag: FileFlag,\n    _stat: Stats,\n    contents?: Buffer\n  ) {\n    super(_fs, _path, _flag, _stat, contents);\n  }\n\n  public sync(cb: BFSOneArgCallback): void {\n    if (this.isDirty()) {\n      const buffer = this.getBuffer();\n\n      this._fs._sync(\n        this.getPath(),\n        buffer,\n        (e: ApiError | undefined | null, stat?: Stats) => {\n          if (!e) {\n            this.resetDirty();\n          }\n          cb(e);\n        }\n      );\n    } else {\n      cb();\n    }\n  }\n\n  public close(cb: BFSOneArgCallback): void {\n    this.sync(cb);\n  }\n\n  public syncSync(): void {\n    if (this.isDirty()) {\n      this._fs._syncSync(this.getPath(), this.getBuffer());\n      this.resetDirty();\n    }\n  }\n\n  public closeSync(): void {\n    this.syncSync();\n  }\n}\n\nexport interface ICodeSandboxFileSystemOptions {\n  manager: IManager;\n}\n\nexport default class CodeSandboxFS extends SynchronousFileSystem\n  implements FileSystem {\n  public static readonly Name = \"CodeSandboxFS\";\n  public static readonly Options: FileSystemOptions = {\n    manager: {\n      type: \"object\",\n      description: \"The CodeSandbox Manager\",\n      validator: (opt: IManager, cb: BFSOneArgCallback): void => {\n        if (opt) {\n          cb();\n        } else {\n          cb(new ApiError(ErrorCode.EINVAL, `Manager is invalid`));\n        }\n      }\n    }\n  };\n\n  /**\n   * Creates an InMemoryFileSystem instance.\n   */\n  public static Create(\n    options: ICodeSandboxFileSystemOptions,\n    cb: BFSCallback<CodeSandboxFS>\n  ): void {\n    cb(null, new CodeSandboxFS(options.manager));\n  }\n\n  public static isAvailable(): boolean {\n    return true;\n  }\n\n  private manager: IManager;\n\n  constructor(manager: IManager) {\n    super();\n\n    this.manager = manager;\n  }\n\n  public getName(): string {\n    return \"CodeSandboxFS\";\n  }\n\n  public isReadOnly(): boolean {\n    return false;\n  }\n\n  public supportsProps(): boolean {\n    return false;\n  }\n\n  public supportsSynch(): boolean {\n    return true;\n  }\n\n  public empty(mainCb: BFSOneArgCallback): void {\n    const tModules = this.manager.getTranspiledModules();\n    Object.keys(tModules).forEach((pa: string) => {\n      this.manager.removeModule(tModules[pa].module);\n    });\n    mainCb();\n  }\n\n  public renameSync(oldPath: string, newPath: string) {\n    const tModules = this.manager.getTranspiledModules();\n    const modulesWithPath = Object.keys(tModules).filter(\n      (p: string) => p.startsWith(oldPath) + \"/\" || p === oldPath\n    );\n\n    if (modulesWithPath.length === 0) {\n      throw ApiError.FileError(ErrorCode.ENOENT, oldPath);\n    }\n\n    modulesWithPath\n      .map((p: string) => ({ path: p, moduleInfo: tModules[p] }))\n      .forEach(({ path, moduleInfo }) => {\n        const { module } = moduleInfo;\n        this.manager.moveModule(module, path.replace(oldPath, newPath));\n      });\n  }\n\n  public statSync(p: string, isLstate: boolean): Stats {\n    const tModules = this.manager.getTranspiledModules();\n    const moduleInfo = tModules[p];\n\n    if (!moduleInfo) {\n      const modulesStartingWithPath = Object.keys(tModules).filter(\n        (pa: string) => pa.startsWith(p.endsWith(\"/\") ? p : p + \"/\") || pa === p\n      );\n\n      if (modulesStartingWithPath.length > 0) {\n        return new Stats(FileType.DIRECTORY, 0);\n      } else {\n        throw ApiError.FileError(ErrorCode.ENOENT, p);\n      }\n    }\n\n    const stats = new Stats(\n      FileType.FILE,\n      Buffer.byteLength(moduleInfo.module.code || '', 'utf8')\n    );\n\n    return stats;\n  }\n\n  public createFileSync(p: string, flag: FileFlag, mode: number): File {\n    if (p === \"/\") {\n      throw ApiError.EEXIST(p);\n    }\n\n    if (this.manager.getTranspiledModules()[p]) {\n      throw ApiError.EEXIST(p);\n    }\n\n    const module = {\n      path: p,\n      code: \"\"\n    };\n    this.manager.addModule(module);\n\n    const buffer = Buffer.from(module.code || \"\");\n    const stats = new Stats(FileType.FILE, buffer.length);\n\n    return new CodeSandboxFile(this, p, flag, stats, buffer);\n  }\n\n  public openFileSync(p: string, flag: FileFlag, mode: number): File {\n    const moduleInfo = this.manager.getTranspiledModules()[p];\n\n    if (!moduleInfo) {\n      throw ApiError.ENOENT(p);\n    }\n\n    const { code = \"\" } = moduleInfo.module;\n    const buffer = Buffer.from(code || \"\");\n    const stats = new Stats(FileType.FILE, buffer.length);\n\n    return new CodeSandboxFile(this, p, flag, stats, buffer);\n  }\n\n  public rmdirSync(p: string) {\n    const tModules = this.manager.getTranspiledModules();\n    Object.keys(tModules)\n      .filter((pa: string) => pa.startsWith(p + \"/\") || p === pa)\n      .forEach((pa: string) => {\n        const { module } = tModules[pa];\n\n        this.manager.removeModule(module);\n      });\n  }\n\n  public mkdirSync(p: string) {\n    // CodeSandbox Manager doesn't have the concept of directories, like git.\n    // For now we will do nothing, as we pretend that every directory already exists.\n  }\n\n  public readdirSync(path: string): string[] {\n    const paths = Object.keys(this.manager.getTranspiledModules());\n\n    const p = path.endsWith(\"/\") ? path : path + \"/\";\n\n    const pathsInDir = paths.filter((secondP: string) => secondP.startsWith(p));\n\n    if (pathsInDir.length === 0) {\n      return [];\n    }\n\n    const directChildren: Set<string> = new Set();\n    const currentPathLength = p.split(\"/\").length;\n\n    pathsInDir\n      .filter((np: string) => np.split(\"/\").length >= currentPathLength)\n      .forEach((np: string) => {\n        const parts = np.split(\"/\");\n\n        parts.length = currentPathLength;\n        directChildren.add(parts.join(\"/\"));\n      });\n\n    const pathArray = Array.from(directChildren).map(pa => pa.replace(p, \"\"));\n\n    return pathArray;\n  }\n\n  public _sync(p: string, data: Buffer, cb: BFSCallback<Stats>): void {\n    const parent = path.dirname(p);\n    this.stat(\n      parent,\n      false,\n      (error: ApiError | undefined | null, stat?: Stats): void => {\n        if (error) {\n          cb(ApiError.FileError(ErrorCode.ENOENT, parent));\n        } else {\n          const module = this.manager.getTranspiledModules()[p].module;\n          this.manager.updateModule(module);\n\n          cb(null);\n        }\n      }\n    );\n  }\n\n  public _syncSync(p: string, data: Buffer): void {\n    const parent = path.dirname(p);\n    this.statSync(parent, false);\n\n    const module = this.manager.getTranspiledModules()[p].module;\n    this.manager.updateModule(module);\n  }\n}\n"]}