{"version":3,"file":"WebsocketFS.js","sourceRoot":"","sources":["../../../src/backend/WebsocketFS.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\n\nimport { ApiError, ErrorCode } from \"../core/api_error\";\nimport { FileFlag } from \"../core/file_flag\";\nimport {\n  BFSCallback,\n  BFSOneArgCallback,\n  FileSystem,\n  FileSystemOptions,\n  SynchronousFileSystem\n} from \"../core/file_system\";\nimport Stats from '../core/node_fs_stats';\n\nexport interface Socket {\n  emit: (data: any, cb: (answer: any) => void) => void;\n  dispose: () => void;\n}\n\nexport interface WebsocketFSOptions {\n  socket: Socket;\n}\n\nexport default class WebsocketFS extends SynchronousFileSystem\n  implements FileSystem {\n  public static readonly Name = \"WebsocketFS\";\n  public static readonly Options: FileSystemOptions = {\n    socket: {\n      type: \"object\",\n      description: \"The socket emitter\",\n      validator: (opt: WebsocketFSOptions, cb: BFSOneArgCallback): void => {\n        if (opt) {\n          cb();\n        } else {\n          cb(new ApiError(ErrorCode.EINVAL, `Manager is invalid`));\n        }\n      }\n    }\n  }\n\n  public static Create(\n    options: WebsocketFSOptions,\n    cb: BFSCallback<WebsocketFS>\n  ): void {\n    cb(null, new WebsocketFS(options));\n  }\n\n  public static isAvailable(): boolean {\n    return true;\n  }\n\n  private socket: Socket;\n\n  constructor(options: WebsocketFSOptions) {\n    super()\n    this.socket = options.socket;\n  }\n\n  public getName(): string {\n    return \"WebsocketFS\";\n  }\n\n  public isReadOnly(): boolean {\n    return false;\n  }\n\n  public supportsProps(): boolean {\n    return false;\n  }\n\n  public supportsSynch(): boolean {\n    return true;\n  }\n\n  public readFile(fname: string, encoding: string | null, flag: FileFlag, cb: BFSCallback<string | Buffer>): void {\n    try {\n      this.socket.emit({\n        method: 'readFile',\n        args: {\n          path: fname,\n          encoding,\n          flag\n        }\n      }, ({ error, data }) => {\n        if (data) {\n          cb(null, Buffer.from(data));\n        } else {\n          cb(error)\n        }\n      })\n    } catch (e) {\n      cb(e);\n    }\n  }\n\n  public stat(p: string, isLstat: boolean | null, cb: BFSCallback<Stats>): void {\n    try {\n      this.socket.emit({\n        method: 'stat',\n        args: {\n          path: p,\n          isLstat\n        }\n      }, ({ error, data }) => {\n        if (data) {\n          cb(null, {\n            ...data,\n            atime: new Date(data.atime),\n            mtime: new Date(data.mtime),\n            ctime: new Date(data.ctime),\n            birthtime: new Date(data.birthtime)\n          });\n        } else {\n          cb(error)\n        }\n      })\n    } catch (e) {\n      cb(e);\n    }\n  }\n}\n\n/*\nthis.statSync(p, isLstat || true)\n*/"]}