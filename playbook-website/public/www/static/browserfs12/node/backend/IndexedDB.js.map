{"version":3,"file":"IndexedDB.js","sourceRoot":"","sources":["../../../src/backend/IndexedDB.ts"],"names":[],"mappings":"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","sourcesContent":["import {BFSOneArgCallback, BFSCallback, FileSystemOptions} from '../core/file_system';\nimport {AsyncKeyValueROTransaction, AsyncKeyValueRWTransaction, AsyncKeyValueStore, AsyncKeyValueFileSystem} from '../generic/key_value_filesystem';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport global from '../core/global';\nimport {arrayBuffer2Buffer, buffer2ArrayBuffer} from '../core/util';\n/**\n * Get the indexedDB constructor for the current browser.\n * @hidden\n */\nconst indexedDB: IDBFactory = global.indexedDB ||\n                          (<any> global).mozIndexedDB ||\n                          (<any> global).webkitIndexedDB ||\n                          global.msIndexedDB;\n\n/**\n * Converts a DOMException or a DOMError from an IndexedDB event into a\n * standardized BrowserFS API error.\n * @hidden\n */\nfunction convertError(e: {name: string}, message: string = e.toString()): ApiError {\n  switch (e.name) {\n    case \"NotFoundError\":\n      return new ApiError(ErrorCode.ENOENT, message);\n    case \"QuotaExceededError\":\n      return new ApiError(ErrorCode.ENOSPC, message);\n    default:\n      // The rest do not seem to map cleanly to standard error codes.\n      return new ApiError(ErrorCode.EIO, message);\n  }\n}\n\n/**\n * Produces a new onerror handler for IDB. Our errors are always fatal, so we\n * handle them generically: Call the user-supplied callback with a translated\n * version of the error, and let the error bubble up.\n * @hidden\n */\nfunction onErrorHandler(cb: (e: ApiError) => void, code: ErrorCode = ErrorCode.EIO, message: string | null = null): (e?: any) => void {\n  return function(e?: any): void {\n    // Prevent the error from canceling the transaction.\n    e.preventDefault();\n    cb(new ApiError(code, message !== null ? message : undefined));\n  };\n}\n\n/**\n * @hidden\n */\nexport class IndexedDBROTransaction implements AsyncKeyValueROTransaction {\n  constructor(public tx: IDBTransaction, public store: IDBObjectStore) { }\n\n  public get(key: string, cb: BFSCallback<Buffer>): void {\n    try {\n      const r: IDBRequest = this.store.get(key);\n      r.onerror = onErrorHandler(cb);\n      r.onsuccess = (event) => {\n        // IDB returns the value 'undefined' when you try to get keys that\n        // don't exist. The caller expects this behavior.\n        const result: any = (<any> event.target).result;\n        if (result === undefined) {\n          cb(null, result);\n        } else {\n          // IDB data is stored as an ArrayBuffer\n          cb(null, arrayBuffer2Buffer(result));\n        }\n      };\n    } catch (e) {\n      cb(convertError(e));\n    }\n  }\n}\n\n/**\n * @hidden\n */\nexport class IndexedDBRWTransaction extends IndexedDBROTransaction implements AsyncKeyValueRWTransaction, AsyncKeyValueROTransaction {\n  constructor(tx: IDBTransaction, store: IDBObjectStore) {\n    super(tx, store);\n  }\n\n  public put(key: string, data: Buffer, overwrite: boolean, cb: BFSCallback<boolean>): void {\n    try {\n      const arraybuffer = buffer2ArrayBuffer(data);\n      let r: IDBRequest;\n      // Note: 'add' will never overwrite an existing key.\n      r = overwrite ? this.store.put(arraybuffer, key) : this.store.add(arraybuffer, key);\n      // XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.\n      r.onerror = onErrorHandler(cb);\n      r.onsuccess = (event) => {\n        cb(null, true);\n      };\n    } catch (e) {\n      cb(convertError(e));\n    }\n  }\n\n  public del(key: string, cb: BFSOneArgCallback): void {\n    try {\n      // NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string\n      // like this.\n      // http://stackoverflow.com/a/26479152\n      const r: IDBRequest = this.store['delete'](key);\n      r.onerror = onErrorHandler(cb);\n      r.onsuccess = (event) => {\n        cb();\n      };\n    } catch (e) {\n      cb(convertError(e));\n    }\n  }\n\n  public commit(cb: BFSOneArgCallback): void {\n    // Return to the event loop to commit the transaction.\n    setTimeout(cb, 0);\n  }\n\n  public abort(cb: BFSOneArgCallback): void {\n    let _e: ApiError | null = null;\n    try {\n      this.tx.abort();\n    } catch (e) {\n      _e = convertError(e);\n    } finally {\n      cb(_e);\n    }\n  }\n}\n\nexport class IndexedDBStore implements AsyncKeyValueStore {\n  public static Create(storeName: string, cb: BFSCallback<IndexedDBStore>): void {\n    const openReq: IDBOpenDBRequest = indexedDB.open(storeName, 1);\n\n    openReq.onupgradeneeded = (event) => {\n      const db: IDBDatabase = (<any> event.target).result;\n      // Huh. This should never happen; we're at version 1. Why does another\n      // database exist?\n      if (db.objectStoreNames.contains(storeName)) {\n        db.deleteObjectStore(storeName);\n      }\n      db.createObjectStore(storeName);\n    };\n\n    openReq.onsuccess = (event) => {\n      cb(null, new IndexedDBStore((<any> event.target).result, storeName));\n    };\n\n    openReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);\n  }\n\n  constructor(private db: IDBDatabase, private storeName: string) {\n\n  }\n\n  public name(): string {\n    return IndexedDBFileSystem.Name + \" - \" + this.storeName;\n  }\n\n  public clear(cb: BFSOneArgCallback): void {\n    try {\n      const tx = this.db.transaction(this.storeName, 'readwrite'),\n        objectStore = tx.objectStore(this.storeName),\n        r: IDBRequest = objectStore.clear();\n      r.onsuccess = (event) => {\n        // Use setTimeout to commit transaction.\n        setTimeout(cb, 0);\n      };\n      r.onerror = onErrorHandler(cb);\n    } catch (e) {\n      cb(convertError(e));\n    }\n  }\n\n  public beginTransaction(type: 'readonly'): AsyncKeyValueROTransaction;\n  public beginTransaction(type: 'readwrite'): AsyncKeyValueRWTransaction;\n  public beginTransaction(type: 'readonly' | 'readwrite' = 'readonly'): AsyncKeyValueROTransaction {\n    const tx = this.db.transaction(this.storeName, type),\n      objectStore = tx.objectStore(this.storeName);\n    if (type === 'readwrite') {\n      return new IndexedDBRWTransaction(tx, objectStore);\n    } else if (type === 'readonly') {\n      return new IndexedDBROTransaction(tx, objectStore);\n    } else {\n      throw new ApiError(ErrorCode.EINVAL, 'Invalid transaction type.');\n    }\n  }\n}\n\n/**\n * Configuration options for the IndexedDB file system.\n */\nexport interface IndexedDBFileSystemOptions {\n  // The name of this file system. You can have multiple IndexedDB file systems operating\n  // at once, but each must have a different name.\n  storeName?: string;\n  // The size of the inode cache. Defaults to 100. A size of 0 or below disables caching.\n  cacheSize?: number;\n}\n\n/**\n * A file system that uses the IndexedDB key value file system.\n */\nexport default class IndexedDBFileSystem extends AsyncKeyValueFileSystem {\n  public static readonly Name = \"IndexedDB\";\n\n  public static readonly Options: FileSystemOptions = {\n    storeName: {\n      type: \"string\",\n      optional: true,\n      description: \"The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name.\"\n    },\n    cacheSize: {\n      type: \"number\",\n      optional: true,\n      description: \"The size of the inode cache. Defaults to 100. A size of 0 or below disables caching.\"\n    }\n  };\n\n  /**\n   * Constructs an IndexedDB file system with the given options.\n   */\n  public static Create(opts: IndexedDBFileSystemOptions, cb: BFSCallback<IndexedDBFileSystem>): void {\n    IndexedDBStore.Create(opts.storeName ? opts.storeName : 'browserfs', (e, store?) => {\n      if (store) {\n        const idbfs = new IndexedDBFileSystem(typeof(opts.cacheSize) === 'number' ? opts.cacheSize : 100);\n        idbfs.init(store, (e) => {\n          if (e) {\n            cb(e);\n          } else {\n            cb(null, idbfs);\n          }\n        });\n      } else {\n        cb(e);\n      }\n    });\n  }\n  public static isAvailable(): boolean {\n    // In Safari's private browsing mode, indexedDB.open returns NULL.\n    // In Firefox, it throws an exception.\n    // In Chrome, it \"just works\", and clears the database when you leave the page.\n    // Untested: Opera, IE.\n    try {\n      return typeof indexedDB !== 'undefined' && null !== indexedDB.open(\"__browserfs_test__\");\n    } catch (e) {\n      return false;\n    }\n  }\n  private constructor(cacheSize: number) {\n    super(cacheSize);\n  }\n}\n"]}