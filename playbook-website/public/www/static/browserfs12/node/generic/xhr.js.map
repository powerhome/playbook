{"version":3,"file":"xhr.js","sourceRoot":"","sources":["../../../src/generic/xhr.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Contains utility methods for performing a variety of tasks with\n * XmlHttpRequest across browsers.\n */\n\nimport {isIE, emptyBuffer} from '../core/util';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport {BFSCallback} from '../core/file_system';\n\nexport const xhrIsAvailable = (typeof(XMLHttpRequest) !== \"undefined\" && XMLHttpRequest !== null);\n\n/**\n * @hidden\n */\nfunction asyncDownloadFileModern(p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\nfunction asyncDownloadFileModern(p: string, type: 'json', cb: BFSCallback<any>): void;\nfunction asyncDownloadFileModern(p: string, type: string, cb: BFSCallback<any>): void;\nfunction asyncDownloadFileModern(p: string, type: string, cb: BFSCallback<any>): void {\n  const req = new XMLHttpRequest();\n  req.open('GET', p, true);\n  let jsonSupported = true;\n  switch (type) {\n    case 'buffer':\n      req.responseType = 'arraybuffer';\n      break;\n    case 'json':\n     // Some browsers don't support the JSON response type.\n     // They either reset responseType, or throw an exception.\n     // @see https://github.com/Modernizr/Modernizr/blob/master/src/testXhrType.js\n      try {\n        req.responseType = 'json';\n        jsonSupported = req.responseType === 'json';\n      } catch (e) {\n        jsonSupported = false;\n      }\n      break;\n    default:\n      return cb(new ApiError(ErrorCode.EINVAL, \"Invalid download type: \" + type));\n  }\n  req.onreadystatechange = function(e) {\n    if (req.readyState === 4) {\n      if (req.status === 200) {\n        switch (type) {\n          case 'buffer':\n            // XXX: WebKit-based browsers return *null* when XHRing an empty file.\n            return cb(null, req.response ? Buffer.from(req.response) : emptyBuffer());\n          case 'json':\n            if (jsonSupported) {\n              return cb(null, req.response);\n            } else {\n              return cb(null, JSON.parse(req.responseText));\n            }\n        }\n      } else {\n        return cb(new ApiError(ErrorCode.EIO, `XHR error: response returned code ${req.status}`));\n      }\n    }\n  };\n  req.send();\n}\n\n/**\n * @hidden\n */\nfunction syncDownloadFileModern(p: string, type: 'buffer'): Buffer;\nfunction syncDownloadFileModern(p: string, type: 'json'): any;\nfunction syncDownloadFileModern(p: string, type: string): any;\nfunction syncDownloadFileModern(p: string, type: string): any {\n  const req = new XMLHttpRequest();\n  req.open('GET', p, false);\n\n  // On most platforms, we cannot set the responseType of synchronous downloads.\n  // @todo Test for this; IE10 allows this, as do older versions of Chrome/FF.\n  let data: any = null;\n  let err: any = null;\n  // Classic hack to download binary data as a string.\n  req.overrideMimeType('text/plain; charset=x-user-defined');\n  req.onreadystatechange = function(e) {\n    if (req.readyState === 4) {\n      if (req.status === 200) {\n        switch (type) {\n          case 'buffer':\n            // Convert the text into a buffer.\n            const text = req.responseText;\n            data = Buffer.alloc(text.length);\n            // Throw away the upper bits of each character.\n            for (let i = 0; i < text.length; i++) {\n              // This will automatically throw away the upper bit of each\n              // character for us.\n              data[i] = text.charCodeAt(i);\n            }\n            return;\n          case 'json':\n            data = JSON.parse(req.responseText);\n            return;\n        }\n      } else {\n        err = new ApiError(ErrorCode.EIO, `XHR error: response returned code ${req.status}`);\n        return;\n      }\n    }\n  };\n  req.send();\n  if (err) {\n    throw err;\n  }\n  return data;\n}\n\n/**\n * IE10 allows us to perform synchronous binary file downloads.\n * @todo Feature detect this, as older versions of FF/Chrome do too!\n * @hidden\n */\nfunction syncDownloadFileIE10(p: string, type: 'buffer'): Buffer;\nfunction syncDownloadFileIE10(p: string, type: 'json'): any;\nfunction syncDownloadFileIE10(p: string, type: string): any;\nfunction syncDownloadFileIE10(p: string, type: string): any {\n  const req = new XMLHttpRequest();\n  req.open('GET', p, false);\n  switch (type) {\n    case 'buffer':\n      req.responseType = 'arraybuffer';\n      break;\n    case 'json':\n      // IE10 does not support the JSON type.\n      break;\n    default:\n      throw new ApiError(ErrorCode.EINVAL, \"Invalid download type: \" + type);\n  }\n  let data: any;\n  let err: any;\n  req.onreadystatechange = function(e) {\n    if (req.readyState === 4) {\n      if (req.status === 200) {\n        switch (type) {\n          case 'buffer':\n            data = Buffer.from(req.response);\n            break;\n          case 'json':\n            data = JSON.parse(req.response);\n            break;\n        }\n      } else {\n        err = new ApiError(ErrorCode.EIO, `XHR error: response returned code ${req.status}`);\n      }\n    }\n  };\n  req.send();\n  if (err) {\n    throw err;\n  }\n  return data;\n}\n\n/**\n * @hidden\n */\nfunction getFileSize(async: boolean, p: string, cb: BFSCallback<number>): void {\n  const req = new XMLHttpRequest();\n  req.open('HEAD', p, async);\n  req.onreadystatechange = function(e) {\n    if (req.readyState === 4) {\n      if (req.status === 200) {\n        try {\n          return cb(null, parseInt(req.getResponseHeader('Content-Length') || '-1', 10));\n        } catch (e) {\n          // In the event that the header isn't present or there is an error...\n          return cb(new ApiError(ErrorCode.EIO, \"XHR HEAD error: Could not read content-length.\"));\n        }\n      } else {\n        return cb(new ApiError(ErrorCode.EIO, `XHR HEAD error: response returned code ${req.status}`));\n      }\n    }\n  };\n  req.send();\n}\n\n/**\n * Asynchronously download a file as a buffer or a JSON object.\n * Note that the third function signature with a non-specialized type is\n * invalid, but TypeScript requires it when you specialize string arguments to\n * constants.\n * @hidden\n */\nexport let asyncDownloadFile: {\n  (p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\n  (p: string, type: 'json', cb: BFSCallback<any>): void;\n  (p: string, type: string, cb: BFSCallback<any>): void;\n} = asyncDownloadFileModern;\n\n/**\n * Synchronously download a file as a buffer or a JSON object.\n * Note that the third function signature with a non-specialized type is\n * invalid, but TypeScript requires it when you specialize string arguments to\n * constants.\n * @hidden\n */\nexport let syncDownloadFile: {\n  (p: string, type: 'buffer'): Buffer;\n  (p: string, type: 'json'): any;\n  (p: string, type: string): any;\n} = (isIE && typeof Blob !== 'undefined') ? syncDownloadFileIE10 : syncDownloadFileModern;\n\n/**\n * Synchronously retrieves the size of the given file in bytes.\n * @hidden\n */\nexport function getFileSizeSync(p: string): number {\n  let rv: number = -1;\n  getFileSize(false, p, function(err: ApiError, size?: number) {\n    if (err) {\n      throw err;\n    }\n    rv = size!;\n  });\n  return rv;\n}\n\n/**\n * Asynchronously retrieves the size of the given file in bytes.\n * @hidden\n */\nexport function getFileSizeAsync(p: string, cb: (err: ApiError, size?: number) => void): void {\n  getFileSize(true, p, cb);\n}\n"]}