{"version":3,"file":"key_value_filesystem.js","sourceRoot":"","sources":["../../../src/generic/key_value_filesystem.ts"],"names":[],"mappings":"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","sourcesContent":["import {BaseFileSystem, SynchronousFileSystem, BFSOneArgCallback, BFSCallback, BFSThreeArgCallback} from '../core/file_system';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport {default as Stats, FileType} from '../core/node_fs_stats';\nimport {File} from '../core/file';\nimport {FileFlag} from '../core/file_flag';\nimport * as path from 'path';\nimport Inode from '../generic/inode';\nimport PreloadFile from '../generic/preload_file';\nimport {emptyBuffer} from '../core/util';\n/**\n * @hidden\n */\nconst ROOT_NODE_ID: string = \"/\";\n/**\n * @hidden\n */\nlet emptyDirNode: Buffer | null = null;\n/**\n * Returns an empty directory node.\n * @hidden\n */\nfunction getEmptyDirNode(): Buffer {\n  if (emptyDirNode) {\n    return emptyDirNode;\n  }\n  return emptyDirNode = Buffer.from(\"{}\");\n}\n\n/**\n * Generates a random ID.\n * @hidden\n */\nfunction GenerateRandomID(): string {\n  // From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * Helper function. Checks if 'e' is defined. If so, it triggers the callback\n * with 'e' and returns false. Otherwise, returns true.\n * @hidden\n */\nfunction noError(e: ApiError | undefined | null, cb: (e: ApiError) => void): boolean {\n  if (e) {\n    cb(e);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,\n * triggers the callback with 'e', and returns false. Otherwise, returns true.\n * @hidden\n */\nfunction noErrorTx(e: ApiError | undefined | null, tx: AsyncKeyValueRWTransaction, cb: (e: ApiError) => void): boolean {\n  if (e) {\n    tx.abort(() => {\n      cb(e);\n    });\n    return false;\n  }\n  return true;\n}\n\n/**\n * Represents a *synchronous* key-value store.\n */\nexport interface SyncKeyValueStore {\n  /**\n   * The name of the key-value store.\n   */\n  name(): string;\n  /**\n   * Empties the key-value store completely.\n   */\n  clear(): void;\n  /**\n   * Begins a new read-only transaction.\n   */\n  beginTransaction(type: \"readonly\"): SyncKeyValueROTransaction;\n  /**\n   * Begins a new read-write transaction.\n   */\n  beginTransaction(type: \"readwrite\"): SyncKeyValueRWTransaction;\n  beginTransaction(type: string): SyncKeyValueROTransaction;\n}\n\n/**\n * A read-only transaction for a synchronous key value store.\n */\nexport interface SyncKeyValueROTransaction {\n  /**\n   * Retrieves the data at the given key. Throws an ApiError if an error occurs\n   * or if the key does not exist.\n   * @param key The key to look under for data.\n   * @return The data stored under the key, or undefined if not present.\n   */\n  get(key: string): Buffer | undefined;\n}\n\n/**\n * A read-write transaction for a synchronous key value store.\n */\nexport interface SyncKeyValueRWTransaction extends SyncKeyValueROTransaction {\n  /**\n   * Adds the data to the store under the given key.\n   * @param key The key to add the data under.\n   * @param data The data to add to the store.\n   * @param overwrite If 'true', overwrite any existing data. If 'false',\n   *   avoids storing the data if the key exists.\n   * @return True if storage succeeded, false otherwise.\n   */\n  put(key: string, data: Buffer, overwrite: boolean): boolean;\n  /**\n   * Deletes the data at the given key.\n   * @param key The key to delete from the store.\n   */\n  del(key: string): void;\n  /**\n   * Commits the transaction.\n   */\n  commit(): void;\n  /**\n   * Aborts and rolls back the transaction.\n   */\n  abort(): void;\n}\n\n/**\n * An interface for simple synchronous key-value stores that don't have special\n * support for transactions and such.\n */\nexport interface SimpleSyncStore {\n  get(key: string): Buffer | undefined;\n  put(key: string, data: Buffer, overwrite: boolean): boolean;\n  del(key: string): void;\n}\n\nclass LRUNode {\n  public prev: LRUNode | null = null;\n  public next: LRUNode | null = null;\n  constructor(public key: string, public value: string) {}\n}\n\n// Adapted from https://chrisrng.svbtle.com/lru-cache-in-javascript\nclass LRUCache {\n  private size = 0;\n  private map: {[id: string]: LRUNode} = {};\n  private head: LRUNode | null = null;\n  private tail: LRUNode | null = null;\n  constructor(public readonly limit: number) {}\n\n  /**\n   * Change or add a new value in the cache\n   * We overwrite the entry if it already exists\n   */\n  public set(key: string, value: string): void {\n    const node = new LRUNode(key, value);\n    if (this.map[key]) {\n      this.map[key].value = node.value;\n      this.remove(node.key);\n    } else {\n      if (this.size >= this.limit) {\n        delete this.map[this.tail!.key];\n        this.size--;\n        this.tail = this.tail!.prev;\n        this.tail!.next = null;\n      }\n    }\n    this.setHead(node);\n  }\n\n  /* Retrieve a single entry from the cache */\n  public get(key: string): string | null {\n    if (this.map[key]) {\n      const value = this.map[key].value;\n      const node = new LRUNode(key, value);\n      this.remove(key);\n      this.setHead(node);\n      return value;\n    } else {\n      return null;\n    }\n  }\n\n  /* Remove a single entry from the cache */\n  public remove(key: string): void {\n    const node = this.map[key];\n    if (!node) {\n      return;\n    }\n    if (node.prev !== null) {\n      node.prev.next = node.next;\n    } else {\n      this.head = node.next;\n    }\n    if (node.next !== null) {\n      node.next.prev = node.prev;\n    } else {\n      this.tail = node.prev;\n    }\n    delete this.map[key];\n    this.size--;\n  }\n\n  /* Resets the entire cache - Argument limit is optional to be reset */\n  public removeAll() {\n    this.size = 0;\n    this.map = {};\n    this.head = null;\n    this.tail = null;\n  }\n\n  private setHead(node: LRUNode): void {\n    node.next = this.head;\n    node.prev = null;\n    if (this.head !== null) {\n        this.head.prev = node;\n    }\n    this.head = node;\n    if (this.tail === null) {\n        this.tail = node;\n    }\n    this.size++;\n    this.map[node.key] = node;\n  }\n}\n\n/**\n * A simple RW transaction for simple synchronous key-value stores.\n */\nexport class SimpleSyncRWTransaction implements SyncKeyValueRWTransaction {\n  /**\n   * Stores data in the keys we modify prior to modifying them.\n   * Allows us to roll back commits.\n   */\n  private originalData: { [key: string]: Buffer | undefined } = {};\n  /**\n   * List of keys modified in this transaction, if any.\n   */\n  private modifiedKeys: string[] = [];\n\n  constructor(private store: SimpleSyncStore) { }\n\n  public get(key: string): Buffer | undefined {\n    const val = this.store.get(key);\n    this.stashOldValue(key, val);\n    return val;\n  }\n\n  public put(key: string, data: Buffer, overwrite: boolean): boolean {\n    this.markModified(key);\n    return this.store.put(key, data, overwrite);\n  }\n\n  public del(key: string): void {\n    this.markModified(key);\n    this.store.del(key);\n  }\n\n  public commit(): void {/* NOP */}\n\n  public abort(): void {\n    // Rollback old values.\n    for (const key of this.modifiedKeys) {\n      const value = this.originalData[key];\n      if (!value) {\n        // Key didn't exist.\n        this.store.del(key);\n      } else {\n        // Key existed. Store old value.\n        this.store.put(key, value, true);\n      }\n    }\n  }\n\n  /**\n   * Stashes given key value pair into `originalData` if it doesn't already\n   * exist. Allows us to stash values the program is requesting anyway to\n   * prevent needless `get` requests if the program modifies the data later\n   * on during the transaction.\n   */\n  private stashOldValue(key: string, value: Buffer | undefined) {\n    // Keep only the earliest value in the transaction.\n    if (!this.originalData.hasOwnProperty(key)) {\n      this.originalData[key] = value;\n    }\n  }\n\n  /**\n   * Marks the given key as modified, and stashes its value if it has not been\n   * stashed already.\n   */\n  private markModified(key: string) {\n    if (this.modifiedKeys.indexOf(key) === -1) {\n      this.modifiedKeys.push(key);\n      if (!this.originalData.hasOwnProperty(key)) {\n        this.originalData[key] = this.store.get(key);\n      }\n    }\n  }\n}\n\nexport interface SyncKeyValueFileSystemOptions {\n  /**\n   * The actual key-value store to read from/write to.\n   */\n  store: SyncKeyValueStore;\n  /**\n   * Should the file system support properties (mtime/atime/ctime/chmod/etc)?\n   * Enabling this slightly increases the storage space per file, and adds\n   * atime updates every time a file is accessed, mtime updates every time\n   * a file is modified, and permission checks on every operation.\n   *\n   * Defaults to *false*.\n   */\n  // supportProps?: boolean;\n  /**\n   * Should the file system support links?\n   */\n  // supportLinks?: boolean;\n}\n\nexport class SyncKeyValueFile extends PreloadFile<SyncKeyValueFileSystem> implements File {\n  constructor(_fs: SyncKeyValueFileSystem, _path: string, _flag: FileFlag, _stat: Stats, contents?: Buffer) {\n    super(_fs, _path, _flag, _stat, contents);\n  }\n\n  public syncSync(): void {\n    if (this.isDirty()) {\n      this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());\n      this.resetDirty();\n    }\n  }\n\n  public closeSync(): void {\n    this.syncSync();\n  }\n}\n\n/**\n * A \"Synchronous key-value file system\". Stores data to/retrieves data from an\n * underlying key-value store.\n *\n * We use a unique ID for each node in the file system. The root node has a\n * fixed ID.\n * @todo Introduce Node ID caching.\n * @todo Check modes.\n */\nexport class SyncKeyValueFileSystem extends SynchronousFileSystem {\n  public static isAvailable(): boolean { return true; }\n\n  private store: SyncKeyValueStore;\n\n  constructor(options: SyncKeyValueFileSystemOptions) {\n    super();\n    this.store = options.store;\n    // INVARIANT: Ensure that the root exists.\n    this.makeRootDirectory();\n  }\n\n  public getName(): string { return this.store.name(); }\n  public isReadOnly(): boolean { return false; }\n  public supportsSymlinks(): boolean { return false; }\n  public supportsProps(): boolean { return false; }\n  public supportsSynch(): boolean { return true; }\n\n  /**\n   * Delete all contents stored in the file system.\n   */\n  public empty(): void {\n    this.store.clear();\n    // INVARIANT: Root always exists.\n    this.makeRootDirectory();\n  }\n\n  public renameSync(oldPath: string, newPath: string): void {\n    const tx = this.store.beginTransaction('readwrite'),\n      oldParent = path.dirname(oldPath), oldName = path.basename(oldPath),\n      newParent = path.dirname(newPath), newName = path.basename(newPath),\n      // Remove oldPath from parent's directory listing.\n      oldDirNode = this.findINode(tx, oldParent),\n      oldDirList = this.getDirListing(tx, oldParent, oldDirNode);\n\n    if (!oldDirList[oldName]) {\n      throw ApiError.ENOENT(oldPath);\n    }\n    const nodeId: string = oldDirList[oldName];\n    delete oldDirList[oldName];\n\n    // Invariant: Can't move a folder inside itself.\n    // This funny little hack ensures that the check passes only if oldPath\n    // is a subpath of newParent. We append '/' to avoid matching folders that\n    // are a substring of the bottom-most folder in the path.\n    if ((newParent + '/').indexOf(oldPath + '/') === 0) {\n      throw new ApiError(ErrorCode.EBUSY, oldParent);\n    }\n\n    // Add newPath to parent's directory listing.\n    let newDirNode: Inode, newDirList: typeof oldDirList;\n    if (newParent === oldParent) {\n      // Prevent us from re-grabbing the same directory listing, which still\n      // contains oldName.\n      newDirNode = oldDirNode;\n      newDirList = oldDirList;\n    } else {\n      newDirNode = this.findINode(tx, newParent);\n      newDirList = this.getDirListing(tx, newParent, newDirNode);\n    }\n\n    if (newDirList[newName]) {\n      // If it's a file, delete it.\n      const newNameNode = this.getINode(tx, newPath, newDirList[newName]);\n      if (newNameNode.isFile()) {\n        try {\n          tx.del(newNameNode.id);\n          tx.del(newDirList[newName]);\n        } catch (e) {\n          tx.abort();\n          throw e;\n        }\n      } else {\n        // If it's a directory, throw a permissions error.\n        throw ApiError.EPERM(newPath);\n      }\n    }\n    newDirList[newName] = nodeId;\n\n    // Commit the two changed directory listings.\n    try {\n      tx.put(oldDirNode.id, Buffer.from(JSON.stringify(oldDirList)), true);\n      tx.put(newDirNode.id, Buffer.from(JSON.stringify(newDirList)), true);\n    } catch (e) {\n      tx.abort();\n      throw e;\n    }\n\n    tx.commit();\n  }\n\n  public statSync(p: string, isLstat: boolean): Stats {\n    // Get the inode to the item, convert it into a Stats object.\n    return this.findINode(this.store.beginTransaction('readonly'), p).toStats();\n  }\n\n  public createFileSync(p: string, flag: FileFlag, mode: number): File {\n    const tx = this.store.beginTransaction('readwrite'),\n      data = emptyBuffer(),\n      newFile = this.commitNewFile(tx, p, FileType.FILE, mode, data);\n    // Open the file.\n    return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);\n  }\n\n  public openFileSync(p: string, flag: FileFlag): File {\n    const tx = this.store.beginTransaction('readonly'),\n      node = this.findINode(tx, p),\n      data = tx.get(node.id);\n    if (data === undefined) {\n      throw ApiError.ENOENT(p);\n    }\n    return new SyncKeyValueFile(this, p, flag, node.toStats(), data);\n  }\n\n  public unlinkSync(p: string): void {\n    this.removeEntry(p, false);\n  }\n\n  public rmdirSync(p: string): void {\n    // Check first if directory is empty.\n    if (this.readdirSync(p).length > 0) {\n      throw ApiError.ENOTEMPTY(p);\n    } else {\n      this.removeEntry(p, true);\n    }\n  }\n\n  public mkdirSync(p: string, mode: number): void {\n    const tx = this.store.beginTransaction('readwrite'),\n      data = Buffer.from('{}');\n    this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data);\n  }\n\n  public readdirSync(p: string): string[] {\n    const tx = this.store.beginTransaction('readonly');\n    return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));\n  }\n\n  public _syncSync(p: string, data: Buffer, stats: Stats): void {\n    // @todo Ensure mtime updates properly, and use that to determine if a data\n    //       update is required.\n    const tx = this.store.beginTransaction('readwrite'),\n      // We use the _findInode helper because we actually need the INode id.\n      fileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)),\n      fileInode = this.getINode(tx, p, fileInodeId),\n      inodeChanged = fileInode.update(stats);\n\n    try {\n      // Sync data.\n      tx.put(fileInode.id, data, true);\n      // Sync metadata.\n      if (inodeChanged) {\n        tx.put(fileInodeId, fileInode.toBuffer(), true);\n      }\n    } catch (e) {\n      tx.abort();\n      throw e;\n    }\n    tx.commit();\n  }\n\n  /**\n   * Checks if the root directory exists. Creates it if it doesn't.\n   */\n  private makeRootDirectory() {\n    const tx = this.store.beginTransaction('readwrite');\n    if (tx.get(ROOT_NODE_ID) === undefined) {\n      // Create new inode.\n      const currTime = (new Date()).getTime(),\n        // Mode 0666\n        dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);\n      // If the root doesn't exist, the first random ID shouldn't exist,\n      // either.\n      tx.put(dirInode.id, getEmptyDirNode(), false);\n      tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);\n      tx.commit();\n    }\n  }\n\n  /**\n   * Helper function for findINode.\n   * @param parent The parent directory of the file we are attempting to find.\n   * @param filename The filename of the inode we are attempting to find, minus\n   *   the parent.\n   * @return string The ID of the file's inode in the file system.\n   */\n  private _findINode(tx: SyncKeyValueROTransaction, parent: string, filename: string): string {\n    const readDirectory = (inode: Inode): string => {\n      // Get the root's directory listing.\n      const dirList = this.getDirListing(tx, parent, inode);\n      // Get the file's ID.\n      if (dirList[filename]) {\n        return dirList[filename];\n      } else {\n        throw ApiError.ENOENT(path.resolve(parent, filename));\n      }\n    };\n    if (parent === '/') {\n      if (filename === '') {\n        // BASE CASE #1: Return the root's ID.\n        return ROOT_NODE_ID;\n      } else {\n        // BASE CASE #2: Find the item in the root ndoe.\n        return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));\n      }\n    } else {\n      return readDirectory(this.getINode(tx, parent + path.sep + filename,\n        this._findINode(tx, path.dirname(parent), path.basename(parent))));\n    }\n  }\n\n  /**\n   * Finds the Inode of the given path.\n   * @param p The path to look up.\n   * @return The Inode of the path p.\n   * @todo memoize/cache\n   */\n  private findINode(tx: SyncKeyValueROTransaction, p: string): Inode {\n    return this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));\n  }\n\n  /**\n   * Given the ID of a node, retrieves the corresponding Inode.\n   * @param tx The transaction to use.\n   * @param p The corresponding path to the file (used for error messages).\n   * @param id The ID to look up.\n   */\n  private getINode(tx: SyncKeyValueROTransaction, p: string, id: string): Inode {\n    const inode = tx.get(id);\n    if (inode === undefined) {\n      throw ApiError.ENOENT(p);\n    }\n    return Inode.fromBuffer(inode);\n  }\n\n  /**\n   * Given the Inode of a directory, retrieves the corresponding directory\n   * listing.\n   */\n  private getDirListing(tx: SyncKeyValueROTransaction, p: string, inode: Inode): { [fileName: string]: string } {\n    if (!inode.isDirectory()) {\n      throw ApiError.ENOTDIR(p);\n    }\n    const data = tx.get(inode.id);\n    if (data === undefined) {\n      throw ApiError.ENOENT(p);\n    }\n    return JSON.parse(data.toString());\n  }\n\n  /**\n   * Creates a new node under a random ID. Retries 5 times before giving up in\n   * the exceedingly unlikely chance that we try to reuse a random GUID.\n   * @return The GUID that the data was stored under.\n   */\n  private addNewNode(tx: SyncKeyValueRWTransaction, data: Buffer): string {\n    const retries = 0;\n    let currId: string;\n    while (retries < 5) {\n      try {\n        currId = GenerateRandomID();\n        tx.put(currId, data, false);\n        return currId;\n      } catch (e) {\n        // Ignore and reroll.\n      }\n    }\n    throw new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.');\n  }\n\n  /**\n   * Commits a new file (well, a FILE or a DIRECTORY) to the file system with\n   * the given mode.\n   * Note: This will commit the transaction.\n   * @param p The path to the new file.\n   * @param type The type of the new file.\n   * @param mode The mode to create the new file with.\n   * @param data The data to store at the file's data node.\n   * @return The Inode for the new file.\n   */\n  private commitNewFile(tx: SyncKeyValueRWTransaction, p: string, type: FileType, mode: number, data: Buffer): Inode {\n    const parentDir = path.dirname(p),\n      fname = path.basename(p),\n      parentNode = this.findINode(tx, parentDir),\n      dirListing = this.getDirListing(tx, parentDir, parentNode),\n      currTime = (new Date()).getTime();\n\n    // Invariant: The root always exists.\n    // If we don't check this prior to taking steps below, we will create a\n    // file with name '' in root should p == '/'.\n    if (p === '/') {\n      throw ApiError.EEXIST(p);\n    }\n\n    // Check if file already exists.\n    if (dirListing[fname]) {\n      throw ApiError.EEXIST(p);\n    }\n\n    let fileNode: Inode;\n    try {\n      // Commit data.\n      const dataId = this.addNewNode(tx, data);\n      fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);\n      // Commit file node.\n      const fileNodeId = this.addNewNode(tx, fileNode.toBuffer());\n      // Update and commit parent directory listing.\n      dirListing[fname] = fileNodeId;\n      tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true);\n    } catch (e) {\n      tx.abort();\n      throw e;\n    }\n    tx.commit();\n    return fileNode;\n  }\n\n  /**\n   * Remove all traces of the given path from the file system.\n   * @param p The path to remove from the file system.\n   * @param isDir Does the path belong to a directory, or a file?\n   * @todo Update mtime.\n   */\n  private removeEntry(p: string, isDir: boolean): void {\n    const tx = this.store.beginTransaction('readwrite'),\n      parent: string = path.dirname(p),\n      parentNode = this.findINode(tx, parent),\n      parentListing = this.getDirListing(tx, parent, parentNode),\n      fileName: string = path.basename(p);\n\n    if (!parentListing[fileName]) {\n      throw ApiError.ENOENT(p);\n    }\n\n    // Remove from directory listing of parent.\n    const fileNodeId = parentListing[fileName];\n    delete parentListing[fileName];\n\n    // Get file inode.\n    const fileNode = this.getINode(tx, p, fileNodeId);\n    if (!isDir && fileNode.isDirectory()) {\n      throw ApiError.EISDIR(p);\n    } else if (isDir && !fileNode.isDirectory()) {\n      throw ApiError.ENOTDIR(p);\n    }\n\n    try {\n      // Delete data.\n      tx.del(fileNode.id);\n      // Delete node.\n      tx.del(fileNodeId);\n      // Update directory listing.\n      tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true);\n    } catch (e) {\n      tx.abort();\n      throw e;\n    }\n    // Success.\n    tx.commit();\n  }\n}\n\n/**\n * Represents an *asynchronous* key-value store.\n */\nexport interface AsyncKeyValueStore {\n  /**\n   * The name of the key-value store.\n   */\n  name(): string;\n  /**\n   * Empties the key-value store completely.\n   */\n  clear(cb: BFSOneArgCallback): void;\n  /**\n   * Begins a read-write transaction.\n   */\n  beginTransaction(type: 'readwrite'): AsyncKeyValueRWTransaction;\n  /**\n   * Begins a read-only transaction.\n   */\n  beginTransaction(type: 'readonly'): AsyncKeyValueROTransaction;\n  beginTransaction(type: string): AsyncKeyValueROTransaction;\n}\n\n/**\n * Represents an asynchronous read-only transaction.\n */\nexport interface AsyncKeyValueROTransaction {\n  /**\n   * Retrieves the data at the given key.\n   * @param key The key to look under for data.\n   */\n  get(key: string, cb: BFSCallback<Buffer>): void;\n}\n\n/**\n * Represents an asynchronous read-write transaction.\n */\nexport interface AsyncKeyValueRWTransaction extends AsyncKeyValueROTransaction {\n  /**\n   * Adds the data to the store under the given key. Overwrites any existing\n   * data.\n   * @param key The key to add the data under.\n   * @param data The data to add to the store.\n   * @param overwrite If 'true', overwrite any existing data. If 'false',\n   *   avoids writing the data if the key exists.\n   * @param cb Triggered with an error and whether or not the value was\n   *   committed.\n   */\n  put(key: string, data: Buffer, overwrite: boolean, cb: BFSCallback<boolean>): void;\n  /**\n   * Deletes the data at the given key.\n   * @param key The key to delete from the store.\n   */\n  del(key: string, cb: BFSOneArgCallback): void;\n  /**\n   * Commits the transaction.\n   */\n  commit(cb: BFSOneArgCallback): void;\n  /**\n   * Aborts and rolls back the transaction.\n   */\n  abort(cb: BFSOneArgCallback): void;\n}\n\nexport class AsyncKeyValueFile extends PreloadFile<AsyncKeyValueFileSystem> implements File {\n  constructor(_fs: AsyncKeyValueFileSystem, _path: string, _flag: FileFlag, _stat: Stats, contents?: Buffer) {\n    super(_fs, _path, _flag, _stat, contents);\n  }\n\n  public sync(cb: BFSOneArgCallback): void {\n    if (this.isDirty()) {\n      this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), (e?: ApiError) => {\n        if (!e) {\n          this.resetDirty();\n        }\n        cb(e);\n      });\n    } else {\n      cb();\n    }\n  }\n\n  public close(cb: BFSOneArgCallback): void {\n    this.sync(cb);\n  }\n}\n\n/**\n * An \"Asynchronous key-value file system\". Stores data to/retrieves data from\n * an underlying asynchronous key-value store.\n */\nexport class AsyncKeyValueFileSystem extends BaseFileSystem {\n  public static isAvailable(): boolean { return true; }\n\n  protected store: AsyncKeyValueStore;\n  private _cache: LRUCache | null = null;\n\n  constructor(cacheSize: number) {\n    super();\n    if (cacheSize > 0) {\n      this._cache = new LRUCache(cacheSize);\n    }\n  }\n\n  /**\n   * Initializes the file system. Typically called by subclasses' async\n   * constructors.\n   */\n  public init(store: AsyncKeyValueStore, cb: BFSOneArgCallback) {\n    this.store = store;\n    // INVARIANT: Ensure that the root exists.\n    this.makeRootDirectory(cb);\n  }\n  public getName(): string { return this.store.name(); }\n  public isReadOnly(): boolean { return false; }\n  public supportsSymlinks(): boolean { return false; }\n  public supportsProps(): boolean { return false; }\n  public supportsSynch(): boolean { return false; }\n\n  /**\n   * Delete all contents stored in the file system.\n   */\n  public empty(cb: BFSOneArgCallback): void {\n    if (this._cache) {\n      this._cache.removeAll();\n    }\n    this.store.clear((e?) => {\n      if (noError(e, cb)) {\n        // INVARIANT: Root always exists.\n        this.makeRootDirectory(cb);\n      }\n    });\n  }\n\n  public rename(oldPath: string, newPath: string, cb: BFSOneArgCallback): void {\n    // TODO: Make rename compatible with the cache.\n    if (this._cache) {\n      // Clear and disable cache during renaming process.\n      const c = this._cache;\n      this._cache = null;\n      c.removeAll();\n      const oldCb = cb;\n      cb = (e?: ApiError | null) => {\n        // Restore empty cache.\n        this._cache = c;\n        oldCb(e);\n      };\n    }\n\n    const tx = this.store.beginTransaction('readwrite');\n    const oldParent = path.dirname(oldPath), oldName = path.basename(oldPath);\n    const newParent = path.dirname(newPath), newName = path.basename(newPath);\n    const inodes: { [path: string]: Inode } = {};\n    const lists: {\n      [path: string]: { [file: string]: string }\n    } = {};\n    let errorOccurred: boolean = false;\n\n    // Invariant: Can't move a folder inside itself.\n    // This funny little hack ensures that the check passes only if oldPath\n    // is a subpath of newParent. We append '/' to avoid matching folders that\n    // are a substring of the bottom-most folder in the path.\n    if ((newParent + '/').indexOf(oldPath + '/') === 0) {\n      return cb(new ApiError(ErrorCode.EBUSY, oldParent));\n    }\n\n    /**\n     * Responsible for Phase 2 of the rename operation: Modifying and\n     * committing the directory listings. Called once we have successfully\n     * retrieved both the old and new parent's inodes and listings.\n     */\n    const theOleSwitcharoo = (): void => {\n      // Sanity check: Ensure both paths are present, and no error has occurred.\n      if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {\n        return;\n      }\n      const oldParentList = lists[oldParent], oldParentINode = inodes[oldParent],\n        newParentList = lists[newParent], newParentINode = inodes[newParent];\n\n      // Delete file from old parent.\n      if (!oldParentList[oldName]) {\n        cb(ApiError.ENOENT(oldPath));\n      } else {\n        const fileId = oldParentList[oldName];\n        delete oldParentList[oldName];\n\n        // Finishes off the renaming process by adding the file to the new\n        // parent.\n        const completeRename = () => {\n          newParentList[newName] = fileId;\n          // Commit old parent's list.\n          tx.put(oldParentINode.id, Buffer.from(JSON.stringify(oldParentList)), true, (e: ApiError) => {\n            if (noErrorTx(e, tx, cb)) {\n              if (oldParent === newParent) {\n                // DONE!\n                tx.commit(cb);\n              } else {\n                // Commit new parent's list.\n                tx.put(newParentINode.id, Buffer.from(JSON.stringify(newParentList)), true, (e: ApiError) => {\n                  if (noErrorTx(e, tx, cb)) {\n                    tx.commit(cb);\n                  }\n                });\n              }\n            }\n          });\n        };\n\n        if (newParentList[newName]) {\n          // 'newPath' already exists. Check if it's a file or a directory, and\n          // act accordingly.\n          this.getINode(tx, newPath, newParentList[newName], (e: ApiError, inode?: Inode) => {\n            if (noErrorTx(e, tx, cb)) {\n              if (inode!.isFile()) {\n                // Delete the file and continue.\n                tx.del(inode!.id, (e?: ApiError) => {\n                  if (noErrorTx(e, tx, cb)) {\n                    tx.del(newParentList[newName], (e?: ApiError) => {\n                      if (noErrorTx(e, tx, cb)) {\n                        completeRename();\n                      }\n                    });\n                  }\n                });\n              } else {\n                // Can't overwrite a directory using rename.\n                tx.abort((e?) => {\n                  cb(ApiError.EPERM(newPath));\n                });\n              }\n            }\n          });\n        } else {\n          completeRename();\n        }\n      }\n    };\n\n    /**\n     * Grabs a path's inode and directory listing, and shoves it into the\n     * inodes and lists hashes.\n     */\n    const processInodeAndListings = (p: string): void => {\n      this.findINodeAndDirListing(tx, p, (e?: ApiError | null, node?: Inode, dirList?: {[name: string]: string}): void => {\n        if (e) {\n          if (!errorOccurred) {\n            errorOccurred = true;\n            tx.abort(() => {\n              cb(e);\n            });\n          }\n          // If error has occurred already, just stop here.\n        } else {\n          inodes[p] = node!;\n          lists[p] = dirList!;\n          theOleSwitcharoo();\n        }\n      });\n    };\n\n    processInodeAndListings(oldParent);\n    if (oldParent !== newParent) {\n      processInodeAndListings(newParent);\n    }\n  }\n\n  public stat(p: string, isLstat: boolean, cb: BFSCallback<Stats>): void {\n    const tx = this.store.beginTransaction('readonly');\n    this.findINode(tx, p, (e: ApiError, inode?: Inode): void => {\n      if (noError(e, cb)) {\n        cb(null, inode!.toStats());\n      }\n    });\n  }\n\n  public createFile(p: string, flag: FileFlag, mode: number, cb: BFSCallback<File>): void {\n    const tx = this.store.beginTransaction('readwrite'),\n      data = emptyBuffer();\n\n    this.commitNewFile(tx, p, FileType.FILE, mode, data, (e: ApiError, newFile?: Inode): void => {\n      if (noError(e, cb)) {\n        cb(null, new AsyncKeyValueFile(this, p, flag, newFile!.toStats(), data));\n      }\n    });\n  }\n\n  public openFile(p: string, flag: FileFlag, cb: BFSCallback<File>): void {\n    const tx = this.store.beginTransaction('readonly');\n    // Step 1: Grab the file's inode.\n    this.findINode(tx, p, (e: ApiError, inode?: Inode) => {\n      if (noError(e, cb)) {\n        // Step 2: Grab the file's data.\n        tx.get(inode!.id, (e: ApiError, data?: Buffer): void => {\n          if (noError(e, cb)) {\n            if (data === undefined) {\n              cb(ApiError.ENOENT(p));\n            } else {\n              cb(null, new AsyncKeyValueFile(this, p, flag, inode!.toStats(), data));\n            }\n          }\n        });\n      }\n    });\n  }\n\n  public unlink(p: string, cb: BFSOneArgCallback): void {\n    this.removeEntry(p, false, cb);\n  }\n\n  public rmdir(p: string, cb: BFSOneArgCallback): void {\n    // Check first if directory is empty.\n    this.readdir(p, (err, files?) => {\n      if (err) {\n        cb(err);\n      } else if (files!.length > 0) {\n        cb(ApiError.ENOTEMPTY(p));\n      } else {\n        this.removeEntry(p, true, cb);\n      }\n    });\n  }\n\n  public mkdir(p: string, mode: number, cb: BFSOneArgCallback): void {\n    const tx = this.store.beginTransaction('readwrite'),\n      data = Buffer.from('{}');\n    this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);\n  }\n\n  public readdir(p: string, cb: BFSCallback<string[]>): void {\n    const tx = this.store.beginTransaction('readonly');\n    this.findINode(tx, p, (e: ApiError, inode?: Inode) => {\n      if (noError(e, cb)) {\n        this.getDirListing(tx, p, inode!, (e: ApiError, dirListing?: {[name: string]: string}) => {\n          if (noError(e, cb)) {\n            cb(null, Object.keys(dirListing!));\n          }\n        });\n      }\n    });\n  }\n\n  public _sync(p: string, data: Buffer, stats: Stats, cb: BFSOneArgCallback): void {\n    // @todo Ensure mtime updates properly, and use that to determine if a data\n    //       update is required.\n    const tx = this.store.beginTransaction('readwrite');\n    // Step 1: Get the file node's ID.\n    this._findINode(tx, path.dirname(p), path.basename(p), (e: ApiError, fileInodeId?: string): void => {\n      if (noErrorTx(e, tx, cb)) {\n        // Step 2: Get the file inode.\n        this.getINode(tx, p, fileInodeId!, (e: ApiError, fileInode?: Inode): void => {\n          if (noErrorTx(e, tx, cb)) {\n            const inodeChanged: boolean = fileInode!.update(stats);\n            // Step 3: Sync the data.\n            tx.put(fileInode!.id, data, true, (e: ApiError): void => {\n              if (noErrorTx(e, tx, cb)) {\n                // Step 4: Sync the metadata (if it changed)!\n                if (inodeChanged) {\n                  tx.put(fileInodeId!, fileInode!.toBuffer(), true, (e: ApiError): void => {\n                    if (noErrorTx(e, tx, cb)) {\n                      tx.commit(cb);\n                    }\n                  });\n                } else {\n                  // No need to sync metadata; return.\n                  tx.commit(cb);\n                }\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Checks if the root directory exists. Creates it if it doesn't.\n   */\n  private makeRootDirectory(cb: BFSOneArgCallback) {\n    const tx = this.store.beginTransaction('readwrite');\n    tx.get(ROOT_NODE_ID, (e: ApiError, data?: Buffer) => {\n      if (e || data === undefined) {\n        // Create new inode.\n        const currTime = (new Date()).getTime(),\n          // Mode 0666\n          dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);\n        // If the root doesn't exist, the first random ID shouldn't exist,\n        // either.\n        tx.put(dirInode.id, getEmptyDirNode(), false, (e?: ApiError) => {\n          if (noErrorTx(e, tx, cb)) {\n            tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, (e?: ApiError) => {\n              if (e) {\n                tx.abort(() => { cb(e); });\n              } else {\n                tx.commit(cb);\n              }\n            });\n          }\n        });\n      } else {\n        // We're good.\n        tx.commit(cb);\n      }\n    });\n  }\n\n  /**\n   * Helper function for findINode.\n   * @param parent The parent directory of the file we are attempting to find.\n   * @param filename The filename of the inode we are attempting to find, minus\n   *   the parent.\n   * @param cb Passed an error or the ID of the file's inode in the file system.\n   */\n  private _findINode(tx: AsyncKeyValueROTransaction, parent: string, filename: string, cb: BFSCallback<string>): void {\n    if (this._cache) {\n      const id = this._cache.get(path.join(parent, filename));\n      if (id) {\n        return cb(null, id);\n      }\n    }\n    const handleDirectoryListings = (e?: ApiError | null, inode?: Inode, dirList?: {[name: string]: string}): void => {\n      if (e) {\n        cb(e);\n      } else if (dirList![filename]) {\n        const id = dirList![filename];\n        if (this._cache) {\n          this._cache.set(path.join(parent, filename), id);\n        }\n        cb(null, id);\n      } else {\n        cb(ApiError.ENOENT(path.resolve(parent, filename)));\n      }\n    };\n\n    if (parent === '/') {\n      if (filename === '') {\n        // BASE CASE #1: Return the root's ID.\n        if (this._cache) {\n          this._cache.set(path.join(parent, filename), ROOT_NODE_ID);\n        }\n        cb(null, ROOT_NODE_ID);\n      } else {\n        // BASE CASE #2: Find the item in the root node.\n        this.getINode(tx, parent, ROOT_NODE_ID, (e: ApiError, inode?: Inode): void => {\n          if (noError(e, cb)) {\n            this.getDirListing(tx, parent, inode!, (e: ApiError, dirList?: {[name: string]: string}): void => {\n              // handle_directory_listings will handle e for us.\n              handleDirectoryListings(e, inode, dirList);\n            });\n          }\n        });\n      }\n    } else {\n      // Get the parent directory's INode, and find the file in its directory\n      // listing.\n      this.findINodeAndDirListing(tx, parent, handleDirectoryListings);\n    }\n  }\n\n  /**\n   * Finds the Inode of the given path.\n   * @param p The path to look up.\n   * @param cb Passed an error or the Inode of the path p.\n   * @todo memoize/cache\n   */\n  private findINode(tx: AsyncKeyValueROTransaction, p: string, cb: BFSCallback<Inode>): void {\n    this._findINode(tx, path.dirname(p), path.basename(p), (e: ApiError, id?: string): void => {\n      if (noError(e, cb)) {\n        this.getINode(tx, p, id!, cb);\n      }\n    });\n  }\n\n  /**\n   * Given the ID of a node, retrieves the corresponding Inode.\n   * @param tx The transaction to use.\n   * @param p The corresponding path to the file (used for error messages).\n   * @param id The ID to look up.\n   * @param cb Passed an error or the inode under the given id.\n   */\n  private getINode(tx: AsyncKeyValueROTransaction, p: string, id: string, cb: BFSCallback<Inode>): void {\n    tx.get(id, (e: ApiError, data?: Buffer): void => {\n      if (noError(e, cb)) {\n        if (data === undefined) {\n          cb(ApiError.ENOENT(p));\n        } else {\n          cb(null, Inode.fromBuffer(data));\n        }\n      }\n    });\n  }\n\n  /**\n   * Given the Inode of a directory, retrieves the corresponding directory\n   * listing.\n   */\n  private getDirListing(tx: AsyncKeyValueROTransaction, p: string, inode: Inode, cb: BFSCallback<{ [fileName: string]: string }>): void {\n    if (!inode.isDirectory()) {\n      cb(ApiError.ENOTDIR(p));\n    } else {\n      tx.get(inode.id, (e: ApiError, data?: Buffer): void => {\n        if (noError(e, cb)) {\n          try {\n            cb(null, JSON.parse(data!.toString()));\n          } catch (e) {\n            // Occurs when data is undefined, or corresponds to something other\n            // than a directory listing. The latter should never occur unless\n            // the file system is corrupted.\n            cb(ApiError.ENOENT(p));\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Given a path to a directory, retrieves the corresponding INode and\n   * directory listing.\n   */\n  private findINodeAndDirListing(tx: AsyncKeyValueROTransaction, p: string, cb: BFSThreeArgCallback<Inode, { [fileName: string]: string }>): void {\n    this.findINode(tx, p, (e: ApiError, inode?: Inode): void => {\n      if (noError(e, cb)) {\n        this.getDirListing(tx, p, inode!, (e, listing?) => {\n          if (noError(e, cb)) {\n            cb(null, inode!, listing!);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Adds a new node under a random ID. Retries 5 times before giving up in\n   * the exceedingly unlikely chance that we try to reuse a random GUID.\n   * @param cb Passed an error or the GUID that the data was stored under.\n   */\n  private addNewNode(tx: AsyncKeyValueRWTransaction, data: Buffer, cb: BFSCallback<string>): void {\n    let retries = 0, currId: string;\n    const reroll = () => {\n      if (++retries === 5) {\n        // Max retries hit. Return with an error.\n        cb(new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.'));\n      } else {\n        // Try again.\n        currId = GenerateRandomID();\n        tx.put(currId, data, false, (e: ApiError, committed?: boolean) => {\n          if (e || !committed) {\n            reroll();\n          } else {\n            // Successfully stored under 'currId'.\n            cb(null, currId);\n          }\n        });\n      }\n    };\n    reroll();\n  }\n\n  /**\n   * Commits a new file (well, a FILE or a DIRECTORY) to the file system with\n   * the given mode.\n   * Note: This will commit the transaction.\n   * @param p The path to the new file.\n   * @param type The type of the new file.\n   * @param mode The mode to create the new file with.\n   * @param data The data to store at the file's data node.\n   * @param cb Passed an error or the Inode for the new file.\n   */\n  private commitNewFile(tx: AsyncKeyValueRWTransaction, p: string, type: FileType, mode: number, data: Buffer, cb: BFSCallback<Inode>): void {\n    const parentDir = path.dirname(p),\n      fname = path.basename(p),\n      currTime = (new Date()).getTime();\n\n    // Invariant: The root always exists.\n    // If we don't check this prior to taking steps below, we will create a\n    // file with name '' in root should p == '/'.\n    if (p === '/') {\n      return cb(ApiError.EEXIST(p));\n    }\n\n    // Let's build a pyramid of code!\n\n    // Step 1: Get the parent directory's inode and directory listing\n    this.findINodeAndDirListing(tx, parentDir, (e?: ApiError | null, parentNode?: Inode, dirListing?: {[name: string]: string}): void => {\n      if (noErrorTx(e, tx, cb)) {\n        if (dirListing![fname]) {\n          // File already exists.\n          tx.abort(() => {\n            cb(ApiError.EEXIST(p));\n          });\n        } else {\n          // Step 2: Commit data to store.\n          this.addNewNode(tx, data, (e: ApiError, dataId?: string): void => {\n            if (noErrorTx(e, tx, cb)) {\n              // Step 3: Commit the file's inode to the store.\n              const fileInode = new Inode(dataId!, data.length, mode | type, currTime, currTime, currTime);\n              this.addNewNode(tx, fileInode.toBuffer(), (e: ApiError, fileInodeId?: string): void => {\n                if (noErrorTx(e, tx, cb)) {\n                  // Step 4: Update parent directory's listing.\n                  dirListing![fname] = fileInodeId!;\n                  tx.put(parentNode!.id, Buffer.from(JSON.stringify(dirListing)), true, (e: ApiError): void => {\n                    if (noErrorTx(e, tx, cb)) {\n                      // Step 5: Commit and return the new inode.\n                      tx.commit((e?: ApiError): void => {\n                        if (noErrorTx(e, tx, cb)) {\n                          cb(null, fileInode);\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Remove all traces of the given path from the file system.\n   * @param p The path to remove from the file system.\n   * @param isDir Does the path belong to a directory, or a file?\n   * @todo Update mtime.\n   */\n  private removeEntry(p: string, isDir: boolean, cb: BFSOneArgCallback): void {\n    // Eagerly delete from cache (harmless even if removal fails)\n    if (this._cache) {\n      this._cache.remove(p);\n    }\n    const tx = this.store.beginTransaction('readwrite'),\n      parent: string = path.dirname(p), fileName: string = path.basename(p);\n    // Step 1: Get parent directory's node and directory listing.\n    this.findINodeAndDirListing(tx, parent, (e?: ApiError | null, parentNode?: Inode, parentListing?: {[name: string]: string}): void => {\n      if (noErrorTx(e, tx, cb)) {\n        if (!parentListing![fileName]) {\n          tx.abort(() => {\n            cb(ApiError.ENOENT(p));\n          });\n        } else {\n          // Remove from directory listing of parent.\n          const fileNodeId = parentListing![fileName];\n          delete parentListing![fileName];\n          // Step 2: Get file inode.\n          this.getINode(tx, p, fileNodeId, (e: ApiError, fileNode?: Inode): void => {\n            if (noErrorTx(e, tx, cb)) {\n              if (!isDir && fileNode!.isDirectory()) {\n                tx.abort(() => {\n                  cb(ApiError.EISDIR(p));\n                });\n              } else if (isDir && !fileNode!.isDirectory()) {\n                tx.abort(() => {\n                  cb(ApiError.ENOTDIR(p));\n                });\n              } else {\n                // Step 3: Delete data.\n                tx.del(fileNode!.id, (e?: ApiError): void => {\n                  if (noErrorTx(e, tx, cb)) {\n                    // Step 4: Delete node.\n                    tx.del(fileNodeId, (e?: ApiError): void => {\n                      if (noErrorTx(e, tx, cb)) {\n                        // Step 5: Update directory listing.\n                        tx.put(parentNode!.id, Buffer.from(JSON.stringify(parentListing)), true, (e: ApiError): void => {\n                          if (noErrorTx(e, tx, cb)) {\n                            tx.commit(cb);\n                          }\n                        });\n                      }\n                    });\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n}\n"]}