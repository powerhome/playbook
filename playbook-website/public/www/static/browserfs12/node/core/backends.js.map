{"version":3,"file":"backends.js","sourceRoot":"","sources":["../../../src/core/backends.ts"],"names":[],"mappings":";;AAAA,sDAAiD;AACjD,oEAA+D;AAC/D,sEAAiE;AACjE,wCAAwC;AACxC,0DAAqD;AACrD,oEAA+D;AAC/D,4CAA4C;AAC5C,kDAAkD;AAClD,0DAAqD;AACrD,sDAAiD;AACjD,kDAA6C;AAC7C,4CAA4C;AAC5C,gDAA2C;AAC3C,wDAAmD;AACnD,sEAAiE;AACjE,kDAA6C;AAC7C,wDAAmD;AACnD,8DAAyD;AACzD,sDAAiD;AACjD,gDAA2C;AAC3C,0CAAqC;AAGrC,+BAAoC;AAEpC,sFAAsF;AACtF,CAAC,qBAAW,EAAE,kBAAQ,EAAE,mBAAS,EAAE,uBAAa,EAAE,mBAAS,EAAE,sBAAY,EAAE,6BAAmB,EAAE,kBAAQ,EAAE,4BAAkB,EAAE,qBAAW,EAAE,sBAAY,EAAE,yBAAe,EAAE,eAAK,EAAE,uBAAa,EAAE,6BAAmB,EAAE,qBAAW,EAAE,4BAAkB,CAAC,CAAC,OAAO,CAAC,UAAC,MAA6B;IAC1R,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,MAAM,CAAC,MAAM,GAAG,UAAS,IAAU,EAAE,EAA4B;QAC/D,IAAM,MAAM,GAAG,OAAM,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC;QAC3C,IAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACxC,IAAM,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QAE1C,SAAS,SAAS,CAAC,CAAY;YAC7B,IAAI,CAAC,EAAE;gBACL,YAAY,CAAC,CAAC,CAAC,CAAC;aACjB;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;aACnD;QACH,CAAC;QAED,IAAA,mBAAY,EAAC,MAAM,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IAClD,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH;;GAEG;AACH,IAAM,QAAQ,GAAG,EAAE,WAAW,uBAAA,EAAE,aAAa,yBAAA,EAAE,QAAQ,oBAAA,EAAE,SAAS,qBAAA,EAAE,SAAS,qBAAA,EAAE,YAAY,wBAAA,EAAE,mBAAmB,+BAAA,EAAE,QAAQ,oBAAA,EAAE,kBAAkB,8BAAA,EAAE,WAAW,uBAAA,EAAE,YAAY,wBAAA,EAAE,eAAe,2BAAA,EAAE,cAAc,EAAE,qBAAW,EAAE,KAAK,iBAAA,EAAE,aAAa,yBAAA,EAAE,mBAAmB,+BAAA,EAAE,WAAW,uBAAA,EAAE,kBAAkB,8BAAA,EAAC,CAAC;AACrS,2EAA2E;AAC3E,IAAM,CAAC,GAA4C,QAAQ,CAAC;AAC5D,gDAAgD;AAChD,CAAC,CAAC,CAAC,4CAA4C;AAE/C,kBAAe,QAAQ,CAAC","sourcesContent":["import AsyncMirror from '../backend/AsyncMirror';\nimport BundledHTTPRequest from '../backend/BundledHTTPRequest';\nimport CodeSandboxEditorFS from '../backend/CodeSandboxEditorFS';\n// import IsoFS from '../backend/IsoFS';\nimport CodeSandboxFS from '../backend/CodeSandboxFS';\nimport DynamicHTTPRequest from '../backend/DynamicHTTPRequest';\n// import Dropbox from '../backend/Dropbox';\n// import Emscripten from '../backend/Emscripten';\nimport FolderAdapter from '../backend/FolderAdapter';\nimport HTTPRequest from '../backend/HTTPRequest';\nimport IndexedDB from '../backend/IndexedDB';\n// import HTML5FS from '../backend/HTML5FS';\nimport InMemory from '../backend/InMemory';\nimport LocalStorage from '../backend/LocalStorage';\nimport MountableFileSystem from '../backend/MountableFileSystem';\nimport OverlayFS from '../backend/OverlayFS';\nimport UNPKGRequest from '../backend/UNPKGRequest';\nimport JSDelivrRequest from '../backend/JSDelivrRequest';\nimport WebsocketFS from '../backend/WebsocketFS';\nimport WorkerFS from '../backend/WorkerFS';\nimport ZipFS from '../backend/ZipFS';\nimport {ApiError} from './api_error';\nimport {BFSCallback, FileSystem, FileSystemConstructor} from './file_system';\nimport {checkOptions} from './util';\n\n// Monkey-patch `Create` functions to check options before file system initialization.\n[AsyncMirror, InMemory, IndexedDB, FolderAdapter, OverlayFS, LocalStorage, MountableFileSystem, WorkerFS, BundledHTTPRequest, HTTPRequest, UNPKGRequest, JSDelivrRequest, ZipFS, CodeSandboxFS, CodeSandboxEditorFS, WebsocketFS, DynamicHTTPRequest].forEach((fsType: FileSystemConstructor) => {\n  const create = fsType.Create;\n  fsType.Create = function(opts?: any, cb?: BFSCallback<FileSystem>): void {\n    const oneArg = typeof(opts) === 'function';\n    const normalizedCb = oneArg ? opts : cb;\n    const normalizedOpts = oneArg ? {} : opts;\n\n    function wrappedCb(e?: ApiError): void {\n      if (e) {\n        normalizedCb(e);\n      } else {\n        create.call(fsType, normalizedOpts, normalizedCb);\n      }\n    }\n\n    checkOptions(fsType, normalizedOpts, wrappedCb);\n  };\n});\n\n/**\n * @hidden\n */\nconst Backends = { AsyncMirror, FolderAdapter, InMemory, IndexedDB, OverlayFS, LocalStorage, MountableFileSystem, WorkerFS, BundledHTTPRequest, HTTPRequest, UNPKGRequest, JSDelivrRequest, XmlHttpRequest: HTTPRequest, ZipFS, CodeSandboxFS, CodeSandboxEditorFS, WebsocketFS, DynamicHTTPRequest};\n// Make sure all backends cast to FileSystemConstructor (for type checking)\nconst _: {[name: string]: FileSystemConstructor} = Backends;\n// tslint:disable-next-line:no-unused-expression\n_; // eslint-disable-line no-unused-expressions\n\nexport default Backends;\n"]}