{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../src/core/file.ts"],"names":[],"mappings":";;;AAAA,yCAAgD;AAiIhD;;;GAGG;AACH;IAAA;IA+BA,CAAC;IA9BQ,uBAAI,GAAX,UAAY,EAAqB;QAC/B,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC;IACM,2BAAQ,GAAf;QACE,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACM,2BAAQ,GAAf,UAAgB,EAAqB;QACnC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChB,CAAC;IACM,+BAAY,GAAnB;QACE,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IACM,wBAAK,GAAZ,UAAa,GAAW,EAAE,GAAW,EAAE,EAAqB;QAC1D,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC;IACM,4BAAS,GAAhB,UAAiB,GAAW,EAAE,GAAW;QACvC,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACM,wBAAK,GAAZ,UAAa,IAAY,EAAE,EAAqB;QAC9C,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC;IACM,4BAAS,GAAhB,UAAiB,IAAY;QAC3B,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACM,yBAAM,GAAb,UAAc,KAAW,EAAE,KAAW,EAAE,EAAqB;QAC3D,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC;IACM,6BAAU,GAAjB,UAAkB,KAAW,EAAE,KAAW;QACxC,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACH,eAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,4BAAQ","sourcesContent":["import {ApiError, ErrorCode} from './api_error';\nimport Stats from './node_fs_stats';\nimport {BFSCallback, BFSOneArgCallback, BFSThreeArgCallback} from './file_system';\n\nexport interface File {\n  /**\n   * **Core**: Get the current file position.\n   */\n  getPos(): number | undefined;\n  /**\n   * **Core**: Asynchronous `stat`.\n   */\n  stat(cb: BFSCallback<Stats>): void;\n  /**\n   * **Core**: Synchronous `stat`.\n   */\n  statSync(): Stats;\n  /**\n   * **Core**: Asynchronous close.\n   */\n  close(cb: BFSOneArgCallback): void;\n  /**\n   * **Core**: Synchronous close.\n   */\n  closeSync(): void;\n  /**\n   * **Core**: Asynchronous truncate.\n   */\n  truncate(len: number, cb: BFSOneArgCallback): void;\n  /**\n   * **Core**: Synchronous truncate.\n   */\n  truncateSync(len: number): void;\n  /**\n   * **Core**: Asynchronous sync.\n   */\n  sync(cb: BFSOneArgCallback): void;\n  /**\n   * **Core**: Synchronous sync.\n   */\n  syncSync(): void;\n  /**\n   * **Core**: Write buffer to the file.\n   * Note that it is unsafe to use fs.write multiple times on the same file\n   * without waiting for the callback.\n   * @param buffer Buffer containing the data to write to\n   *  the file.\n   * @param offset Offset in the buffer to start reading data from.\n   * @param length The amount of bytes to write to the file.\n   * @param position Offset from the beginning of the file where this\n   *   data should be written. If position is null, the data will be written at\n   *   the current position.\n   * @param cb The number specifies the number of bytes written into the file.\n   */\n  write(buffer: Buffer, offset: number, length: number, position: number | null, cb: BFSThreeArgCallback<number, Buffer>): void;\n  /**\n   * **Core**: Write buffer to the file.\n   * Note that it is unsafe to use fs.writeSync multiple times on the same file\n   * without waiting for it to return.\n   * @param buffer Buffer containing the data to write to\n   *  the file.\n   * @param offset Offset in the buffer to start reading data from.\n   * @param length The amount of bytes to write to the file.\n   * @param position Offset from the beginning of the file where this\n   *   data should be written. If position is null, the data will be written at\n   *   the current position.\n   */\n  writeSync(buffer: Buffer, offset: number, length: number, position: number | null): number;\n  /**\n   * **Core**: Read data from the file.\n   * @param buffer The buffer that the data will be\n   *   written to.\n   * @param offset The offset within the buffer where writing will\n   *   start.\n   * @param length An integer specifying the number of bytes to read.\n   * @param position An integer specifying where to begin reading from\n   *   in the file. If position is null, data will be read from the current file\n   *   position.\n   * @param cb The number is the number of bytes read\n   */\n  read(buffer: Buffer, offset: number, length: number, position: number | null, cb: BFSThreeArgCallback<number, Buffer>): void;\n  /**\n   * **Core**: Read data from the file.\n   * @param buffer The buffer that the data will be written to.\n   * @param offset The offset within the buffer where writing will start.\n   * @param length An integer specifying the number of bytes to read.\n   * @param position An integer specifying where to begin reading from\n   *   in the file. If position is null, data will be read from the current file\n   *   position.\n   */\n  readSync(buffer: Buffer, offset: number, length: number, position: number): number;\n  /**\n   * **Supplementary**: Asynchronous `datasync`.\n   *\n   * Default implementation maps to `sync`.\n   */\n  datasync(cb: BFSOneArgCallback): void;\n  /**\n   * **Supplementary**: Synchronous `datasync`.\n   *\n   * Default implementation maps to `syncSync`.\n   */\n  datasyncSync(): void;\n  /**\n   * **Optional**: Asynchronous `chown`.\n   */\n  chown(uid: number, gid: number, cb: BFSOneArgCallback): void;\n  /**\n   * **Optional**: Synchronous `chown`.\n   */\n  chownSync(uid: number, gid: number): void;\n  /**\n   * **Optional**: Asynchronous `fchmod`.\n   */\n  chmod(mode: number, cb: BFSOneArgCallback): void;\n  /**\n   * **Optional**: Synchronous `fchmod`.\n   */\n  chmodSync(mode: number): void;\n  /**\n   * **Optional**: Change the file timestamps of the file.\n   */\n  utimes(atime: Date, mtime: Date, cb: BFSOneArgCallback): void;\n  /**\n   * **Optional**: Change the file timestamps of the file.\n   */\n  utimesSync(atime: Date, mtime: Date): void;\n}\n\n/**\n * Base class that contains shared implementations of functions for the file\n * object.\n */\nexport class BaseFile {\n  public sync(cb: BFSOneArgCallback): void {\n    cb(new ApiError(ErrorCode.ENOTSUP));\n  }\n  public syncSync(): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n  public datasync(cb: BFSOneArgCallback): void {\n    this.sync(cb);\n  }\n  public datasyncSync(): void {\n    return this.syncSync();\n  }\n  public chown(uid: number, gid: number, cb: BFSOneArgCallback): void {\n    cb(new ApiError(ErrorCode.ENOTSUP));\n  }\n  public chownSync(uid: number, gid: number): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n  public chmod(mode: number, cb: BFSOneArgCallback): void {\n    cb(new ApiError(ErrorCode.ENOTSUP));\n  }\n  public chmodSync(mode: number): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n  public utimes(atime: Date, mtime: Date, cb: BFSOneArgCallback): void {\n    cb(new ApiError(ErrorCode.ENOTSUP));\n  }\n  public utimesSync(atime: Date, mtime: Date): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n}\n"]}