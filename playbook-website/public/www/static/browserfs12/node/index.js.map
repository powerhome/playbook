{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;AAEH,8CAA8C;AAC9C,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC3B,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,MAAkD;QACnF,OAAO,UAAuB,KAAa,EAAE,MAAe;YAC1D,iEAAiE;YACjE,0BAA0B;YAC1B,IAAI,KAAK,GAAG,CAAC,EAAE;gBACb,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;aAC7B;YACD,6BAA6B;YAC7B,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAC1C,CAAC,CAAC;IACJ,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;CAC5B;AAED,2CAA2C;AAC3C,mDAAmD;AACnD,IAAI,OAAM,CAAC,WAAW,CAAC,KAAK,WAAW,IAAI,OAAM,CAAC,UAAU,CAAC,KAAK,WAAW,EAAE;IAC7E,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;QAClC,UAAU,CAAC,SAAS,CAAC,KAAK,GAAG,UAA2B,KAAiB,EAAE,GAAyB;YAA5C,sBAAA,EAAA,SAAiB;YAAE,oBAAA,EAAA,MAAc,IAAI,CAAC,MAAM;YAClG,IAAM,IAAI,GAAe,IAAI,CAAC;YAC9B,IAAI,KAAK,GAAG,CAAC,EAAE;gBACb,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBAC5B,IAAI,KAAK,GAAG,CAAC,EAAE;oBACb,KAAK,GAAG,CAAC,CAAC;iBACX;aACF;YACD,IAAI,GAAG,GAAG,CAAC,EAAE;gBACX,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;gBACxB,IAAI,GAAG,GAAG,CAAC,EAAE;oBACX,GAAG,GAAG,CAAC,CAAC;iBACT;aACF;YACD,IAAI,GAAG,GAAG,KAAK,EAAE;gBACf,GAAG,GAAG,KAAK,CAAC;aACb;YACD,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,GAAG,KAAK,EAAE,GAAG,GAAG,KAAK,CAAC,CAAC;QAC3E,CAAC,CAAC;KACH;CACF;AAED,mDAAiC","sourcesContent":["/**\n * BrowserFS's main entry point.\n * It installs all of the needed polyfills, and requires() the main module.\n */\n\n// IE substr does not support negative indices\nif ('ab'.substr(-1) !== 'b') {\n  String.prototype.substr = function(substr: (start: number, length?: number) => string) {\n    return function(this: string, start: number, length?: number): string {\n      // did we get a negative start, calculate how much it is from the\n      // beginning of the string\n      if (start < 0) {\n        start = this.length + start;\n      }\n      // call the original function\n      return substr.call(this, start, length);\n    };\n  }(String.prototype.substr);\n}\n\n// Polyfill for Uint8Array.prototype.slice.\n// Safari and some other browsers do not define it.\nif (typeof(ArrayBuffer) !== 'undefined' && typeof(Uint8Array) !== 'undefined') {\n  if (!Uint8Array.prototype['slice']) {\n    Uint8Array.prototype.slice = function(this: Uint8Array, start: number = 0, end: number = this.length): Uint8Array {\n      const self: Uint8Array = this;\n      if (start < 0) {\n        start = this.length + start;\n        if (start < 0) {\n          start = 0;\n        }\n      }\n      if (end < 0) {\n        end = this.length + end;\n        if (end < 0) {\n          end = 0;\n        }\n      }\n      if (end < start) {\n        end = start;\n      }\n      return new Uint8Array(self.buffer, self.byteOffset + start, end - start);\n    };\n  }\n}\n\nexport * from './core/browserfs';\n"]}