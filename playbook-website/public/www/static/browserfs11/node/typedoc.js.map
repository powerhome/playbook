{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../src/typedoc.ts"],"names":[],"mappings":"","sourcesContent":["import {FileSystem} from './core/file_system';\n\n/**\n * We use typedoc in 'file' mode to avoid many issues.\n * Unfortunately, it does not process export statements properly in some circumstances.\n * Here, we redefine the main BrowserFS object for documentation purposes.\n */\n\nimport {FileSystem as Backends, BFSRequire} from './index';\n\n/**\n * BrowserFS's main interface.\n *\n * In the browser, this is exposed as the `BrowserFS` global.\n *\n * In node, this is the object you receive when you `require('browserfs')`.\n */\nexport interface BrowserFS {\n  /**\n   * Exposes all of the file system backends available in BrowserFS.\n   */\n  FileSystem: typeof Backends;\n  /**\n   * Emulates Node's `require()` function for filesystem-related modules (`'fs'`, `'path'`, `'buffer'`, etc).\n   */\n  BFSRequire: typeof BFSRequire;\n  /**\n   * You must call this function with a properly-instantiated root file system\n   * before using any file system API method.\n   * @param rootFS The root filesystem to use for the\n   *   entire BrowserFS file system.\n   */\n  initialize(rootFS: FileSystem): void;\n  /**\n   * Installs BrowserFS onto the given object.\n   * We recommend that you run install with the 'window' object to make things\n   * global, as in Node.\n   *\n   * Properties installed:\n   *\n   * * Buffer\n   * * process\n   * * require (we monkey-patch it)\n   *\n   * This allows you to write code as if you were running inside Node.\n   * @param obj The object to install things onto (e.g. window)\n   */\n  install(obj: any): void;\n}\n"]}