{"version":3,"file":"DynamicHTTPRequest.js","sourceRoot":"","sources":["../../../src/backend/DynamicHTTPRequest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,mDAA+F;AAC/F,+CAAsD;AAEtD,qCAA0C;AAE1C,uDAA0C;AAC1C,wDAAmD;AACnD,sCAAmF;AACnF,0CAAkE;AAElE;;;;;GAKG;AACH,SAAS,WAAW,CAAC,IAAY,EAAE,QAAgB,EAAE,EAAuB;IAC1E,IAAI;QACF,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;KACnC;IAAC,OAAO,CAAC,EAAE;QACV,EAAE,CAAC,CAAC,CAAC,CAAC;KACP;AACH,CAAC;AA6BD,SAAS,qBAAqB;IAC5B,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,OAAO,EAAE,0EAA0E,CAAC,CAAC;AACpH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH;IAAgD,sCAAc;IA+B5D,+DAA+D;IAE/D,4BAAoB,SAAsB,EAAE,SAA0B;QAAlD,0BAAA,EAAA,cAAsB;QAAE,0BAAA,EAAA,iBAA0B;QAAtE,YACE,iBAAO,SAsBR;QArBC,gDAAgD;QAChD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;YAC1E,SAAS,GAAG,SAAS,GAAG,GAAG,CAAC;SAC7B;QACD,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3B,IAAI,wBAAgB,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,oBAAc,CAAC,EAAE;YACvD,KAAI,CAAC,yBAAyB,GAAG,sBAAc,CAAC;YAChD,2DAA2D;SAC5D;aAAM;YACL,KAAI,CAAC,yBAAyB,GAAG,uBAAiB,CAAC;YACnD,yDAAyD;SAC1D;QAED,IAAI,oBAAc,EAAE;YAClB,KAAI,CAAC,wBAAwB,GAAG,sBAAgB,CAAC;YACjD,uDAAuD;SACxD;aAAM;YACL,KAAI,CAAC,wBAAwB,GAAG,qBAAqB,CAAC;YACtD,6DAA6D;SAC9D;;IACH,CAAC;IAxCD;;OAEG;IACW,yBAAM,GAApB,UAAqB,IAA+B,EAAE,EAAmC;QACvF,EAAE,CAAC,IAAI,EAAE,IAAI,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACjD,CAAC;IAEa,8BAAW,GAAzB;QACE,OAAO,oBAAc,IAAI,wBAAgB,CAAC;IAC5C,CAAC;IAiCO,4CAAe,GAAvB,UAAwB,KAAU;QAChC,OAAO,IAAI,oBAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9D,CAAC;IAEM,kCAAK,GAAZ;QACE,mDAAmD;QACnD,0BAA0B;QAC1B,MAAM;IACR,CAAC;IAEM,oCAAO,GAAd;QACE,OAAO,kBAAkB,CAAC,IAAI,CAAC;IACjC,CAAC;IAEM,sCAAS,GAAhB,UAAiB,IAAY,EAAE,EAAyC;QACtE,4EAA4E;QAC5E,uBAAuB;QACvB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACX,CAAC;IAEM,uCAAU,GAAjB;QACE,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,0CAAa,GAApB;QACE,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,0CAAa,GAApB;QACE,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,0CAAa,GAApB;QACE,2EAA2E;QAC3E,OAAO,oBAAc,CAAC;IACxB,CAAC;IAEM,iCAAI,GAAX,UAAY,IAAY,EAAE,OAAgB,EAAE,EAAsB;QAAlE,iBAQC;QAPC,IAAI,CAAC,iBAAiB,CAAC,IAAI,GAAG,OAAO,EAAE,MAAM,EAAE,UAAC,GAAG,EAAE,IAAI;YACvD,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE;gBACrB,EAAE,CAAC,GAAG,IAAI,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aAC7C;iBAAM;gBACL,EAAE,CAAC,IAAI,EAAE,uBAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACrD;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,qCAAQ,GAAf,UAAgB,IAAY,EAAE,OAAgB;QAC5C,IAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,OAAO,EAAE,MAAM,CAAC,CAAC;QAE3D,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxC;QAED,OAAO,uBAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACnD,CAAC;IAEM,iCAAI,GAAX,UAAY,IAAY,EAAE,KAAe,EAAE,IAAY,EAAE,EAAqB;QAA9E,iBAcC;QAbC,2DAA2D;QAC3D,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;YACvB,OAAO,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;SAChD;QACD,IAAM,IAAI,GAAG,IAAI,CAAC;QAElB,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,MAAM,EAAE,UAAC,GAAa,EAAE,IAAS;YAC5D,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE;gBACrB,OAAO,EAAE,CAAC,GAAG,IAAI,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aACpD;YAED,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,yBAAU,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,uBAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1H,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,qCAAQ,GAAf,UAAgB,IAAY,EAAE,KAAe,EAAE,IAAY;QACzD,2DAA2D;QAC3D,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;YACvB,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAC3C;QACD,IAAM,IAAI,GAAG,IAAI,CAAC;QAElB,IAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACjD,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxC;QAED,OAAO,IAAI,yBAAU,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,uBAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAChH,CAAC;IAEM,oCAAO,GAAd,UAAe,IAAY,EAAE,EAAyB;QACpD,IAAI;YACF,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;SAClC;QAAC,OAAO,CAAC,EAAE;YACV,EAAE,CAAC,CAAC,CAAC,CAAC;SACP;IACH,CAAC;IAEM,wCAAW,GAAlB,UAAmB,IAAY;QAC7B,sBAAsB;QACtB,IAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,OAAO,EAAE,MAAM,CAAC,CAAC;QAE3D,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,qCAAQ,GAAf,UAAgB,KAAa,EAAE,QAAgB,EAAE,IAAc,EAAE,EAAgC;QAC/F,gCAAgC;QAChC,IAAM,KAAK,GAAG,EAAE,CAAC;QACjB,YAAY;QACZ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,UAAS,GAAa,EAAE,EAAS;YAC7D,IAAI,GAAG,EAAE;gBACP,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;aAChB;YACD,EAAE,GAAG,UAAS,GAAa,EAAE,GAAY;gBACvC,EAAG,CAAC,KAAK,CAAC,UAAS,IAAS;oBAC1B,IAAI,CAAC,GAAG,EAAE;wBACR,GAAG,GAAG,IAAI,CAAC;qBACZ;oBACD,OAAO,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBACzB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YACF,IAAM,MAAM,GAAoC,EAAE,CAAC;YACnD,IAAM,MAAM,GAAY,MAAM,CAAC,SAAS,EAAE,CAAC;YAC3C,IAAI,QAAQ,KAAK,IAAI,EAAE;gBACrB,EAAE,CAAC,GAAG,EAAE,IAAA,mBAAY,EAAC,MAAM,CAAC,CAAC,CAAC;aAC/B;iBAAM;gBACL,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;aACnC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,yCAAY,GAAnB,UAAoB,KAAa,EAAE,QAAgB,EAAE,IAAc;QACjE,YAAY;QACZ,IAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC7C,IAAI;YACF,IAAM,MAAM,GAAoC,EAAE,CAAC;YACnD,IAAM,MAAM,GAAY,MAAM,CAAC,SAAS,EAAE,CAAC;YAC3C,IAAI,QAAQ,KAAK,IAAI,EAAE;gBACrB,OAAO,IAAA,mBAAY,EAAC,MAAM,CAAC,CAAC;aAC7B;YACD,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SAClC;gBAAS;YACR,EAAE,CAAC,SAAS,EAAE,CAAC;SAChB;IACH,CAAC;IAEO,yCAAY,GAApB,UAAqB,QAAgB;QACnC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC9B,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IACnC,CAAC;IAQO,8CAAiB,GAAzB,UAA0B,CAAS,EAAE,IAAY,EAAE,EAAoB;QACrE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC;IAQO,6CAAgB,GAAxB,UAAyB,CAAS,EAAE,IAAY;QAC9C,OAAO,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IA5OsB,uBAAI,GAAG,oBAAoB,CAAC;IAE5B,0BAAO,GAAsB;QAClD,OAAO,EAAE;YACP,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,IAAI;YACd,WAAW,EAAE,uFAAuF;SACrG;QACD,SAAS,EAAE;YACT,IAAI,EAAE,SAAS;YACf,QAAQ,EAAE,IAAI;YACd,WAAW,EAAE,sGAAsG;SACpH;KACF,CAAC;IA2OJ,yBAAC;CAAA,AAzPD,CAAgD,4BAAc,GAyP7D;kBAzPoB,kBAAkB","sourcesContent":["import {BaseFileSystem, FileSystem, BFSCallback, FileSystemOptions} from '../core/file_system';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport {FileFlag} from '../core/file_flag';\nimport {copyingSlice} from '../core/util';\nimport {File} from '../core/file';\nimport Stats from '../core/node_fs_stats';\nimport {NoSyncFile} from '../generic/preload_file';\nimport {xhrIsAvailable, asyncDownloadFile, syncDownloadFile} from '../generic/xhr';\nimport {fetchIsAvailable, fetchFileAsync} from '../generic/fetch';\n\n/**\n * Try to convert the given buffer into a string, and pass it to the callback.\n * Optimization that removes the needed try/catch into a helper function, as\n * this is an uncommon case.\n * @hidden\n */\nfunction tryToString(buff: Buffer, encoding: string, cb: BFSCallback<string>) {\n  try {\n    cb(null, buff.toString(encoding));\n  } catch (e) {\n    cb(e);\n  }\n}\n\n/**\n * Configuration options for a DynamicHTTPRequest file system.\n */\nexport interface DynamicHTTPRequestOptions {\n  // URL to a file index as a JSON file or the file index object itself, generated with the make_http_index script.\n  // Defaults to `index.json`.\n  index?: string | object;\n  // Used as the URL prefix for fetched files.\n  // Default: Fetch files relative to the index.\n  baseUrl?: string;\n  // Whether to prefer XmlHttpRequest or fetch for async operations if both are available.\n  // Default: false\n  preferXHR?: boolean;\n}\n\ninterface AsyncDownloadFileMethod {\n  (p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\n  (p: string, type: 'json', cb: BFSCallback<any>): void;\n  (p: string, type: string, cb: BFSCallback<any>): void;\n}\n\ninterface SyncDownloadFileMethod {\n  (p: string, type: 'buffer'): Buffer;\n  (p: string, type: 'json'): any;\n  (p: string, type: string): any;\n}\n\nfunction syncNotAvailableError(): never {\n  throw new ApiError(ErrorCode.ENOTSUP, `Synchronous HTTP download methods are not available in this environment.`);\n}\n\n/**\n * A simple filesystem backed by HTTP downloads. You must create a directory listing using the\n * `make_http_index` tool provided by BrowserFS.\n *\n * If you install BrowserFS globally with `npm i -g browserfs`, you can generate a listing by\n * running `make_http_index` in your terminal in the directory you would like to index:\n *\n * ```\n * make_http_index > index.json\n * ```\n *\n * Listings objects look like the following:\n *\n * ```json\n * {\n *   \"home\": {\n *     \"jvilk\": {\n *       \"someFile.txt\": null,\n *       \"someDir\": {\n *         // Empty directory\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * *This example has the folder `/home/jvilk` with subfile `someFile.txt` and subfolder `someDir`.*\n */\nexport default class DynamicHTTPRequest extends BaseFileSystem implements FileSystem {\n  public static readonly Name = \"DynamicHTTPRequest\";\n\n  public static readonly Options: FileSystemOptions = {\n    baseUrl: {\n      type: \"string\",\n      optional: true,\n      description: \"Used as the URL prefix for fetched files. Default: Fetch files relative to the index.\"\n    },\n    preferXHR: {\n      type: \"boolean\",\n      optional: true,\n      description: \"Whether to prefer XmlHttpRequest or fetch for async operations if both are available. Default: false\"\n    }\n  };\n\n  /**\n   * Construct an DynamicHTTPRequest file system backend with the given options.\n   */\n  public static Create(opts: DynamicHTTPRequestOptions, cb: BFSCallback<DynamicHTTPRequest>): void {\n    cb(null, new DynamicHTTPRequest(opts.baseUrl));\n  }\n\n  public static isAvailable(): boolean {\n    return xhrIsAvailable || fetchIsAvailable;\n  }\n\n  public readonly prefixUrl: string;\n  private _requestFileAsyncInternal: AsyncDownloadFileMethod;\n  // private _requestFileSizeAsyncInternal: (p: string, cb: BFSCallback<number>) => void;\n  private _requestFileSyncInternal: SyncDownloadFileMethod;\n  // private _requestFileSizeSyncInternal: (p: string) => number;\n\n  private constructor(prefixUrl: string = '', preferXHR: boolean = false) {\n    super();\n    // prefix_url must end in a directory separator.\n    if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {\n      prefixUrl = prefixUrl + '/';\n    }\n    this.prefixUrl = prefixUrl;\n\n    if (fetchIsAvailable && (!preferXHR || !xhrIsAvailable)) {\n      this._requestFileAsyncInternal = fetchFileAsync;\n      // this._requestFileSizeAsyncInternal = fetchFileSizeAsync;\n    } else {\n      this._requestFileAsyncInternal = asyncDownloadFile;\n      // this._requestFileSizeAsyncInternal = getFileSizeAsync;\n    }\n\n    if (xhrIsAvailable) {\n      this._requestFileSyncInternal = syncDownloadFile;\n      // this._requestFileSizeSyncInternal = getFileSizeSync;\n    } else {\n      this._requestFileSyncInternal = syncNotAvailableError;\n      // this._requestFileSizeSyncInternal = syncNotAvailableError;\n    }\n  }\n\n  private convertAPIError(error: any) {\n    return new ApiError(error.errno, error.message, error.path);\n  }\n\n  public empty(): void {\n    // this._index.fileIterator(function(file: Stats) {\n    //   file.fileData = null;\n    // });\n  }\n\n  public getName(): string {\n    return DynamicHTTPRequest.Name;\n  }\n\n  public diskSpace(path: string, cb: (total: number, free: number) => void): void {\n    // Read-only file system. We could calculate the total space, but that's not\n    // important right now.\n    cb(0, 0);\n  }\n\n  public isReadOnly(): boolean {\n    return true;\n  }\n\n  public supportsLinks(): boolean {\n    return false;\n  }\n\n  public supportsProps(): boolean {\n    return false;\n  }\n\n  public supportsSynch(): boolean {\n    // Synchronous operations are only available via the XHR interface for now.\n    return xhrIsAvailable;\n  }\n\n  public stat(path: string, isLstat: boolean, cb: BFSCallback<Stats>): void {\n    this._requestFileAsync(path + '?stat', 'json', (err, data) => {\n      if (err || data.error) {\n        cb(err || this.convertAPIError(data.error));\n      } else {\n        cb(null, Stats.fromBuffer(Buffer.from(data.stats)));\n      }\n    });\n  }\n\n  public statSync(path: string, isLstat: boolean): Stats {\n    const data = this._requestFileSync(path + '?stat', 'json');\n\n    if (data.error) {\n      throw this.convertAPIError(data.error);\n    }\n\n    return Stats.fromBuffer(Buffer.from(data.stats));\n  }\n\n  public open(path: string, flags: FileFlag, mode: number, cb: BFSCallback<File>): void {\n    // INVARIANT: You can't write to files on this file system.\n    if (flags.isWriteable()) {\n      return cb(new ApiError(ErrorCode.EPERM, path));\n    }\n    const self = this;\n\n    this._requestFileAsync(path, 'json', (err: ApiError, data: any) => {\n      if (err || data.error) {\n        return cb(err || this.convertAPIError(data.error));\n      }\n\n      return cb(null, new NoSyncFile(self, path, flags, Stats.fromBuffer(Buffer.from(data.stats)), Buffer.from(data.result)));\n    });\n  }\n\n  public openSync(path: string, flags: FileFlag, mode: number): File {\n    // INVARIANT: You can't write to files on this file system.\n    if (flags.isWriteable()) {\n      throw new ApiError(ErrorCode.EPERM, path);\n    }\n    const self = this;\n\n    const data = this._requestFileSync(path, 'json');\n    if (data.error) {\n      throw this.convertAPIError(data.error);\n    }\n\n    return new NoSyncFile(self, path, flags, Stats.fromBuffer(Buffer.from(data.stats)), Buffer.from(data.result));\n  }\n\n  public readdir(path: string, cb: BFSCallback<string[]>): void {\n    try {\n      cb(null, this.readdirSync(path));\n    } catch (e) {\n      cb(e);\n    }\n  }\n\n  public readdirSync(path: string): string[] {\n    // Check if it exists.\n    const data = this._requestFileSync(path + '?meta', 'json');\n\n    if (data.error) {\n      throw this.convertAPIError(data.error);\n    }\n\n    return data.result;\n  }\n\n  /**\n   * We have the entire file as a buffer; optimize readFile.\n   */\n  public readFile(fname: string, encoding: string, flag: FileFlag, cb: BFSCallback<string | Buffer>): void {\n    // Wrap cb in file closing code.\n    const oldCb = cb;\n    // Get file.\n    this.open(fname, flag, 0x1a4, function(err: ApiError, fd?: File) {\n      if (err) {\n        return cb(err);\n      }\n      cb = function(err: ApiError, arg?: Buffer) {\n        fd!.close(function(err2: any) {\n          if (!err) {\n            err = err2;\n          }\n          return oldCb(err, arg);\n        });\n      };\n      const fdCast = <NoSyncFile<DynamicHTTPRequest>> fd;\n      const fdBuff = <Buffer> fdCast.getBuffer();\n      if (encoding === null) {\n        cb(err, copyingSlice(fdBuff));\n      } else {\n        tryToString(fdBuff, encoding, cb);\n      }\n    });\n  }\n\n  /**\n   * Specially-optimized readfile.\n   */\n  public readFileSync(fname: string, encoding: string, flag: FileFlag): any {\n    // Get file.\n    const fd = this.openSync(fname, flag, 0x1a4);\n    try {\n      const fdCast = <NoSyncFile<DynamicHTTPRequest>> fd;\n      const fdBuff = <Buffer> fdCast.getBuffer();\n      if (encoding === null) {\n        return copyingSlice(fdBuff);\n      }\n      return fdBuff.toString(encoding);\n    } finally {\n      fd.closeSync();\n    }\n  }\n\n  private _getHTTPPath(filePath: string): string {\n    if (filePath.charAt(0) === '/') {\n      filePath = filePath.slice(1);\n    }\n    return this.prefixUrl + filePath;\n  }\n\n  /**\n   * Asynchronously download the given file.\n   */\n  private _requestFileAsync(p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\n  private _requestFileAsync(p: string, type: 'json', cb: BFSCallback<any>): void;\n  private _requestFileAsync(p: string, type: string, cb: BFSCallback<any>): void;\n  private _requestFileAsync(p: string, type: string, cb: BFSCallback<any>): void {\n    this._requestFileAsyncInternal(this._getHTTPPath(p), type, cb);\n  }\n\n  /**\n   * Synchronously download the given file.\n   */\n  private _requestFileSync(p: string, type: 'buffer'): Buffer;\n  private _requestFileSync(p: string, type: 'json'): any;\n  private _requestFileSync(p: string, type: string): any;\n  private _requestFileSync(p: string, type: string): any {\n    return this._requestFileSyncInternal(this._getHTTPPath(p), type);\n  }\n\n  // /**\n  //  * Only requests the HEAD content, for the file size.\n  //  */\n  // private _requestFileSizeAsync(path: string, cb: BFSCallback<number>): void {\n  //   this._requestFileSizeAsyncInternal(this._getHTTPPath(path), cb);\n  // }\n\n  // private _requestFileSizeSync(path: string): number {\n  //   return this._requestFileSizeSyncInternal(this._getHTTPPath(path));\n  // }\n}\n"]}