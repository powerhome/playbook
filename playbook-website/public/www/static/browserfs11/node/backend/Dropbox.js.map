{"version":3,"file":"Dropbox.js","sourceRoot":"","sources":["../../../src/backend/Dropbox.ts"],"names":[],"mappings":"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","sourcesContent":["import PreloadFile from '../generic/preload_file';\nimport {BaseFileSystem, FileSystem, BFSOneArgCallback, BFSCallback, FileSystemOptions} from '../core/file_system';\nimport {FileFlag} from '../core/file_flag';\nimport {default as Stats, FileType} from '../core/node_fs_stats';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport {File} from '../core/file';\nimport {arrayBuffer2Buffer, buffer2ArrayBuffer} from '../core/util';\nimport {Dropbox} from 'dropbox_bridge';\nimport setImmediate from '../generic/setImmediate';\nimport {dirname} from 'path';\ntype DropboxClient = DropboxTypes.Dropbox;\n\n/**\n * Dropbox paths do not begin with a /, they just begin with a folder at the root node.\n * Here, we strip the `/`.\n * @param p An absolute path\n */\nfunction FixPath(p: string): string {\n  if (p === '/') {\n    return '';\n  } else {\n    return p;\n  }\n}\n\n/**\n * HACK: Dropbox errors are FUBAR'd sometimes.\n * @url https://github.com/dropbox/dropbox-sdk-js/issues/146\n * @param e\n */\nfunction ExtractTheFuckingError<T>(e: DropboxTypes.Error<T>): T {\n  const obj = <any> e.error;\n  if (obj['.tag']) {\n    // Everything is OK.\n    return obj;\n  } else if (obj['error']) {\n    // Terrible nested object bug.\n    const obj2 = obj.error;\n    if (obj2['.tag']) {\n      return obj2;\n    } else if (obj2['reason'] && obj2['reason']['.tag']) {\n      return obj2.reason;\n    } else {\n      return obj2;\n    }\n  } else if (typeof(obj) === 'string') {\n    // Might be a fucking JSON object error.\n    try {\n      const obj2 = JSON.parse(obj);\n      if (obj2['error'] && obj2['error']['reason'] && obj2['error']['reason']['.tag']) {\n        return obj2.error.reason;\n      }\n    } catch (e) {\n      // Nope. Give up.\n\n    }\n  }\n  return <any> obj;\n}\n\n/**\n * Returns a user-facing error message given an error.\n *\n * HACK: Dropbox error messages sometimes lack a `user_message` field.\n * Sometimes, they are even strings. Ugh.\n * @url https://github.com/dropbox/dropbox-sdk-js/issues/146\n * @url https://github.com/dropbox/dropbox-sdk-js/issues/145\n * @url https://github.com/dropbox/dropbox-sdk-js/issues/144\n * @param err An error.\n */\nfunction GetErrorMessage(err: DropboxTypes.Error<any>): string {\n  if (err['user_message']) {\n    return err.user_message.text;\n  } else if (err['error_summary']) {\n    return err.error_summary;\n  } else if (typeof(err.error) === \"string\") {\n    return err.error;\n  } else if (typeof(err.error) === \"object\") {\n    // DROPBOX BUG: Sometimes, error is a nested error.\n    return GetErrorMessage(err.error);\n  } else {\n    throw new Error(`Dropbox's servers gave us a garbage error message: ${JSON.stringify(err)}`);\n  }\n}\n\nfunction LookupErrorToError(err: DropboxTypes.files.LookupError, p: string, msg: string): ApiError {\n  switch (err['.tag']) {\n    case 'malformed_path':\n      return new ApiError(ErrorCode.EBADF, msg, p);\n    case 'not_found':\n      return ApiError.ENOENT(p);\n    case 'not_file':\n      return ApiError.EISDIR(p);\n    case 'not_folder':\n      return ApiError.ENOTDIR(p);\n    case 'restricted_content':\n      return ApiError.EPERM(p);\n    case 'other':\n    default:\n      return new ApiError(ErrorCode.EIO, msg, p);\n  }\n}\n\nfunction WriteErrorToError(err: DropboxTypes.files.WriteError, p: string, msg: string): ApiError {\n  switch (err['.tag']) {\n    case 'malformed_path':\n    case 'disallowed_name':\n      return new ApiError(ErrorCode.EBADF, msg, p);\n    case 'conflict':\n    case 'no_write_permission':\n    case 'team_folder':\n      return ApiError.EPERM(p);\n    case 'insufficient_space':\n      return new ApiError(ErrorCode.ENOSPC, msg);\n    case 'other':\n    default:\n      return new ApiError(ErrorCode.EIO, msg, p);\n  }\n}\n\nfunction FilesDeleteWrapped(client: DropboxClient, p: string, cb: BFSOneArgCallback): void {\n  const arg: DropboxTypes.files.DeleteArg = {\n    path: FixPath(p)\n  };\n  client.filesDeleteV2(arg)\n    .then(() => {\n      cb();\n    }).catch((e: DropboxTypes.Error<DropboxTypes.files.DeleteError>) => {\n      const err = ExtractTheFuckingError(e);\n      switch (err['.tag']) {\n        case 'path_lookup':\n          cb(LookupErrorToError((<DropboxTypes.files.DeleteErrorPathLookup> err).path_lookup, p, GetErrorMessage(e)));\n          break;\n        case 'path_write':\n          cb(WriteErrorToError((<DropboxTypes.files.DeleteErrorPathWrite> err).path_write, p, GetErrorMessage(e)));\n          break;\n        case 'too_many_write_operations':\n          setTimeout(() => FilesDeleteWrapped(client, p, cb), 500 + (300 * (Math.random())));\n          break;\n        case 'other':\n        default:\n          cb(new ApiError(ErrorCode.EIO, GetErrorMessage(e), p));\n          break;\n      }\n    });\n}\n\nexport class DropboxFile extends PreloadFile<DropboxFileSystem> implements File {\n  constructor(_fs: DropboxFileSystem, _path: string, _flag: FileFlag, _stat: Stats, contents?: Buffer) {\n    super(_fs, _path, _flag, _stat, contents);\n  }\n\n  public sync(cb: BFSOneArgCallback): void {\n    this._fs._syncFile(this.getPath(), this.getBuffer(), cb);\n  }\n\n  public close(cb: BFSOneArgCallback): void {\n    this.sync(cb);\n  }\n}\n\n/**\n * Options for the Dropbox file system.\n */\nexport interface DropboxFileSystemOptions {\n  // An *authenticated* Dropbox client from the 2.x JS SDK.\n  client: DropboxTypes.Dropbox;\n}\n\n/**\n * A read/write file system backed by Dropbox cloud storage.\n *\n * Uses the Dropbox V2 API, and the 2.x JS SDK.\n */\nexport default class DropboxFileSystem extends BaseFileSystem implements FileSystem {\n  public static readonly Name = \"DropboxV2\";\n\n  public static readonly Options: FileSystemOptions = {\n    client: {\n      type: \"object\",\n      description: \"An *authenticated* Dropbox client. Must be from the 2.5.x JS SDK.\"\n    }\n  };\n\n  /**\n   * Creates a new DropboxFileSystem instance with the given options.\n   * Must be given an *authenticated* Dropbox client from 2.x JS SDK.\n   */\n  public static Create(opts: DropboxFileSystemOptions, cb: BFSCallback<DropboxFileSystem>): void {\n    cb(null, new DropboxFileSystem(opts.client));\n  }\n\n  public static isAvailable(): boolean {\n    // Checks if the Dropbox library is loaded.\n    return typeof Dropbox !== 'undefined';\n  }\n\n  private _client: DropboxTypes.Dropbox;\n\n  private constructor(client: DropboxTypes.Dropbox) {\n    super();\n    this._client = client;\n  }\n\n  public getName(): string {\n    return DropboxFileSystem.Name;\n  }\n\n  public isReadOnly(): boolean {\n    return false;\n  }\n\n  // Dropbox doesn't support symlinks, properties, or synchronous calls\n  // TODO: does it???\n\n  public supportsSymlinks(): boolean {\n    return false;\n  }\n\n  public supportsProps(): boolean {\n    return false;\n  }\n\n  public supportsSynch(): boolean {\n    return false;\n  }\n\n  /**\n   * Deletes *everything* in the file system. Mainly intended for unit testing!\n   * @param mainCb Called when operation completes.\n   */\n  public empty(mainCb: BFSOneArgCallback): void {\n    this.readdir('/', (e, paths?) => {\n      if (paths) {\n        const next = (e?: ApiError) => {\n          if (paths.length === 0) {\n            mainCb();\n          } else {\n            FilesDeleteWrapped(this._client, <string> paths.shift(), next);\n          }\n        };\n        next();\n      } else {\n        mainCb(e);\n      }\n    });\n  }\n\n  public rename(oldPath: string, newPath: string, cb: BFSOneArgCallback): void {\n    // Dropbox doesn't let you rename things over existing things, but POSIX does.\n    // So, we need to see if newPath exists...\n    this.stat(newPath, false, (e, stats?) => {\n      const rename = () => {\n        const relocationArg: DropboxTypes.files.RelocationArg = {\n          from_path: FixPath(oldPath),\n          to_path: FixPath(newPath)\n        };\n        this._client.filesMoveV2(relocationArg)\n          .then(() => cb())\n          .catch(function(e: DropboxTypes.Error<DropboxTypes.files.RelocationError>) {\n            const err = ExtractTheFuckingError(e);\n            switch (err['.tag']) {\n              case 'from_lookup':\n                cb(LookupErrorToError((<DropboxTypes.files.RelocationErrorFromLookup> err).from_lookup, oldPath, GetErrorMessage(e)));\n                break;\n              case 'from_write':\n                cb(WriteErrorToError((<DropboxTypes.files.RelocationErrorFromWrite> err).from_write, oldPath, GetErrorMessage(e)));\n                break;\n              case 'to':\n                cb(WriteErrorToError((<DropboxTypes.files.RelocationErrorTo> err).to, newPath, GetErrorMessage(e)));\n                break;\n              case 'cant_copy_shared_folder':\n              case 'cant_nest_shared_folder':\n                cb(new ApiError(ErrorCode.EPERM, GetErrorMessage(e), oldPath));\n                break;\n              case 'cant_move_folder_into_itself':\n              case 'duplicated_or_nested_paths':\n                cb(new ApiError(ErrorCode.EBADF, GetErrorMessage(e), oldPath));\n                break;\n              case 'too_many_files':\n                cb(new ApiError(ErrorCode.ENOSPC, GetErrorMessage(e), oldPath));\n                break;\n              case 'other':\n              default:\n                cb(new ApiError(ErrorCode.EIO, GetErrorMessage(e), oldPath));\n                break;\n            }\n        });\n      };\n      if (e) {\n        // Doesn't exist. Proceed!\n        rename();\n      } else if (oldPath === newPath) {\n        // NOP if the path exists. Error if it doesn't exist.\n        if (e) {\n          cb(ApiError.ENOENT(newPath));\n        } else {\n          cb();\n        }\n      } else if (stats && stats.isDirectory()) {\n        // Exists, is a directory. Cannot rename over an existing directory.\n        cb(ApiError.EISDIR(newPath));\n      } else {\n        // Exists, is a file, and differs from oldPath. Delete and rename.\n        this.unlink(newPath, (e) => {\n          if (e) {\n            cb(e);\n          } else {\n            rename();\n          }\n        });\n      }\n    });\n  }\n\n  public stat(path: string, isLstat: boolean, cb: BFSCallback<Stats>): void {\n    if (path === '/') {\n      // Dropbox doesn't support querying the root directory.\n      setImmediate(function() {\n        cb(null, new Stats(FileType.DIRECTORY, 4096));\n      });\n      return;\n    }\n    const arg: DropboxTypes.files.GetMetadataArg = {\n      path: FixPath(path)\n    };\n    this._client.filesGetMetadata(arg).then((ref) => {\n      switch (ref['.tag']) {\n        case 'file':\n          const fileMetadata = <DropboxTypes.files.FileMetadata> ref;\n          // TODO: Parse time fields.\n          cb(null, new Stats(FileType.FILE, fileMetadata.size));\n          break;\n        case 'folder':\n          cb(null, new Stats(FileType.DIRECTORY, 4096));\n          break;\n        case 'deleted':\n          cb(ApiError.ENOENT(path));\n          break;\n        default:\n          // Unknown.\n          break;\n      }\n    }).catch((e: DropboxTypes.Error<DropboxTypes.files.GetMetadataError>) => {\n      const err = ExtractTheFuckingError(e);\n      switch (err['.tag']) {\n        case 'path':\n          cb(LookupErrorToError(err.path, path, GetErrorMessage(e)));\n          break;\n        default:\n          cb(new ApiError(ErrorCode.EIO, GetErrorMessage(e), path));\n          break;\n      }\n    });\n  }\n\n  public openFile(path: string, flags: FileFlag, cb: BFSCallback<File>): void {\n    const downloadArg: DropboxTypes.files.DownloadArg = {\n      path: FixPath(path)\n    };\n    this._client.filesDownload(downloadArg).then((res) => {\n      const b: Blob = (<any> res).fileBlob;\n      const fr = new FileReader();\n      fr.onload = () => {\n        const ab = fr.result as ArrayBuffer;\n        cb(null, new DropboxFile(this, path, flags, new Stats(FileType.FILE, ab.byteLength), arrayBuffer2Buffer(ab)));\n      };\n      fr.readAsArrayBuffer(b);\n    }).catch((e: DropboxTypes.Error<DropboxTypes.files.DownloadError>) => {\n      const err = ExtractTheFuckingError(e);\n      switch (err['.tag']) {\n        case 'path':\n          const dpError = <DropboxTypes.files.DownloadErrorPath> err;\n          cb(LookupErrorToError(dpError.path, path, GetErrorMessage(e)));\n          break;\n        case 'other':\n        default:\n          cb(new ApiError(ErrorCode.EIO, GetErrorMessage(e), path));\n          break;\n      }\n    });\n  }\n\n  public createFile(p: string, flags: FileFlag, mode: number, cb: BFSCallback<File>): void {\n    const fileData = Buffer.alloc(0);\n    const blob = new Blob([buffer2ArrayBuffer(fileData) as ArrayBuffer], {type: \"octet/stream\"});\n    const commitInfo: DropboxTypes.files.CommitInfo = {\n      contents: blob,\n      path: FixPath(p)\n    };\n    this._client.filesUpload(commitInfo).then((metadata) => {\n      cb(null, new DropboxFile(this, p, flags, new Stats(FileType.FILE, 0), fileData));\n    }).catch((e: DropboxTypes.Error<DropboxTypes.files.UploadError>) => {\n      const err = ExtractTheFuckingError(e);\n      // HACK: Casting to 'any' since tag can be 'too_many_write_operations'.\n      switch (<string> err['.tag']) {\n        case 'path':\n          const upError = <DropboxTypes.files.UploadErrorPath> err;\n          cb(WriteErrorToError((upError as any).path.reason, p, GetErrorMessage(e)));\n          break;\n        case 'too_many_write_operations':\n          // Retry in (500, 800) ms.\n          setTimeout(() => this.createFile(p, flags, mode, cb), 500 + (300 * (Math.random())));\n          break;\n        case 'other':\n        default:\n          cb(new ApiError(ErrorCode.EIO, GetErrorMessage(e), p));\n          break;\n      }\n    });\n  }\n\n  /**\n   * Delete a file\n   */\n  public unlink(path: string, cb: BFSOneArgCallback): void {\n    // Must be a file. Check first.\n    this.stat(path, false, (e, stat) => {\n      if (stat) {\n        if (stat.isDirectory()) {\n          cb(ApiError.EISDIR(path));\n        } else {\n          FilesDeleteWrapped(this._client, path, cb);\n        }\n      } else {\n        cb(e);\n      }\n    });\n  }\n\n  /**\n   * Delete a directory\n   */\n  public rmdir(path: string, cb: BFSOneArgCallback): void {\n    this.readdir(path, (e, paths) => {\n      if (paths) {\n        if (paths.length > 0) {\n          cb(ApiError.ENOTEMPTY(path));\n        } else {\n          FilesDeleteWrapped(this._client, path, cb);\n        }\n      } else {\n        cb(e);\n      }\n    });\n  }\n\n  /**\n   * Create a directory\n   */\n  public mkdir(p: string, mode: number, cb: BFSOneArgCallback): void {\n    // Dropbox's create_folder is recursive. Check if parent exists.\n    const parent = dirname(p);\n    this.stat(parent, false, (e, stats?) => {\n      if (e) {\n        cb(e);\n      } else if (stats && !stats.isDirectory()) {\n        cb(ApiError.ENOTDIR(parent));\n      } else {\n        const arg: DropboxTypes.files.CreateFolderArg = {\n          path: FixPath(p)\n        };\n        this._client.filesCreateFolderV2(arg).then(() => cb()).catch((e: DropboxTypes.Error<DropboxTypes.files.CreateFolderError>) => {\n          const err = ExtractTheFuckingError(e);\n          if ((<string> err['.tag']) === \"too_many_write_operations\") {\n            // Retry in a bit.\n            setTimeout(() => this.mkdir(p, mode, cb), 500 + (300 * (Math.random())));\n          } else {\n            cb(WriteErrorToError(ExtractTheFuckingError(e).path, p, GetErrorMessage(e)));\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Get the names of the files in a directory\n   */\n  public readdir(path: string, cb: BFSCallback<string[]>): void {\n    const arg: DropboxTypes.files.ListFolderArg = {\n      path: FixPath(path)\n    };\n    this._client.filesListFolder(arg).then((res) => {\n      ContinueReadingDir(this._client, path, res, [], cb);\n    }).catch((e: DropboxTypes.Error<DropboxTypes.files.ListFolderError>) => {\n      ProcessListFolderError(e, path, cb);\n    });\n  }\n\n  /**\n   * (Internal) Syncs file to Dropbox.\n   */\n  public _syncFile(p: string, d: Buffer, cb: BFSOneArgCallback): void {\n    const blob = new Blob([buffer2ArrayBuffer(d) as ArrayBuffer], {type: \"octet/stream\"});\n    const arg: DropboxTypes.files.CommitInfo = {\n      contents: blob,\n      path: FixPath(p),\n      mode: {\n        '.tag': 'overwrite'\n      }\n    };\n    this._client.filesUpload(arg).then(() => {\n      cb();\n    }).catch((e: DropboxTypes.Error<DropboxTypes.files.UploadError>) => {\n      const err = ExtractTheFuckingError(e);\n      switch (<string> err['.tag']) {\n        case 'path':\n          const upError = <DropboxTypes.files.UploadErrorPath> err;\n          cb(WriteErrorToError((upError as any).path.reason, p, GetErrorMessage(e)));\n          break;\n        case 'too_many_write_operations':\n          setTimeout(() => this._syncFile(p, d, cb), 500 + (300 * (Math.random())));\n          break;\n        case 'other':\n        default:\n          cb(new ApiError(ErrorCode.EIO, GetErrorMessage(e), p));\n          break;\n      }\n    });\n  }\n}\n\nfunction ProcessListFolderError(e: DropboxTypes.Error<DropboxTypes.files.ListFolderError>, path: string, cb: BFSCallback<string[]>): void {\n  const err = ExtractTheFuckingError(e);\n  switch (err['.tag']) {\n    case 'path':\n      const pathError = <DropboxTypes.files.ListFolderErrorPath> err;\n      cb(LookupErrorToError(pathError.path, path, GetErrorMessage(e)));\n      break;\n    case 'other':\n    default:\n      cb(new ApiError(ErrorCode.EIO, GetErrorMessage(e), path));\n      break;\n  }\n}\n\nfunction ContinueReadingDir(client: DropboxClient, path: string, res: DropboxTypes.files.ListFolderResult, previousEntries: string[], cb: BFSCallback<string[]>): void {\n  const newEntries = <string[]> res.entries.map((e) => e.path_display).filter(Boolean);\n  const entries = previousEntries.concat(newEntries);\n  if (!res.has_more) {\n    cb(null, entries);\n  } else {\n    const arg: DropboxTypes.files.ListFolderContinueArg = {\n      cursor: res.cursor\n    };\n    client.filesListFolderContinue(arg).then((res) => {\n      ContinueReadingDir(client, path, res, entries, cb);\n    }).catch((e: DropboxTypes.Error<DropboxTypes.files.ListFolderError>) => {\n      ProcessListFolderError(e, path, cb);\n    });\n  }\n}\n"]}