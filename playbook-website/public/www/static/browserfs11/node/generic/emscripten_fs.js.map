{"version":3,"file":"emscripten_fs.js","sourceRoot":"","sources":["../../../src/generic/emscripten_fs.ts"],"names":[],"mappings":";;AAYA,2CAAiC;AAEjC,qCAA+C;AAiE/C;IAME,gCAAoB,EAAmB;QAAnB,OAAE,GAAF,EAAE,CAAiB;QACrC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QAC7B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,cAAc,EAAE,CAAC;IACzC,CAAC;IAEM,qCAAI,GAAX,UAAY,MAAwB;QAClC,IAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QACnB,IAAI;YACF,IAAI,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC/B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aACxF;SACF;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACnD;IACH,CAAC;IAEM,sCAAK,GAAZ,UAAa,MAAwB;QACnC,IAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QACnB,IAAI;YACF,IAAI,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE;gBAC7C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACnC;SACF;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACnD;IACH,CAAC;IAEM,qCAAI,GAAX,UAAY,MAAwB,EAAE,MAAkB,EAAE,MAAc,EAAE,MAAc,EAAE,QAAgB;QACxG,0DAA0D;QAC1D,IAAI;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,IAAA,wBAAiB,EAAC,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;SAC9F;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IAEM,sCAAK,GAAZ,UAAa,MAAwB,EAAE,MAAkB,EAAE,MAAc,EAAE,MAAc,EAAE,QAAgB;QACzG,0BAA0B;QAC1B,IAAI;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,IAAA,wBAAiB,EAAC,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;SAC/F;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IAEM,uCAAM,GAAb,UAAc,MAAwB,EAAE,MAAc,EAAE,MAAc;QACpE,IAAI,QAAQ,GAAG,MAAM,CAAC;QACtB,IAAI,MAAM,KAAK,CAAC,EAAE,EAAG,YAAY;YAC/B,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC;SAC7B;aAAM,IAAI,MAAM,KAAK,CAAC,EAAE,EAAG,YAAY;YACtC,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACpC,IAAI;oBACF,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC/C,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC;iBACvB;gBAAC,OAAO,CAAC,EAAE;oBACV,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;iBACxD;aACF;SACF;QAED,IAAI,QAAQ,GAAG,CAAC,EAAE;YAChB,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SACvD;QAED,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC3B,OAAO,QAAQ,CAAC;IAClB,CAAC;IACH,6BAAC;AAAD,CAAC,AAlFD,IAkFC;AAED;IAME,8BAAoB,EAAmB;QAAnB,OAAE,GAAF,EAAE,CAAiB;QACrC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QAC7B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,cAAc,EAAE,CAAC;IACzC,CAAC;IAEM,sCAAO,GAAd,UAAe,IAAsB;QACnC,IAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,IAAe,CAAC;QACpB,IAAI;YACF,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACpC;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;QACD,OAAO;YACL,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;IACJ,CAAC;IAEM,sCAAO,GAAd,UAAe,IAAsB,EAAE,IAAW;QAChD,IAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI;YACF,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC3B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACvC,gDAAgD;gBAChD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;aACvB;YACD,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;gBAChC,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aAC1C;SACF;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,kEAAkE;YAClE,+DAA+D;YAC/D,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE;gBACxB,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aACxD;SACF;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,IAAI;gBACF,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aAC3C;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;oBACX,MAAM,CAAC,CAAC;iBACT;gBACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aACxD;SACF;IACH,CAAC;IAEM,qCAAM,GAAb,UAAc,MAAwB,EAAE,IAAY;QAClD,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAEM,oCAAK,GAAZ,UAAa,MAAwB,EAAE,IAAY,EAAE,IAAY,EAAE,GAAQ;QACzE,IAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;QACzD,0DAA0D;QAC1D,IAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI;YACF,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC5B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aACxC;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;aAC1D;SACF;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,qCAAM,GAAb,UAAc,OAAyB,EAAE,MAAwB,EAAE,OAAe;QAChF,IAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;QACnE,IAAI;YACF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACzC,kDAAkD;YAClD,2EAA2E;YAC3E,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC;YACvB,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;SACzB;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IAEM,qCAAM,GAAb,UAAc,MAAwB,EAAE,IAAY;QAClD,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAI;YACF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SAC9B;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IAEM,oCAAK,GAAZ,UAAa,MAAwB,EAAE,IAAY;QACjD,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAI;YACF,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SAC7B;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IAEM,sCAAO,GAAd,UAAe,IAAsB;QACnC,IAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI;YACF,qDAAqD;YACrD,6BAA6B;YAC7B,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC/C,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YACzB,OAAO,QAAQ,CAAC;SACjB;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IAEM,sCAAO,GAAd,UAAe,MAAwB,EAAE,OAAe,EAAE,OAAe;QACvE,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;QACnE,IAAI;YACF,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAC3C;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IAEM,uCAAQ,GAAf,UAAgB,IAAsB;QACpC,IAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI;YACF,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACvC;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IACH,2BAAC;AAAD,CAAC,AApLD,IAoLC;AAED;IAsCE,yBAAY,GAAwB,EAAE,KAA4B,EAAE,YAA0C,EAAE,MAAe;QAAnH,oBAAA,EAAA,MAAa,IAAK,CAAC,IAAI,CAAC;QAAE,sBAAA,EAAA,QAAe,IAAK,CAAC,MAAM,CAAC;QAAE,6BAAA,EAAA,eAAsB,IAAK,CAAC,aAAa,CAAC;QAAE,uBAAA,EAAA,SAAa,iBAAE;QArC/H,8EAA8E;QAC9E,wHAAwH;QACjH,+BAA0B,GAAG;YAClC,CAAC,CAAA,YAAY,EAAE,GAAG;YAClB,CAAC,CAAA,YAAY,EAAE,IAAI;YACnB,CAAC,CAAA,UAAU,EAAE,IAAI;YACjB,EAAE,CAAA,WAAW,EAAE,GAAG;YAClB,EAAE,CAAA,oBAAoB,EAAE,IAAI;YAC5B,EAAE,CAAA,kBAAkB,EAAE,IAAI;YAC1B,GAAG,CAAA,mBAAmB,EAAE,KAAK;YAC7B,GAAG,CAAA,2BAA2B,EAAE,KAAK;YACrC,GAAG,CAAA,kBAAkB,EAAE,IAAI;YAC3B,GAAG,CAAA,4BAA4B,EAAE,GAAG;YACpC,GAAG,CAAA,0BAA0B,EAAE,IAAI;YACnC,GAAG,CAAA,mCAAmC,EAAE,IAAI;YAC5C,GAAG,CAAA,iCAAiC,EAAE,KAAK;YAC3C,IAAI,CAAA,YAAY,EAAE,GAAG;YACrB,IAAI,CAAA,qBAAqB,EAAE,GAAG;YAC9B,IAAI,CAAA,mBAAmB,EAAE,IAAI;YAC7B,IAAI,CAAA,6BAA6B,EAAE,GAAG;YACtC,IAAI,CAAA,2BAA2B,EAAE,IAAI;YACrC,IAAI,CAAA,4BAA4B,EAAE,IAAI;YACtC,IAAI,CAAA,0BAA0B,EAAE,KAAK;YACrC,IAAI,CAAA,oCAAoC,EAAE,IAAI;YAC9C,IAAI,CAAA,kCAAkC,EAAE,KAAK;YAC7C,IAAI,CAAA,oBAAoB,EAAE,IAAI;YAC9B,IAAI,CAAA,kBAAkB,EAAE,KAAK;SAC9B,CAAC;QAWA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;QACd,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAEM,+BAAK,GAAZ,UAAa,CAAyB;QACpC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAClE,CAAC;IAEM,oCAAU,GAAjB,UAAkB,MAA+B,EAAE,IAAY,EAAE,IAAY,EAAE,GAAS;QACtF,IAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QACnB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC3D,MAAM,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAClD;QACD,IAAM,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,iCAAO,GAAd,UAAe,IAAY;QACzB,IAAI,IAAe,CAAC;QACpB,IAAI;YACF,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACpC;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBACX,MAAM,CAAC,CAAC;aACT;YACD,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACxD;QACD,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAEM,kCAAQ,GAAf,UAAgB,IAAsB;QACpC,IAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;SACpB;QACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC;IAEM,iDAAuB,GAA9B,UAA+B,KAAsB;QACnD,IAAI,WAAW,GAAG,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAC5E,WAAW,IAAI,MAAM,CAAC;QACtB,IAAI,WAAW,IAAI,IAAI,CAAC,0BAA0B,EAAE;YAClD,OAAc,IAAI,CAAC,0BAA2B,CAAC,WAAW,CAAC,CAAC;SAC7D;aAAM;YACL,OAAgB,KAAK,CAAC;SACvB;IACH,CAAC;IAEM,mCAAS,GAAhB;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,+BAAK,GAAZ;QACE,OAAO,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IAEM,iCAAO,GAAd;QACE,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAEM,wCAAc,GAArB;QACE,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IACH,sBAAC;AAAD,CAAC,AA/GD,IA+GC","sourcesContent":["/**\n * Defines an Emscripten file system object for use in the Emscripten virtual\n * filesystem. Allows you to use synchronous BrowserFS file systems from within\n * Emscripten.\n *\n * You can construct a BFSEmscriptenFS, mount it using its mount command,\n * and then mount it into Emscripten.\n *\n * Adapted from Emscripten's NodeFS:\n * https://raw.github.com/kripken/emscripten/master/src/library_nodefs.js\n */\nimport FS from '../core/FS';\nimport fs from '../core/node_fs';\nimport NodeStats from '../core/node_fs_stats';\nimport {uint8Array2Buffer} from '../core/util';\n\nexport interface Stats {\n  dev: number;\n  ino: number;\n  mode: number;\n  nlink: number;\n  uid: number;\n  gid: number;\n  rdev: number;\n  size: number;\n  blksize: number;\n  blocks: number;\n  atime: Date;\n  mtime: Date;\n  ctime: Date;\n  timestamp?: number;\n}\n\nexport interface EmscriptenFSNode {\n  name: string;\n  mode: number;\n  parent: EmscriptenFSNode;\n  mount: {opts: {root: string}};\n  stream_ops: EmscriptenStreamOps;\n  node_ops: EmscriptenNodeOps;\n}\n\nexport interface EmscriptenStream {\n  node: EmscriptenFSNode;\n  nfd: any;\n  flags: string;\n  position: number;\n}\n\nexport interface EmscriptenNodeOps {\n  getattr(node: EmscriptenFSNode): Stats;\n  setattr(node: EmscriptenFSNode, attr: Stats): void;\n  lookup(parent: EmscriptenFSNode, name: string): EmscriptenFSNode;\n  mknod(parent: EmscriptenFSNode, name: string, mode: number, dev: any): EmscriptenFSNode;\n  rename(oldNode: EmscriptenFSNode, newDir: EmscriptenFSNode, newName: string): void;\n  unlink(parent: EmscriptenFSNode, name: string): void;\n  rmdir(parent: EmscriptenFSNode, name: string): void;\n  readdir(node: EmscriptenFSNode): string[];\n  symlink(parent: EmscriptenFSNode, newName: string, oldPath: string): void;\n  readlink(node: EmscriptenFSNode): string;\n}\n\nexport interface EmscriptenStreamOps {\n  open(stream: EmscriptenStream): void;\n  close(stream: EmscriptenStream): void;\n  read(stream: EmscriptenStream, buffer: Uint8Array, offset: number, length: number, position: number): number;\n  write(stream: EmscriptenStream, buffer: Uint8Array, offset: number, length: number, position: number): number;\n  llseek(stream: EmscriptenStream, offset: number, whence: number): number;\n}\n\nexport interface EmscriptenFS {\n  node_ops: EmscriptenNodeOps;\n  stream_ops: EmscriptenStreamOps;\n  mount(mount: {opts: {root: string}}): EmscriptenFSNode;\n  createNode(parent: EmscriptenFSNode, name: string, mode: number, dev?: any): EmscriptenFSNode;\n  getMode(path: string): number;\n  realPath(node: EmscriptenFSNode): string;\n}\n\nclass BFSEmscriptenStreamOps implements EmscriptenStreamOps {\n  public PATH: any;\n  private FS: any;\n  private ERRNO_CODES: any;\n  private nodefs: FS;\n\n  constructor(private fs: BFSEmscriptenFS) {\n    this.nodefs = fs.getNodeFS();\n    this.FS = fs.getFS();\n    this.PATH = fs.getPATH();\n    this.ERRNO_CODES = fs.getERRNO_CODES();\n  }\n\n  public open(stream: EmscriptenStream): void {\n    const path = this.fs.realPath(stream.node);\n    const FS = this.FS;\n    try {\n      if (FS.isFile(stream.node.mode)) {\n        stream.nfd = this.nodefs.openSync(path, this.fs.flagsToPermissionString(stream.flags));\n      }\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n\n  public close(stream: EmscriptenStream): void {\n    const FS = this.FS;\n    try {\n      if (FS.isFile(stream.node.mode) && stream.nfd) {\n        this.nodefs.closeSync(stream.nfd);\n      }\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n\n  public read(stream: EmscriptenStream, buffer: Uint8Array, offset: number, length: number, position: number): number {\n    // Avoid copying overhead by reading directly into buffer.\n    try {\n      return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer), offset, length, position);\n    } catch (e) {\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n\n  public write(stream: EmscriptenStream, buffer: Uint8Array, offset: number, length: number, position: number): number {\n    // Avoid copying overhead.\n    try {\n      return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer), offset, length, position);\n    } catch (e) {\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n\n  public llseek(stream: EmscriptenStream, offset: number, whence: number): number {\n    let position = offset;\n    if (whence === 1) {  // SEEK_CUR.\n      position += stream.position;\n    } else if (whence === 2) {  // SEEK_END.\n      if (this.FS.isFile(stream.node.mode)) {\n        try {\n          const stat = this.nodefs.fstatSync(stream.nfd);\n          position += stat.size;\n        } catch (e) {\n          throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n        }\n      }\n    }\n\n    if (position < 0) {\n      throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);\n    }\n\n    stream.position = position;\n    return position;\n  }\n}\n\nclass BFSEmscriptenNodeOps implements EmscriptenNodeOps {\n  private FS: any;\n  private PATH: any;\n  private ERRNO_CODES: any;\n  private nodefs: FS;\n\n  constructor(private fs: BFSEmscriptenFS) {\n    this.nodefs = fs.getNodeFS();\n    this.FS = fs.getFS();\n    this.PATH = fs.getPATH();\n    this.ERRNO_CODES = fs.getERRNO_CODES();\n  }\n\n  public getattr(node: EmscriptenFSNode): Stats {\n    const path = this.fs.realPath(node);\n    let stat: NodeStats;\n    try {\n      stat = this.nodefs.lstatSync(path);\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n    return {\n      dev: stat.dev,\n      ino: stat.ino,\n      mode: stat.mode,\n      nlink: stat.nlink,\n      uid: stat.uid,\n      gid: stat.gid,\n      rdev: stat.rdev,\n      size: stat.size,\n      atime: stat.atime,\n      mtime: stat.mtime,\n      ctime: stat.ctime,\n      blksize: stat.blksize,\n      blocks: stat.blocks\n    };\n  }\n\n  public setattr(node: EmscriptenFSNode, attr: Stats): void {\n    const path = this.fs.realPath(node);\n    try {\n      if (attr.mode !== undefined) {\n        this.nodefs.chmodSync(path, attr.mode);\n        // update the common node structure mode as well\n        node.mode = attr.mode;\n      }\n      if (attr.timestamp !== undefined) {\n        const date = new Date(attr.timestamp);\n        this.nodefs.utimesSync(path, date, date);\n      }\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      // Ignore not supported errors. Emscripten does utimesSync when it\n      // writes files, but never really requires the value to be set.\n      if (e.code !== \"ENOTSUP\") {\n        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n      }\n    }\n    if (attr.size !== undefined) {\n      try {\n        this.nodefs.truncateSync(path, attr.size);\n      } catch (e) {\n        if (!e.code) {\n          throw e;\n        }\n        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n      }\n    }\n  }\n\n  public lookup(parent: EmscriptenFSNode, name: string): EmscriptenFSNode {\n    const path = this.PATH.join2(this.fs.realPath(parent), name);\n    const mode = this.fs.getMode(path);\n    return this.fs.createNode(parent, name, mode);\n  }\n\n  public mknod(parent: EmscriptenFSNode, name: string, mode: number, dev: any): EmscriptenFSNode {\n    const node = this.fs.createNode(parent, name, mode, dev);\n    // create the backing node for this in the fs root as well\n    const path = this.fs.realPath(node);\n    try {\n      if (this.FS.isDir(node.mode)) {\n        this.nodefs.mkdirSync(path, node.mode);\n      } else {\n        this.nodefs.writeFileSync(path, '', { mode: node.mode });\n      }\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n    return node;\n  }\n\n  public rename(oldNode: EmscriptenFSNode, newDir: EmscriptenFSNode, newName: string): void {\n    const oldPath = this.fs.realPath(oldNode);\n    const newPath = this.PATH.join2(this.fs.realPath(newDir), newName);\n    try {\n      this.nodefs.renameSync(oldPath, newPath);\n      // This logic is missing from the original NodeFS,\n      // causing Emscripten's filesystem to think that the old file still exists.\n      oldNode.name = newName;\n      oldNode.parent = newDir;\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n\n  public unlink(parent: EmscriptenFSNode, name: string): void {\n    const path = this.PATH.join2(this.fs.realPath(parent), name);\n    try {\n      this.nodefs.unlinkSync(path);\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n\n  public rmdir(parent: EmscriptenFSNode, name: string) {\n    const path = this.PATH.join2(this.fs.realPath(parent), name);\n    try {\n      this.nodefs.rmdirSync(path);\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n\n  public readdir(node: EmscriptenFSNode): string[] {\n    const path = this.fs.realPath(node);\n    try {\n      // Node does not list . and .. in directory listings,\n      // but Emscripten expects it.\n      const contents = this.nodefs.readdirSync(path);\n      contents.push('.', '..');\n      return contents;\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n\n  public symlink(parent: EmscriptenFSNode, newName: string, oldPath: string): void {\n    const newPath = this.PATH.join2(this.fs.realPath(parent), newName);\n    try {\n      this.nodefs.symlinkSync(oldPath, newPath);\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n\n  public readlink(node: EmscriptenFSNode): string {\n    const path = this.fs.realPath(node);\n    try {\n      return this.nodefs.readlinkSync(path);\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n  }\n}\n\nexport default class BFSEmscriptenFS implements EmscriptenFS {\n  // This maps the integer permission modes from http://linux.die.net/man/3/open\n  // to node.js-specific file open permission strings at http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback\n  public flagsToPermissionStringMap = {\n    0/*O_RDONLY*/: 'r',\n    1/*O_WRONLY*/: 'r+',\n    2/*O_RDWR*/: 'r+',\n    64/*O_CREAT*/: 'r',\n    65/*O_WRONLY|O_CREAT*/: 'r+',\n    66/*O_RDWR|O_CREAT*/: 'r+',\n    129/*O_WRONLY|O_EXCL*/: 'rx+',\n    193/*O_WRONLY|O_CREAT|O_EXCL*/: 'rx+',\n    514/*O_RDWR|O_TRUNC*/: 'w+',\n    577/*O_WRONLY|O_CREAT|O_TRUNC*/: 'w',\n    578/*O_CREAT|O_RDWR|O_TRUNC*/: 'w+',\n    705/*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/: 'wx',\n    706/*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/: 'wx+',\n    1024/*O_APPEND*/: 'a',\n    1025/*O_WRONLY|O_APPEND*/: 'a',\n    1026/*O_RDWR|O_APPEND*/: 'a+',\n    1089/*O_WRONLY|O_CREAT|O_APPEND*/: 'a',\n    1090/*O_RDWR|O_CREAT|O_APPEND*/: 'a+',\n    1153/*O_WRONLY|O_EXCL|O_APPEND*/: 'ax',\n    1154/*O_RDWR|O_EXCL|O_APPEND*/: 'ax+',\n    1217/*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/: 'ax',\n    1218/*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/: 'ax+',\n    4096/*O_RDONLY|O_DSYNC*/: 'rs',\n    4098/*O_RDWR|O_DSYNC*/: 'rs+'\n  };\n  /* tslint:disable:variable-name */\n  public node_ops: EmscriptenNodeOps;\n  public stream_ops: EmscriptenStreamOps;\n  /* tslint:enable:variable-name */\n\n  private FS: any;\n  private PATH: any;\n  private ERRNO_CODES: any;\n  private nodefs: FS;\n  constructor(_FS = (<any> self)['FS'], _PATH = (<any> self)['PATH'], _ERRNO_CODES = (<any> self)['ERRNO_CODES'], nodefs: FS = fs) {\n    this.nodefs = nodefs;\n    this.FS = _FS;\n    this.PATH = _PATH;\n    this.ERRNO_CODES = _ERRNO_CODES;\n    this.node_ops = new BFSEmscriptenNodeOps(this);\n    this.stream_ops = new BFSEmscriptenStreamOps(this);\n  }\n\n  public mount(m: {opts: {root: string}}): EmscriptenFSNode {\n    return this.createNode(null, '/', this.getMode(m.opts.root), 0);\n  }\n\n  public createNode(parent: EmscriptenFSNode | null, name: string, mode: number, dev?: any): EmscriptenFSNode {\n    const FS = this.FS;\n    if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {\n      throw new FS.ErrnoError(this.ERRNO_CODES.EINVAL);\n    }\n    const node = FS.createNode(parent, name, mode);\n    node.node_ops = this.node_ops;\n    node.stream_ops = this.stream_ops;\n    return node;\n  }\n\n  public getMode(path: string): number {\n    let stat: NodeStats;\n    try {\n      stat = this.nodefs.lstatSync(path);\n    } catch (e) {\n      if (!e.code) {\n        throw e;\n      }\n      throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n    }\n    return stat.mode;\n  }\n\n  public realPath(node: EmscriptenFSNode): string {\n    const parts: string[] = [];\n    while (node.parent !== node) {\n      parts.push(node.name);\n      node = node.parent;\n    }\n    parts.push(node.mount.opts.root);\n    parts.reverse();\n    return this.PATH.join.apply(null, parts);\n  }\n\n  public flagsToPermissionString(flags: string | number): string {\n    let parsedFlags = (typeof flags === \"string\") ? parseInt(flags, 10) : flags;\n    parsedFlags &= 0x1FFF;\n    if (parsedFlags in this.flagsToPermissionStringMap) {\n      return (<any> this.flagsToPermissionStringMap)[parsedFlags];\n    } else {\n      return <string> flags;\n    }\n  }\n\n  public getNodeFS() {\n    return this.nodefs;\n  }\n\n  public getFS() {\n    return this.FS;\n  }\n\n  public getPATH() {\n    return this.PATH;\n  }\n\n  public getERRNO_CODES() {\n    return this.ERRNO_CODES;\n  }\n}\n"]}