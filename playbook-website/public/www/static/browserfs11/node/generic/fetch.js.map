{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../src/generic/fetch.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAEH,+CAAsD;AAGzC,QAAA,gBAAgB,GAAG,CAAC,OAAM,CAAC,KAAK,CAAC,KAAK,WAAW,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC;AAYlF,SAAgB,cAAc,CAAC,CAAS,EAAE,IAAY,EAAE,EAAoB;IAC1E,IAAI,OAAO,CAAC;IACZ,IAAI;QACF,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KACpB;IAAC,OAAO,CAAC,EAAE;QACV,qEAAqE;QACrE,OAAO,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;KACtD;IACD,OAAO;SACN,IAAI,CAAC,UAAC,GAAG;QACR,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE;YACX,OAAO,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,8CAAuC,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC,CAAC;SAC7F;aAAM;YACL,QAAQ,IAAI,EAAE;gBACZ,KAAK,QAAQ;oBACX,GAAG,CAAC,WAAW,EAAE;yBACd,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAA1B,CAA0B,CAAC;yBACzC,KAAK,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;oBAChE,MAAM;gBACR,KAAK,MAAM;oBACT,GAAG,CAAC,IAAI,EAAE;yBACP,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAd,CAAc,CAAC;yBAC9B,KAAK,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;oBAChE,MAAM;gBACR;oBACE,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,MAAM,EAAE,yBAAyB,GAAG,IAAI,CAAC,CAAC,CAAC;aACxE;SACF;IACH,CAAC,CAAC;SACD,KAAK,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;AAChE,CAAC;AA9BD,wCA8BC;AAED;;;GAGG;AACH,SAAgB,kBAAkB,CAAC,CAAS,EAAE,EAAuB;IACnE,KAAK,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;SACzB,IAAI,CAAC,UAAC,GAAG;QACR,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE;YACX,OAAO,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,mDAA4C,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC,CAAC;SAClG;aAAM;YACL,OAAO,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;SAC1E;IACH,CAAC,CAAC;SACD,KAAK,CAAC,UAAC,GAAG,IAAK,OAAA,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;AAClE,CAAC;AAVD,gDAUC","sourcesContent":["/**\n * Contains utility methods using 'fetch'.\n */\n\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport {BFSCallback} from '../core/file_system';\n\nexport const fetchIsAvailable = (typeof(fetch) !== \"undefined\" && fetch !== null);\n\n/**\n * Asynchronously download a file as a buffer or a JSON object.\n * Note that the third function signature with a non-specialized type is\n * invalid, but TypeScript requires it when you specialize string arguments to\n * constants.\n * @hidden\n */\nexport function fetchFileAsync(p: string, type: 'buffer', cb: BFSCallback<Buffer>): void;\nexport function fetchFileAsync(p: string, type: 'json', cb: BFSCallback<any>): void;\nexport function fetchFileAsync(p: string, type: string, cb: BFSCallback<any>): void;\nexport function fetchFileAsync(p: string, type: string, cb: BFSCallback<any>): void {\n  let request;\n  try {\n    request = fetch(p);\n  } catch (e) {\n    // XXX: fetch will throw a TypeError if the URL has credentials in it\n    return cb(new ApiError(ErrorCode.EINVAL, e.message));\n  }\n  request\n  .then((res) => {\n    if (!res.ok) {\n      return cb(new ApiError(ErrorCode.EIO, `fetch error: response returned code ${res.status}`));\n    } else {\n      switch (type) {\n        case 'buffer':\n          res.arrayBuffer()\n            .then((buf) => cb(null, Buffer.from(buf)))\n            .catch((err) => cb(new ApiError(ErrorCode.EIO, err.message)));\n          break;\n        case 'json':\n          res.json()\n            .then((json) => cb(null, json))\n            .catch((err) => cb(new ApiError(ErrorCode.EIO, err.message)));\n          break;\n        default:\n          cb(new ApiError(ErrorCode.EINVAL, \"Invalid download type: \" + type));\n      }\n    }\n  })\n  .catch((err) => cb(new ApiError(ErrorCode.EIO, err.message)));\n}\n\n/**\n * Asynchronously retrieves the size of the given file in bytes.\n * @hidden\n */\nexport function fetchFileSizeAsync(p: string, cb: BFSCallback<number>): void {\n  fetch(p, { method: 'HEAD' })\n    .then((res) => {\n      if (!res.ok) {\n        return cb(new ApiError(ErrorCode.EIO, `fetch HEAD error: response returned code ${res.status}`));\n      } else {\n        return cb(null, parseInt(res.headers.get('Content-Length') || '-1', 10));\n      }\n    })\n    .catch((err) => cb(new ApiError(ErrorCode.EIO, err.message)));\n}\n"]}