{"version":3,"file":"mutex.js","sourceRoot":"","sources":["../../../src/generic/mutex.ts"],"names":[],"mappings":";;AAAA,wDAAmD;AAEnD;;;GAGG;AACH;IAAA;QACU,YAAO,GAAY,KAAK,CAAC;QACzB,aAAQ,GAAe,EAAE,CAAC;IA2CpC,CAAC;IAzCQ,oBAAI,GAAX,UAAY,EAAY;QACtB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvB,OAAO;SACR;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,EAAE,EAAE,CAAC;IACP,CAAC;IAEM,sBAAM,GAAb;QACE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QAED,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACnC,kDAAkD;QAClD,oDAAoD;QACpD,gDAAgD;QAChD,oDAAoD;QACpD,oDAAoD;QACpD,+BAA+B;QAC/B,IAAI,IAAI,EAAE;YACR,IAAA,sBAAY,EAAC,IAAI,CAAC,CAAC;YACnB,OAAO;SACR;QAED,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACvB,CAAC;IAEM,uBAAO,GAAd;QACE,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,wBAAQ,GAAf;QACE,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACH,YAAC;AAAD,CAAC,AA7CD,IA6CC","sourcesContent":["import setImmediate from '../generic/setImmediate';\n\n/**\n * Non-recursive mutex\n * @hidden\n */\nexport default class Mutex {\n  private _locked: boolean = false;\n  private _waiters: Function[] = [];\n\n  public lock(cb: Function): void {\n    if (this._locked) {\n      this._waiters.push(cb);\n      return;\n    }\n    this._locked = true;\n    cb();\n  }\n\n  public unlock(): void {\n    if (!this._locked) {\n      throw new Error('unlock of a non-locked mutex');\n    }\n\n    const next = this._waiters.shift();\n    // don't unlock - we want to queue up next for the\n    // _end_ of the current task execution, but we don't\n    // want it to be called inline with whatever the\n    // current stack is.  This way we still get the nice\n    // behavior that an unlock immediately followed by a\n    // lock won't cause starvation.\n    if (next) {\n      setImmediate(next);\n      return;\n    }\n\n    this._locked = false;\n  }\n\n  public tryLock(): boolean {\n    if (this._locked) {\n      return false;\n    }\n\n    this._locked = true;\n    return true;\n  }\n\n  public isLocked(): boolean {\n    return this._locked;\n  }\n}\n"]}