{"version":3,"file":"api_error.js","sourceRoot":"","sources":["../../../src/core/api_error.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Standard libc error codes. Add more to this enum and ErrorStrings as they are\n * needed.\n * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html\n */\nexport enum ErrorCode {\n  EPERM     = 1,\n  ENOENT    = 2,\n  EIO       = 5,\n  EBADF     = 9,\n  EACCES    = 13,\n  EBUSY     = 16,\n  EEXIST    = 17,\n  ENOTDIR   = 20,\n  EISDIR    = 21,\n  EINVAL    = 22,\n  EFBIG     = 27,\n  ENOSPC    = 28,\n  EROFS     = 30,\n  ENOTEMPTY = 39,\n  ENOTSUP   = 95,\n}\n/* tslint:disable:variable-name */\n/**\n * Strings associated with each error code.\n * @hidden\n */\nexport const ErrorStrings: {[code: string]: string; [code: number]: string; } = {};\nErrorStrings[ErrorCode.EPERM] = 'Operation not permitted.';\nErrorStrings[ErrorCode.ENOENT] = 'No such file or directory.';\nErrorStrings[ErrorCode.EIO] = 'Input/output error.';\nErrorStrings[ErrorCode.EBADF] = 'Bad file descriptor.';\nErrorStrings[ErrorCode.EACCES] = 'Permission denied.';\nErrorStrings[ErrorCode.EBUSY] = 'Resource busy or locked.';\nErrorStrings[ErrorCode.EEXIST] = 'File exists.';\nErrorStrings[ErrorCode.ENOTDIR] = 'File is not a directory.';\nErrorStrings[ErrorCode.EISDIR] = 'File is a directory.';\nErrorStrings[ErrorCode.EINVAL] = 'Invalid argument.';\nErrorStrings[ErrorCode.EFBIG] = 'File is too big.';\nErrorStrings[ErrorCode.ENOSPC] = 'No space left on disk.';\nErrorStrings[ErrorCode.EROFS] = 'Cannot modify a read-only file system.';\nErrorStrings[ErrorCode.ENOTEMPTY] = 'Directory is not empty.';\nErrorStrings[ErrorCode.ENOTSUP] = 'Operation is not supported.';\n/* tslint:enable:variable-name */\n\n/**\n * Represents a BrowserFS error. Passed back to applications after a failed\n * call to the BrowserFS API.\n */\nexport class ApiError extends Error implements NodeJS.ErrnoException {\n  public static fromJSON(json: any): ApiError {\n    const err = new ApiError(0 as ErrorCode);\n    err.errno = json.errno;\n    err.code = json.code;\n    err.path = json.path;\n    err.stack = json.stack;\n    err.message = json.message;\n    return err;\n  }\n\n  /**\n   * Creates an ApiError object from a buffer.\n   */\n  public static fromBuffer(buffer: Buffer, i: number = 0): ApiError {\n    return ApiError.fromJSON(JSON.parse(buffer.toString('utf8', i + 4, i + 4 + buffer.readUInt32LE(i))));\n  }\n\n  public static FileError(code: ErrorCode, p: string): ApiError {\n    return new ApiError(code, ErrorStrings[code], p);\n  }\n  public static ENOENT(path: string): ApiError {\n    return this.FileError(ErrorCode.ENOENT, path);\n  }\n\n  public static EEXIST(path: string): ApiError {\n    return this.FileError(ErrorCode.EEXIST, path);\n  }\n\n  public static EISDIR(path: string): ApiError {\n    return this.FileError(ErrorCode.EISDIR, path);\n  }\n\n  public static ENOTDIR(path: string): ApiError {\n    return this.FileError(ErrorCode.ENOTDIR, path);\n  }\n\n  public static EPERM(path: string): ApiError {\n    return this.FileError(ErrorCode.EPERM, path);\n  }\n\n  public static ENOTEMPTY(path: string): ApiError {\n    return this.FileError(ErrorCode.ENOTEMPTY, path);\n  }\n\n  public errno: ErrorCode;\n  public code: string;\n  public path: string | undefined;\n  // Unsupported.\n  public syscall: string = \"\";\n  public stack: string | undefined;\n\n  /**\n   * Represents a BrowserFS error. Passed back to applications after a failed\n   * call to the BrowserFS API.\n   *\n   * Error codes mirror those returned by regular Unix file operations, which is\n   * what Node returns.\n   * @constructor ApiError\n   * @param type The type of the error.\n   * @param [message] A descriptive error message.\n   */\n  constructor(type: ErrorCode, message: string = ErrorStrings[type], path?: string) {\n    super(message);\n    this.errno = type;\n    this.code = ErrorCode[type];\n    this.path = path;\n    this.stack = new Error().stack;\n    this.message = `Error: ${this.code}: ${message}${this.path ? `, '${this.path}'` : ''}`;\n  }\n\n  /**\n   * @return A friendly error message.\n   */\n  public toString(): string {\n    return this.message;\n  }\n\n  public toJSON(): any {\n    return {\n      errno: this.errno,\n      code: this.code,\n      path: this.path,\n      stack: this.stack,\n      message: this.message\n    };\n  }\n\n  /**\n   * Writes the API error into a buffer.\n   */\n  public writeToBuffer(buffer: Buffer = Buffer.alloc(this.bufferSize()), i: number = 0): Buffer {\n    const bytesWritten = buffer.write(JSON.stringify(this.toJSON()), i + 4);\n    buffer.writeUInt32LE(bytesWritten, i);\n    return buffer;\n  }\n\n  /**\n   * The size of the API error in buffer-form in bytes.\n   */\n  public bufferSize(): number {\n    // 4 bytes for string length.\n    return 4 + Buffer.byteLength(JSON.stringify(this.toJSON()));\n  }\n}\n"]}