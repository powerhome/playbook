{"version":3,"file":"FS.js","sourceRoot":"","sources":["../../../src/core/FS.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as _fs from 'fs';\nimport { File } from './file';\nimport { ApiError, ErrorCode } from './api_error';\nimport { FileSystem, BFSOneArgCallback, BFSCallback, BFSThreeArgCallback } from './file_system';\nimport { FileFlag } from './file_flag';\nimport Stats, { FileType } from './node_fs_stats';\nimport setImmediate from '../generic/setImmediate';\n\n// Typing info only.\nimport { FileWatcher } from './file_watcher';\n\n/** Used for unit testing. Defaults to a NOP. */\nlet wrapCbHook = function <T>(cb: T, numArgs: number): T {\n  return cb;\n};\n\n/**\n * Wraps a callback function, ensuring it is invoked through setImmediate.\n * @hidden\n */\nfunction wrapCb<T extends Function>(cb: T, numArgs: number): T {\n  if (typeof cb !== 'function') {\n    throw new Error('Callback must be a function.');\n  }\n\n  const hookedCb = wrapCbHook(cb, numArgs);\n\n  // We could use `arguments`, but Function.call/apply is expensive. And we only\n  // need to handle 1-3 arguments\n  switch (numArgs) {\n    case 1:\n      return <any> function(arg1: any) {\n        setImmediate(function() {\n          return hookedCb(arg1);\n        });\n      };\n    case 2:\n      return <any> function(arg1: any, arg2: any) {\n        setImmediate(function() {\n          return hookedCb(arg1, arg2);\n        });\n      };\n    case 3:\n      return <any> function(arg1: any, arg2: any, arg3: any) {\n        setImmediate(function() {\n          return hookedCb(arg1, arg2, arg3);\n        });\n      };\n    default:\n      throw new Error('Invalid invocation of wrapCb.');\n  }\n}\n\n/**\n * @hidden\n */\nfunction assertRoot(fs?: FileSystem | null): FileSystem {\n  if (fs) {\n    return fs;\n  }\n  throw new ApiError(ErrorCode.EIO, `Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)`);\n}\n\n/**\n * @hidden\n */\nfunction normalizeMode(mode: number | string | null | undefined, def: number): number {\n  switch (typeof mode) {\n    case 'number':\n      // (path, flag, mode, cb?)\n      return <number> mode;\n    case 'string':\n      // (path, flag, modeString, cb?)\n      const trueMode = parseInt(<string> mode, 8);\n      if (!isNaN(trueMode)) {\n        return trueMode;\n      }\n      // Invalid string.\n      return def;\n    default:\n      return def;\n  }\n}\n\n/**\n * @hidden\n */\nfunction normalizeTime(time: number | Date): Date {\n  if (time instanceof Date) {\n    return time;\n  } if (typeof time === 'number') {\n    return new Date(time * 1000);\n  }\n  throw new ApiError(ErrorCode.EINVAL, `Invalid time.`);\n\n}\n\n/**\n * @hidden\n */\nfunction normalizePath(p: string): string {\n  // Node doesn't allow null characters in paths.\n  if (p.indexOf('\\u0000') >= 0) {\n    throw new ApiError(ErrorCode.EINVAL, 'Path must be a string without null bytes.');\n  } else if (p === '') {\n    throw new ApiError(ErrorCode.EINVAL, 'Path must not be empty.');\n  }\n  return path.resolve(p);\n}\n\n/**\n * @hidden\n */\nfunction normalizeOptions(options: any, defEnc: string | null, defFlag: string, defMode: number | null): { encoding: string; flag: string; mode: number } {\n  // typeof null === 'object' so special-case handing is needed.\n  switch (options === null ? 'null' : typeof options) {\n    case 'object':\n      return {\n        encoding: typeof options.encoding !== 'undefined' ? options.encoding : defEnc,\n        flag: typeof options.flag !== 'undefined' ? options.flag : defFlag,\n        mode: normalizeMode(options.mode, defMode!)\n      };\n    case 'string':\n      return {\n        encoding: options,\n        flag: defFlag,\n        mode: defMode!\n      };\n    case 'null':\n    case 'undefined':\n    case 'function':\n      return {\n        encoding: defEnc!,\n        flag: defFlag,\n        mode: defMode!\n      };\n    default:\n      throw new TypeError(`\"options\" must be a string or an object, got ${typeof options} instead.`);\n  }\n}\n\n/**\n * The default callback is a NOP.\n * @hidden\n * @private\n */\nfunction nopCb() {\n  // NOP.\n}\n\n/**\n * The node frontend to all filesystems.\n * This layer handles:\n *\n * * Sanity checking inputs.\n * * Normalizing paths.\n * * Resetting stack depth for asynchronous operations which may not go through\n *   the browser by wrapping all input callbacks using `setImmediate`.\n * * Performing the requested operation through the filesystem or the file\n *   descriptor, as appropriate.\n * * Handling optional arguments and setting default arguments.\n * @see http://nodejs.org/api/fs.html\n */\nexport default class FS {\n  /* tslint:disable:variable-name */\n  // Exported fs.Stats.\n  public static Stats = Stats;\n  /* tslint:enable:variable-name */\n\n  public static F_OK: number = 0;\n  public static R_OK: number = 4;\n  public static W_OK: number = 2;\n  public static X_OK: number = 1;\n\n  private root: FileSystem | null = null;\n  private fdMap: { [fd: number]: File } = {};\n  private nextFd = 100;\n\n  private fileWatcher: FileWatcher = new FileWatcher();\n\n  public initialize(rootFS: FileSystem): FileSystem {\n    if (!(<any> rootFS).constructor.isAvailable()) {\n      throw new ApiError(ErrorCode.EINVAL, 'Tried to instantiate BrowserFS with an unavailable file system.');\n    }\n    return this.root = rootFS;\n  }\n\n  /**\n   * converts Date or number to a fractional UNIX timestamp\n   * Grabbed from NodeJS sources (lib/fs.js)\n   */\n  public _toUnixTimestamp(time: Date | number): number {\n    if (typeof time === 'number') {\n      return time;\n    } if (time instanceof Date) {\n      return time.getTime() / 1000;\n    }\n    throw new Error(\"Cannot parse time: \" + time);\n  }\n\n  /**\n   * **NONSTANDARD**: Grab the FileSystem instance that backs this API.\n   * @return [BrowserFS.FileSystem | null] Returns null if the file system has\n   *   not been initialized.\n   */\n  public getRootFS(): FileSystem | null {\n    if (this.root) {\n      return this.root;\n    }\n    return null;\n\n  }\n\n  // FILE OR DIRECTORY METHODS\n\n  /**\n   * Asynchronous rename. No arguments other than a possible exception are given\n   * to the completion callback.\n   * @param oldPath\n   * @param newPath\n   * @param callback\n   */\n  public rename(oldPath: string, newPath: string, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      setImmediate(() => {\n        this.fileWatcher.triggerWatch(oldPath, 'rename');\n\n        this.stat(newPath, (err, stat) => {\n          if (err) {\n            return;\n          }\n\n          this.fileWatcher.triggerWatch(newPath, 'rename', stat);\n        });\n      });\n      assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous rename.\n   * @param oldPath\n   * @param newPath\n   */\n  public renameSync(oldPath: string, newPath: string): void {\n    setImmediate(() => {\n      this.fileWatcher.triggerWatch(oldPath, 'rename');\n      this.fileWatcher.triggerWatch(newPath, 'rename');\n    });\n    assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath));\n  }\n\n  /**\n   * Test whether or not the given path exists by checking with the file system.\n   * Then call the callback argument with either true or false.\n   * @example Sample invocation\n   *   fs.exists('/etc/passwd', function (exists) {\n   *     util.debug(exists ? \"it's there\" : \"no passwd!\");\n   *   });\n   * @param path\n   * @param callback\n   */\n  public exists(path: string, cb: (exists: boolean) => any = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      return assertRoot(this.root).exists(normalizePath(path), newCb);\n    } catch (e) {\n      // Doesn't return an error. If something bad happens, we assume it just\n      // doesn't exist.\n      return newCb(false);\n    }\n  }\n\n  /**\n   * Test whether or not the given path exists by checking with the file system.\n   * @param path\n   * @return [boolean]\n   */\n  public existsSync(path: string): boolean {\n    try {\n      return assertRoot(this.root).existsSync(normalizePath(path));\n    } catch (e) {\n      // Doesn't return an error. If something bad happens, we assume it just\n      // doesn't exist.\n      return false;\n    }\n  }\n\n  /**\n   * Asynchronous `stat`.\n   * @param path\n   * @param callback\n   */\n  public stat(path: string, cb: BFSCallback<Stats> = nopCb): void {\n    const newCb = wrapCb(cb, 2);\n    try {\n      return assertRoot(this.root).stat(normalizePath(path), false, newCb);\n    } catch (e) {\n      return newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `stat`.\n   * @param path\n   * @return [BrowserFS.node.fs.Stats]\n   */\n  public statSync(path: string): Stats {\n    return assertRoot(this.root).statSync(normalizePath(path), false);\n  }\n\n  /**\n   * Asynchronous `lstat`.\n   * `lstat()` is identical to `stat()`, except that if path is a symbolic link,\n   * then the link itself is stat-ed, not the file that it refers to.\n   * @param path\n   * @param callback\n   */\n  public lstat(path: string, cb: BFSCallback<Stats> = nopCb): void {\n    const newCb = wrapCb(cb, 2);\n    try {\n      return assertRoot(this.root).stat(normalizePath(path), true, newCb);\n    } catch (e) {\n      return newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `lstat`.\n   * `lstat()` is identical to `stat()`, except that if path is a symbolic link,\n   * then the link itself is stat-ed, not the file that it refers to.\n   * @param path\n   * @return [BrowserFS.node.fs.Stats]\n   */\n  public lstatSync(path: string): Stats {\n    return assertRoot(this.root).statSync(normalizePath(path), true);\n  }\n\n  // FILE-ONLY METHODS\n\n  /**\n   * Asynchronous `truncate`.\n   * @param path\n   * @param len\n   * @param callback\n   */\n  public truncate(path: string, cb?: BFSOneArgCallback): void;\n  public truncate(path: string, len: number, cb?: BFSOneArgCallback): void;\n  public truncate(path: string, arg2: any = 0, cb: BFSOneArgCallback = nopCb): void {\n    let len = 0;\n    if (typeof arg2 === 'function') {\n      cb = arg2;\n    } else if (typeof arg2 === 'number') {\n      len = arg2;\n    }\n\n    const newCb = wrapCb(cb, 1);\n    try {\n      if (len < 0) {\n        throw new ApiError(ErrorCode.EINVAL);\n      }\n      setImmediate(() => {\n        this.stat(path, (err, stat) => {\n          this.fileWatcher.triggerWatch(path, 'change', stat);\n        });\n      });\n      return assertRoot(this.root).truncate(normalizePath(path), len, newCb);\n    } catch (e) {\n      return newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `truncate`.\n   * @param path\n   * @param len\n   */\n  public truncateSync(path: string, len: number = 0): void {\n    if (len < 0) {\n      throw new ApiError(ErrorCode.EINVAL);\n    }\n    setImmediate(() => {\n      this.stat(path, (err, stat) => {\n        this.fileWatcher.triggerWatch(path, 'change', stat);\n      });\n    });\n    return assertRoot(this.root).truncateSync(normalizePath(path), len);\n  }\n\n  /**\n   * Asynchronous `unlink`.\n   * @param path\n   * @param callback\n   */\n  public unlink(path: string, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      setImmediate(() => {\n        this.fileWatcher.triggerWatch(path, 'rename', new Stats(FileType.FILE, 0, undefined, 0, 0, 0, 0));\n      });\n      return assertRoot(this.root).unlink(normalizePath(path), newCb);\n    } catch (e) {\n      return newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `unlink`.\n   * @param path\n   */\n  public unlinkSync(path: string): void {\n    setImmediate(() => {\n      this.fileWatcher.triggerWatch(path, 'rename', new Stats(FileType.FILE, 0, undefined, 0, 0, 0, 0));\n    });\n    return assertRoot(this.root).unlinkSync(normalizePath(path));\n  }\n\n  /**\n   * Asynchronous file open.\n   * Exclusive mode ensures that path is newly created.\n   *\n   * `flags` can be:\n   *\n   * * `'r'` - Open file for reading. An exception occurs if the file does not exist.\n   * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.\n   * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.\n   * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.\n   * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n   * * `'wx'` - Like 'w' but opens the file in exclusive mode.\n   * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n   * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.\n   * * `'a'` - Open file for appending. The file is created if it does not exist.\n   * * `'ax'` - Like 'a' but opens the file in exclusive mode.\n   * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.\n   * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.\n   *\n   * @see http://www.manpagez.com/man/2/open/\n   * @param path\n   * @param flags\n   * @param mode defaults to `0644`\n   * @param callback\n   */\n  public open(path: string, flag: string, cb?: BFSCallback<number>): void;\n  public open(path: string, flag: string, mode: number | string, cb?: BFSCallback<number>): void;\n  public open(path: string, flag: string, arg2?: any, cb: BFSCallback<number> = nopCb): void {\n    const mode = normalizeMode(arg2, 0x1a4);\n    cb = typeof arg2 === 'function' ? arg2 : cb;\n    const newCb = wrapCb(cb, 2);\n    try {\n      assertRoot(this.root).open(normalizePath(path), FileFlag.getFileFlag(flag), mode, (e: ApiError, file?: File) => {\n        if (file) {\n          newCb(e, this.getFdForFile(file));\n        } else {\n          newCb(e);\n        }\n      });\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous file open.\n   * @see http://www.manpagez.com/man/2/open/\n   * @param path\n   * @param flags\n   * @param mode defaults to `0644`\n   * @return [BrowserFS.File]\n   */\n  public openSync(path: string, flag: string, mode: number | string = 0x1a4): number {\n    return this.getFdForFile(\n      assertRoot(this.root).openSync(normalizePath(path), FileFlag.getFileFlag(flag), normalizeMode(mode, 0x1a4)));\n  }\n\n  /**\n   * Asynchronously reads the entire contents of a file.\n   * @example Usage example\n   *   fs.readFile('/etc/passwd', function (err, data) {\n   *     if (err) throw err;\n   *     console.log(data);\n   *   });\n   * @param filename\n   * @param options\n   * @option options [String] encoding The string encoding for the file contents. Defaults to `null`.\n   * @option options [String] flag Defaults to `'r'`.\n   * @param callback If no encoding is specified, then the raw buffer is returned.\n   */\n  public readFile(filename: string, cb: BFSCallback<Buffer>): void;\n  public readFile(filename: string, options: { flag?: string; }, callback?: BFSCallback<Buffer>): void;\n  public readFile(filename: string, options: { encoding: string; flag?: string; }, callback?: BFSCallback<string>): void;\n  public readFile(filename: string, encoding: string, cb: BFSCallback<string>): void;\n  public readFile(filename: string, arg2: any = {}, cb: BFSCallback<any> = nopCb) {\n    const options = normalizeOptions(arg2, null, 'r', null);\n    cb = typeof arg2 === 'function' ? arg2 : cb;\n    const newCb = wrapCb(cb, 2);\n    try {\n      const flag = FileFlag.getFileFlag(options.flag);\n      if (!flag.isReadable()) {\n        return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.'));\n      }\n      return assertRoot(this.root).readFile(normalizePath(filename), options.encoding, flag, newCb);\n    } catch (e) {\n      return newCb(e);\n    }\n  }\n\n  /**\n   * Synchronously reads the entire contents of a file.\n   * @param filename\n   * @param options\n   * @option options [String] encoding The string encoding for the file contents. Defaults to `null`.\n   * @option options [String] flag Defaults to `'r'`.\n   * @return [String | BrowserFS.node.Buffer]\n   */\n  public readFileSync(filename: string, options?: { flag?: string; }): Buffer;\n  public readFileSync(filename: string, options: { encoding: string; flag?: string; }): string;\n  public readFileSync(filename: string, encoding: string): string;\n  public readFileSync(filename: string, arg2: any = {}): any {\n    const options = normalizeOptions(arg2, null, 'r', null);\n    const flag = FileFlag.getFileFlag(options.flag);\n    if (!flag.isReadable()) {\n      throw new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.');\n    }\n    return assertRoot(this.root).readFileSync(normalizePath(filename), options.encoding, flag);\n  }\n\n  /**\n   * Asynchronously writes data to a file, replacing the file if it already\n   * exists.\n   *\n   * The encoding option is ignored if data is a buffer.\n   *\n   * @example Usage example\n   *   fs.writeFile('message.txt', 'Hello Node', function (err) {\n   *     if (err) throw err;\n   *     console.log('It\\'s saved!');\n   *   });\n   * @param filename\n   * @param data\n   * @param options\n   * @option options [String] encoding Defaults to `'utf8'`.\n   * @option options [Number] mode Defaults to `0644`.\n   * @option options [String] flag Defaults to `'w'`.\n   * @param callback\n   */\n  public writeFile(filename: string, data: any, cb?: BFSOneArgCallback): void;\n  public writeFile(filename: string, data: any, encoding?: string, cb?: BFSOneArgCallback): void;\n  public writeFile(filename: string, data: any, options?: { encoding?: string; mode?: string | number; flag?: string; }, cb?: BFSOneArgCallback): void;\n  public writeFile(filename: string, data: any, arg3: any = {}, cb: BFSOneArgCallback = nopCb): void {\n    const options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);\n    cb = typeof arg3 === 'function' ? arg3 : cb;\n    const newCb = wrapCb(cb, 1);\n    try {\n      const flag = FileFlag.getFileFlag(options.flag);\n      if (!flag.isWriteable()) {\n        return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.'));\n      }\n\n      assertRoot(this.root).writeFile(normalizePath(filename), data, options.encoding, flag, options.mode, (...args) => {\n        setImmediate(() => {\n          this.stat(filename, (_err, stat) => {\n            this.fileWatcher.triggerWatch(filename, 'change', stat);\n          });\n        });\n\n        newCb(...args);\n      });\n\n    } catch (e) {\n      return newCb(e);\n    }\n  }\n\n  /**\n   * Synchronously writes data to a file, replacing the file if it already\n   * exists.\n   *\n   * The encoding option is ignored if data is a buffer.\n   * @param filename\n   * @param data\n   * @param options\n   * @option options [String] encoding Defaults to `'utf8'`.\n   * @option options [Number] mode Defaults to `0644`.\n   * @option options [String] flag Defaults to `'w'`.\n   */\n  public writeFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number | string; flag?: string; }): void;\n  public writeFileSync(filename: string, data: any, encoding?: string): void;\n  public writeFileSync(filename: string, data: any, arg3?: any): void {\n    const options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);\n    const flag = FileFlag.getFileFlag(options.flag);\n    if (!flag.isWriteable()) {\n      throw new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.');\n    }\n    setImmediate(() => {\n      this.stat(filename, (err, stat) => {\n        this.fileWatcher.triggerWatch(filename, 'change', stat);\n      });\n    });\n    return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);\n  }\n\n  /**\n   * Asynchronously append data to a file, creating the file if it not yet\n   * exists.\n   *\n   * @example Usage example\n   *   fs.appendFile('message.txt', 'data to append', function (err) {\n   *     if (err) throw err;\n   *     console.log('The \"data to append\" was appended to file!');\n   *   });\n   * @param filename\n   * @param data\n   * @param options\n   * @option options [String] encoding Defaults to `'utf8'`.\n   * @option options [Number] mode Defaults to `0644`.\n   * @option options [String] flag Defaults to `'a'`.\n   * @param callback\n   */\n  public appendFile(filename: string, data: any, cb?: BFSOneArgCallback): void;\n  public appendFile(filename: string, data: any, options?: { encoding?: string; mode?: number | string; flag?: string; }, cb?: BFSOneArgCallback): void;\n  public appendFile(filename: string, data: any, encoding?: string, cb?: BFSOneArgCallback): void;\n  public appendFile(filename: string, data: any, arg3?: any, cb: BFSOneArgCallback = nopCb): void {\n    const options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);\n    cb = typeof arg3 === 'function' ? arg3 : cb;\n    const newCb = wrapCb(cb, 1);\n    try {\n      const flag = FileFlag.getFileFlag(options.flag);\n      if (!flag.isAppendable()) {\n        return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.'));\n      }\n      setImmediate(() => {\n        this.stat(filename, (err, stat) => {\n          this.fileWatcher.triggerWatch(filename, 'rename', stat);\n        });\n      });\n      assertRoot(this.root).appendFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Asynchronously append data to a file, creating the file if it not yet\n   * exists.\n   *\n   * @example Usage example\n   *   fs.appendFile('message.txt', 'data to append', function (err) {\n   *     if (err) throw err;\n   *     console.log('The \"data to append\" was appended to file!');\n   *   });\n   * @param filename\n   * @param data\n   * @param options\n   * @option options [String] encoding Defaults to `'utf8'`.\n   * @option options [Number] mode Defaults to `0644`.\n   * @option options [String] flag Defaults to `'a'`.\n   */\n  public appendFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number | string; flag?: string; }): void;\n  public appendFileSync(filename: string, data: any, encoding?: string): void;\n  public appendFileSync(filename: string, data: any, arg3?: any): void {\n    const options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);\n    const flag = FileFlag.getFileFlag(options.flag);\n    if (!flag.isAppendable()) {\n      throw new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.');\n    }\n    setImmediate(() => {\n      this.stat(filename, (err, stat) => {\n        this.fileWatcher.triggerWatch(filename, 'change', stat);\n      });\n    });\n    return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);\n  }\n\n  // FILE DESCRIPTOR METHODS\n\n  /**\n   * Asynchronous `fstat`.\n   * `fstat()` is identical to `stat()`, except that the file to be stat-ed is\n   * specified by the file descriptor `fd`.\n   * @param fd\n   * @param callback\n   */\n  public fstat(fd: number, cb: BFSCallback<Stats> = nopCb): void {\n    const newCb = wrapCb(cb, 2);\n    try {\n      const file = this.fd2file(fd);\n      file.stat(newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `fstat`.\n   * `fstat()` is identical to `stat()`, except that the file to be stat-ed is\n   * specified by the file descriptor `fd`.\n   * @param fd\n   * @return [BrowserFS.node.fs.Stats]\n   */\n  public fstatSync(fd: number): Stats {\n    return this.fd2file(fd).statSync();\n  }\n\n  /**\n   * Asynchronous close.\n   * @param fd\n   * @param callback\n   */\n  public close(fd: number, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      this.fd2file(fd).close((e: ApiError) => {\n        if (!e) {\n          this.closeFd(fd);\n        }\n        newCb(e);\n      });\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous close.\n   * @param fd\n   */\n  public closeSync(fd: number): void {\n    this.fd2file(fd).closeSync();\n    this.closeFd(fd);\n  }\n\n  /**\n   * Asynchronous ftruncate.\n   * @param fd\n   * @param len\n   * @param callback\n   */\n  public ftruncate(fd: number, cb?: BFSOneArgCallback): void;\n  public ftruncate(fd: number, len?: number, cb?: BFSOneArgCallback): void;\n  public ftruncate(fd: number, arg2?: any, cb: BFSOneArgCallback = nopCb): void {\n    const length = typeof arg2 === 'number' ? arg2 : 0;\n    cb = typeof arg2 === 'function' ? arg2 : cb;\n    const newCb = wrapCb(cb, 1);\n    try {\n      const file = this.fd2file(fd);\n      if (length < 0) {\n        throw new ApiError(ErrorCode.EINVAL);\n      }\n      file.truncate(length, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous ftruncate.\n   * @param fd\n   * @param len\n   */\n  public ftruncateSync(fd: number, len: number = 0): void {\n    const file = this.fd2file(fd);\n    if (len < 0) {\n      throw new ApiError(ErrorCode.EINVAL);\n    }\n    file.truncateSync(len);\n  }\n\n  /**\n   * Asynchronous fsync.\n   * @param fd\n   * @param callback\n   */\n  public fsync(fd: number, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      this.fd2file(fd).sync(newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous fsync.\n   * @param fd\n   */\n  public fsyncSync(fd: number): void {\n    this.fd2file(fd).syncSync();\n  }\n\n  /**\n   * Asynchronous fdatasync.\n   * @param fd\n   * @param callback\n   */\n  public fdatasync(fd: number, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      this.fd2file(fd).datasync(newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous fdatasync.\n   * @param fd\n   */\n  public fdatasyncSync(fd: number): void {\n    this.fd2file(fd).datasyncSync();\n  }\n\n  /**\n   * Write buffer to the file specified by `fd`.\n   * Note that it is unsafe to use fs.write multiple times on the same file\n   * without waiting for the callback.\n   * @param fd\n   * @param buffer Buffer containing the data to write to\n   *   the file.\n   * @param offset Offset in the buffer to start reading data from.\n   * @param length The amount of bytes to write to the file.\n   * @param position Offset from the beginning of the file where this\n   *   data should be written. If position is null, the data will be written at\n   *   the current position.\n   * @param callback The number specifies the number of bytes written into the file.\n   */\n  public write(fd: number, buffer: Buffer, offset: number, length: number, cb?: BFSThreeArgCallback<number, Buffer>): void;\n  public write(fd: number, buffer: Buffer, offset: number, length: number, position: number | null, cb?: BFSThreeArgCallback<number, Buffer>): void;\n  public write(fd: number, data: any, cb?: BFSThreeArgCallback<number, string>): void;\n  public write(fd: number, data: any, position: number | null, cb?: BFSThreeArgCallback<number, string>): void;\n  public write(fd: number, data: any, position: number | null, encoding: string, cb?: BFSThreeArgCallback<number, string>): void;\n  public write(fd: number, arg2: any, arg3?: any, arg4?: any, arg5?: any, cb: BFSThreeArgCallback<number, any> = nopCb): void {\n    let buffer: Buffer; let offset: number; let length: number; let position: number | null = null;\n    if (typeof arg2 === 'string') {\n      // Signature 1: (fd, string, [position?, [encoding?]], cb?)\n      let encoding = 'utf8';\n      switch (typeof arg3) {\n        case 'function':\n          // (fd, string, cb)\n          cb = arg3;\n          break;\n        case 'number':\n          // (fd, string, position, encoding?, cb?)\n          position = arg3;\n          encoding = typeof arg4 === 'string' ? arg4 : 'utf8';\n          cb = typeof arg5 === 'function' ? arg5 : cb;\n          break;\n        default:\n          // ...try to find the callback and get out of here!\n          cb = typeof arg4 === 'function' ? arg4 : typeof arg5 === 'function' ? arg5 : cb;\n          return cb(new ApiError(ErrorCode.EINVAL, 'Invalid arguments.'));\n      }\n      buffer = Buffer.from(arg2, encoding);\n      offset = 0;\n      length = buffer.length;\n    } else {\n      // Signature 2: (fd, buffer, offset, length, position?, cb?)\n      buffer = arg2;\n      offset = arg3;\n      length = arg4;\n      position = typeof arg5 === 'number' ? arg5 : null;\n      cb = typeof arg5 === 'function' ? arg5 : cb;\n    }\n\n    const newCb = wrapCb(cb, 3);\n    try {\n      const file = this.fd2file(fd);\n      if (position === undefined || position === null) {\n        position = file.getPos()!;\n      }\n      file.write(buffer, offset, length, position, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Write buffer to the file specified by `fd`.\n   * Note that it is unsafe to use fs.write multiple times on the same file\n   * without waiting for it to return.\n   * @param fd\n   * @param buffer Buffer containing the data to write to\n   *   the file.\n   * @param offset Offset in the buffer to start reading data from.\n   * @param length The amount of bytes to write to the file.\n   * @param position Offset from the beginning of the file where this\n   *   data should be written. If position is null, the data will be written at\n   *   the current position.\n   */\n  public writeSync(fd: number, buffer: Buffer, offset: number, length: number, position?: number | null): number;\n  public writeSync(fd: number, data: string, position?: number | null, encoding?: string): number;\n  public writeSync(fd: number, arg2: any, arg3?: any, arg4?: any, arg5?: any): number {\n    let buffer: Buffer; let offset: number = 0; let length: number; let position: number | null;\n    if (typeof arg2 === 'string') {\n      // Signature 1: (fd, string, [position?, [encoding?]])\n      position = typeof arg3 === 'number' ? arg3 : null;\n      const encoding = typeof arg4 === 'string' ? arg4 : 'utf8';\n      offset = 0;\n      buffer = Buffer.from(arg2, encoding);\n      length = buffer.length;\n    } else {\n      // Signature 2: (fd, buffer, offset, length, position?)\n      buffer = arg2;\n      offset = arg3;\n      length = arg4;\n      position = typeof arg5 === 'number' ? arg5 : null;\n    }\n\n    const file = this.fd2file(fd);\n    if (position === undefined || position === null) {\n      position = file.getPos()!;\n    }\n    return file.writeSync(buffer, offset, length, position);\n  }\n\n  /**\n   * Read data from the file specified by `fd`.\n   * @param buffer The buffer that the data will be\n   *   written to.\n   * @param offset The offset within the buffer where writing will\n   *   start.\n   * @param length An integer specifying the number of bytes to read.\n   * @param position An integer specifying where to begin reading from\n   *   in the file. If position is null, data will be read from the current file\n   *   position.\n   * @param callback The number is the number of bytes read\n   */\n  public read(fd: number, length: number, position: number | null, encoding: string, cb?: BFSThreeArgCallback<string, number>): void;\n  public read(fd: number, buffer: Buffer, offset: number, length: number, position: number | null, cb?: BFSThreeArgCallback<number, Buffer>): void;\n  public read(fd: number, arg2: any, arg3: any, arg4: any, arg5?: any, cb: BFSThreeArgCallback<string, number> | BFSThreeArgCallback<number, Buffer> = nopCb): void {\n    let position: number | null; let offset: number; let length: number; let buffer: Buffer; let newCb: BFSThreeArgCallback<number, Buffer>;\n    if (typeof arg2 === 'number') {\n      // legacy interface\n      // (fd, length, position, encoding, callback)\n      length = arg2;\n      position = arg3;\n      const encoding = arg4;\n      cb = typeof arg5 === 'function' ? arg5 : cb;\n      offset = 0;\n      buffer = Buffer.alloc(length);\n      // XXX: Inefficient.\n      // Wrap the cb so we shelter upper layers of the API from these\n      // shenanigans.\n      newCb = wrapCb((err?: ApiError | null, bytesRead?: number, buf?: Buffer) => {\n        if (err) {\n          return (<Function> cb)(err);\n        }\n        (<BFSThreeArgCallback<string, number>> cb)(err, buf!.toString(encoding), bytesRead!);\n      }, 3);\n    } else {\n      buffer = arg2;\n      offset = arg3;\n      length = arg4;\n      position = arg5;\n      newCb = wrapCb(<BFSThreeArgCallback<number, Buffer>> cb, 3);\n    }\n\n    try {\n      const file = this.fd2file(fd);\n      if (position === undefined || position === null) {\n        position = file.getPos()!;\n      }\n      file.read(buffer, offset, length, position, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Read data from the file specified by `fd`.\n   * @param fd\n   * @param buffer The buffer that the data will be\n   *   written to.\n   * @param offset The offset within the buffer where writing will\n   *   start.\n   * @param length An integer specifying the number of bytes to read.\n   * @param position An integer specifying where to begin reading from\n   *   in the file. If position is null, data will be read from the current file\n   *   position.\n   * @return [Number]\n   */\n  public readSync(fd: number, length: number, position: number, encoding: string): string;\n  public readSync(fd: number, buffer: Buffer, offset: number, length: number, position: number): number;\n  public readSync(fd: number, arg2: any, arg3: any, arg4: any, arg5?: any): any {\n    let shenanigans = false;\n    let buffer: Buffer; let offset: number; let length: number; let position: number; let encoding: string = 'utf8';\n    if (typeof arg2 === 'number') {\n      length = arg2;\n      position = arg3;\n      encoding = arg4;\n      offset = 0;\n      buffer = Buffer.alloc(length);\n      shenanigans = true;\n    } else {\n      buffer = arg2;\n      offset = arg3;\n      length = arg4;\n      position = arg5;\n    }\n    const file = this.fd2file(fd);\n    if (position === undefined || position === null) {\n      position = file.getPos()!;\n    }\n\n    const rv = file.readSync(buffer, offset, length, position);\n    if (!shenanigans) {\n      return rv;\n    }\n    return [buffer.toString(encoding), rv];\n\n  }\n\n  /**\n   * Asynchronous `fchown`.\n   * @param fd\n   * @param uid\n   * @param gid\n   * @param callback\n   */\n  public fchown(fd: number, uid: number, gid: number, callback: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(callback, 1);\n    try {\n      this.fd2file(fd).chown(uid, gid, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `fchown`.\n   * @param fd\n   * @param uid\n   * @param gid\n   */\n  public fchownSync(fd: number, uid: number, gid: number): void {\n    this.fd2file(fd).chownSync(uid, gid);\n  }\n\n  /**\n   * Asynchronous `fchmod`.\n   * @param fd\n   * @param mode\n   * @param callback\n   */\n  public fchmod(fd: number, mode: string | number, cb: BFSOneArgCallback): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      const numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;\n      this.fd2file(fd).chmod(numMode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `fchmod`.\n   * @param fd\n   * @param mode\n   */\n  public fchmodSync(fd: number, mode: number | string): void {\n    const numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;\n    this.fd2file(fd).chmodSync(numMode);\n  }\n\n  /**\n   * Change the file timestamps of a file referenced by the supplied file\n   * descriptor.\n   * @param fd\n   * @param atime\n   * @param mtime\n   * @param callback\n   */\n  public futimes(fd: number, atime: number | Date, mtime: number | Date, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      const file = this.fd2file(fd);\n      if (typeof atime === 'number') {\n        atime = new Date(atime * 1000);\n      }\n      if (typeof mtime === 'number') {\n        mtime = new Date(mtime * 1000);\n      }\n      file.utimes(atime, mtime, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Change the file timestamps of a file referenced by the supplied file\n   * descriptor.\n   * @param fd\n   * @param atime\n   * @param mtime\n   */\n  public futimesSync(fd: number, atime: number | Date, mtime: number | Date): void {\n    this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));\n  }\n\n  // DIRECTORY-ONLY METHODS\n\n  /**\n   * Asynchronous `rmdir`.\n   * @param path\n   * @param callback\n   */\n  public rmdir(path: string, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      path = normalizePath(path);\n\n      setImmediate(() => {\n        this.fileWatcher.triggerWatch(path, 'rename');\n      });\n      assertRoot(this.root).rmdir(path, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `rmdir`.\n   * @param path\n   */\n  public rmdirSync(path: string): void {\n    path = normalizePath(path);\n\n    setImmediate(() => {\n      this.fileWatcher.triggerWatch(path, 'rename');\n    });\n    return assertRoot(this.root).rmdirSync(path);\n  }\n\n  /**\n   * Asynchronous `mkdir`.\n   * @param path\n   * @param mode defaults to `0777`\n   * @param callback\n   */\n  public mkdir(path: string, mode?: any, cb: BFSOneArgCallback = nopCb): void {\n    if (typeof mode === 'function') {\n      cb = mode;\n      mode = 0x1ff;\n    }\n    const newCb = wrapCb(cb, 1);\n    try {\n      path = normalizePath(path);\n      setImmediate(() => {\n        this.fileWatcher.triggerWatch(path, 'rename');\n      });\n      assertRoot(this.root).mkdir(path, mode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `mkdir`.\n   * @param path\n   * @param mode defaults to `0777`\n   */\n  public mkdirSync(path: string, mode?: number | string): void {\n    setImmediate(() => {\n      this.fileWatcher.triggerWatch(path, 'rename');\n    });\n    assertRoot(this.root).mkdirSync(normalizePath(path), normalizeMode(mode, 0x1ff));\n  }\n\n  /**\n   * Asynchronous `readdir`. Reads the contents of a directory.\n   * The callback gets two arguments `(err, files)` where `files` is an array of\n   * the names of the files in the directory excluding `'.'` and `'..'`.\n   * @param path\n   * @param callback\n   */\n  public readdir(path: string, cb: BFSCallback<string[]> = nopCb): void {\n    const newCb = <(err: ApiError, files?: string[]) => void> wrapCb(cb, 2);\n    try {\n      path = normalizePath(path);\n      assertRoot(this.root).readdir(path, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `readdir`. Reads the contents of a directory.\n   * @param path\n   * @return [String[]]\n   */\n  public readdirSync(path: string): string[] {\n    path = normalizePath(path);\n    return assertRoot(this.root).readdirSync(path);\n  }\n\n  // SYMLINK METHODS\n\n  /**\n   * Asynchronous `link`.\n   * @param srcpath\n   * @param dstpath\n   * @param callback\n   */\n  public link(srcpath: string, dstpath: string, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      srcpath = normalizePath(srcpath);\n      dstpath = normalizePath(dstpath);\n      assertRoot(this.root).link(srcpath, dstpath, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `link`.\n   * @param srcpath\n   * @param dstpath\n   */\n  public linkSync(srcpath: string, dstpath: string): void {\n    srcpath = normalizePath(srcpath);\n    dstpath = normalizePath(dstpath);\n    return assertRoot(this.root).linkSync(srcpath, dstpath);\n  }\n\n  /**\n   * Asynchronous `symlink`.\n   * @param srcpath\n   * @param dstpath\n   * @param type can be either `'dir'` or `'file'` (default is `'file'`)\n   * @param callback\n   */\n  public symlink(srcpath: string, dstpath: string, cb?: BFSOneArgCallback): void;\n  public symlink(srcpath: string, dstpath: string, type?: string, cb?: BFSOneArgCallback): void;\n  public symlink(srcpath: string, dstpath: string, arg3?: any, cb: BFSOneArgCallback = nopCb): void {\n    const type = typeof arg3 === 'string' ? arg3 : 'file';\n    cb = typeof arg3 === 'function' ? arg3 : cb;\n    const newCb = wrapCb(cb, 1);\n    try {\n      if (type !== 'file' && type !== 'dir') {\n        return newCb(new ApiError(ErrorCode.EINVAL, \"Invalid type: \" + type));\n      }\n      srcpath = normalizePath(srcpath);\n      dstpath = normalizePath(dstpath);\n      assertRoot(this.root).symlink(srcpath, dstpath, type, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `symlink`.\n   * @param srcpath\n   * @param dstpath\n   * @param type can be either `'dir'` or `'file'` (default is `'file'`)\n   */\n  public symlinkSync(srcpath: string, dstpath: string, type?: string): void {\n    if (!type) {\n      type = 'file';\n    } else if (type !== 'file' && type !== 'dir') {\n      throw new ApiError(ErrorCode.EINVAL, \"Invalid type: \" + type);\n    }\n    srcpath = normalizePath(srcpath);\n    dstpath = normalizePath(dstpath);\n    return assertRoot(this.root).symlinkSync(srcpath, dstpath, type);\n  }\n\n  /**\n   * Asynchronous readlink.\n   * @param path\n   * @param callback\n   */\n  public readlink(path: string, cb: BFSCallback<string> = nopCb): void {\n    const newCb = wrapCb(cb, 2);\n    try {\n      path = normalizePath(path);\n      assertRoot(this.root).readlink(path, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous readlink.\n   * @param path\n   * @return [String]\n   */\n  public readlinkSync(path: string): string {\n    path = normalizePath(path);\n    return assertRoot(this.root).readlinkSync(path);\n  }\n\n  // PROPERTY OPERATIONS\n\n  /**\n   * Asynchronous `chown`.\n   * @param path\n   * @param uid\n   * @param gid\n   * @param callback\n   */\n  public chown(path: string, uid: number, gid: number, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      path = normalizePath(path);\n      assertRoot(this.root).chown(path, false, uid, gid, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `chown`.\n   * @param path\n   * @param uid\n   * @param gid\n   */\n  public chownSync(path: string, uid: number, gid: number): void {\n    path = normalizePath(path);\n    assertRoot(this.root).chownSync(path, false, uid, gid);\n  }\n\n  /**\n   * Asynchronous `lchown`.\n   * @param path\n   * @param uid\n   * @param gid\n   * @param callback\n   */\n  public lchown(path: string, uid: number, gid: number, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      path = normalizePath(path);\n      assertRoot(this.root).chown(path, true, uid, gid, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `lchown`.\n   * @param path\n   * @param uid\n   * @param gid\n   */\n  public lchownSync(path: string, uid: number, gid: number): void {\n    path = normalizePath(path);\n    assertRoot(this.root).chownSync(path, true, uid, gid);\n  }\n\n  /**\n   * Asynchronous `chmod`.\n   * @param path\n   * @param mode\n   * @param callback\n   */\n  public chmod(path: string, mode: number | string, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      const numMode = normalizeMode(mode, -1);\n      if (numMode < 0) {\n        throw new ApiError(ErrorCode.EINVAL, `Invalid mode.`);\n      }\n      assertRoot(this.root).chmod(normalizePath(path), false, numMode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `chmod`.\n   * @param path\n   * @param mode\n   */\n  public chmodSync(path: string, mode: string | number): void {\n    const numMode = normalizeMode(mode, -1);\n    if (numMode < 0) {\n      throw new ApiError(ErrorCode.EINVAL, `Invalid mode.`);\n    }\n    path = normalizePath(path);\n    assertRoot(this.root).chmodSync(path, false, numMode);\n  }\n\n  /**\n   * Asynchronous `lchmod`.\n   * @param path\n   * @param mode\n   * @param callback\n   */\n  public lchmod(path: string, mode: number | string, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      const numMode = normalizeMode(mode, -1);\n      if (numMode < 0) {\n        throw new ApiError(ErrorCode.EINVAL, `Invalid mode.`);\n      }\n      assertRoot(this.root).chmod(normalizePath(path), true, numMode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `lchmod`.\n   * @param path\n   * @param mode\n   */\n  public lchmodSync(path: string, mode: number | string): void {\n    const numMode = normalizeMode(mode, -1);\n    if (numMode < 1) {\n      throw new ApiError(ErrorCode.EINVAL, `Invalid mode.`);\n    }\n    assertRoot(this.root).chmodSync(normalizePath(path), true, numMode);\n  }\n\n  /**\n   * Change file timestamps of the file referenced by the supplied path.\n   * @param path\n   * @param atime\n   * @param mtime\n   * @param callback\n   */\n  public utimes(path: string, atime: number | Date, mtime: number | Date, cb: BFSOneArgCallback = nopCb): void {\n    const newCb = wrapCb(cb, 1);\n    try {\n      assertRoot(this.root).utimes(normalizePath(path), normalizeTime(atime), normalizeTime(mtime), newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Change file timestamps of the file referenced by the supplied path.\n   * @param path\n   * @param atime\n   * @param mtime\n   */\n  public utimesSync(path: string, atime: number | Date, mtime: number | Date): void {\n    assertRoot(this.root).utimesSync(normalizePath(path), normalizeTime(atime), normalizeTime(mtime));\n  }\n\n  /**\n   * Asynchronous `realpath`. The callback gets two arguments\n   * `(err, resolvedPath)`. May use `process.cwd` to resolve relative paths.\n   *\n   * @example Usage example\n   *   let cache = {'/etc':'/private/etc'};\n   *   fs.realpath('/etc/passwd', cache, function (err, resolvedPath) {\n   *     if (err) throw err;\n   *     console.log(resolvedPath);\n   *   });\n   *\n   * @param path\n   * @param cache An object literal of mapped paths that can be used to\n   *   force a specific path resolution or avoid additional `fs.stat` calls for\n   *   known real paths.\n   * @param callback\n   */\n  public realpath(path: string, cb?: BFSCallback<string>): void;\n  public realpath(path: string, cache: { [path: string]: string }, cb: BFSCallback<string>): void;\n  public realpath(path: string, arg2?: any, cb: BFSCallback<string> = nopCb): void {\n    const cache = typeof (arg2) === 'object' ? arg2 : {};\n    cb = typeof (arg2) === 'function' ? arg2 : nopCb;\n    const newCb = <(err: ApiError, resolvedPath?: string) => any> wrapCb(cb, 2);\n    try {\n      path = normalizePath(path);\n      assertRoot(this.root).realpath(path, cache, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `realpath`.\n   * @param path\n   * @param cache An object literal of mapped paths that can be used to\n   *   force a specific path resolution or avoid additional `fs.stat` calls for\n   *   known real paths.\n   * @return [String]\n   */\n  public realpathSync(path: string, cache: { [path: string]: string } = {}): string {\n    path = normalizePath(path);\n    return assertRoot(this.root).realpathSync(path, cache);\n  }\n\n  public watchFile(filename: string, listener: (curr: Stats, prev: Stats) => void): void;\n  public watchFile(filename: string, options: { persistent?: boolean; interval?: number; }, listener: (curr: Stats, prev: Stats) => void): void;\n  public watchFile(filename: string, arg2: any, listener: (curr: Stats, prev: Stats) => void = nopCb): void {\n    this.stat(filename, (err, stat) => {\n      let usedStat = stat;\n      if (err) {\n        usedStat = new Stats(FileType.FILE, 0, undefined, 0, 0, 0, 0)\n      }\n\n      this.fileWatcher.watchFile(usedStat!, filename, arg2, listener);\n    });\n  }\n\n  public unwatchFile(filename: string, listener: (curr: Stats, prev: Stats) => void = nopCb): void {\n    this.fileWatcher.unwatchFile(filename, listener);\n  }\n\n  public watch(filename: string, listener?: (event: string, filename: string) => any): _fs.FSWatcher;\n  public watch(filename: string, options: { persistent?: boolean; }, listener?: (event: string, filename: string) => any): _fs.FSWatcher;\n  public watch(filename: string, arg2: any, listener: (event: string, filename: string) => any = nopCb): _fs.FSWatcher {\n    return this.fileWatcher.watch(filename, arg2, listener);\n  }\n\n  public access(path: string, callback: (err: ApiError) => void): void;\n  public access(path: string, mode: number, callback: (err: ApiError) => void): void;\n  public access(path: string, arg2: any, cb: (e: ApiError) => void = nopCb): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  public accessSync(path: string, mode?: number): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  public createReadStream(path: string, options?: {\n    flags?: string;\n    encoding?: string;\n    fd?: number;\n    mode?: number;\n    autoClose?: boolean;\n  }): _fs.ReadStream {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  public createWriteStream(path: string, options?: {\n    flags?: string;\n    encoding?: string;\n    fd?: number;\n    mode?: number;\n  }): _fs.WriteStream {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  /**\n   * For unit testing. Passes all incoming callbacks to cbWrapper for wrapping.\n   */\n  public wrapCallbacks(cbWrapper: (cb: Function, args: number) => Function) {\n    wrapCbHook = <any> cbWrapper;\n  }\n\n  private getFdForFile(file: File): number {\n    const fd = this.nextFd++;\n    this.fdMap[fd] = file;\n    return fd;\n  }\n\n  private fd2file(fd: number): File {\n    const rv = this.fdMap[fd];\n    if (rv) {\n      return rv;\n    }\n    throw new ApiError(ErrorCode.EBADF, 'Invalid file descriptor.');\n\n  }\n\n  private closeFd(fd: number): void {\n    delete this.fdMap[fd];\n  }\n}\n\nexport interface FSModule extends FS {\n  /**\n   * The FS constructor.\n   */\n  FS: typeof FS;\n  /**\n   * The FS.Stats constructor.\n   */\n  Stats: typeof Stats;\n  /**\n   * Retrieve the FS object backing the fs module.\n   */\n  getFSModule(): FS;\n  /**\n   * Set the FS object backing the fs module.\n   */\n  changeFSModule(newFs: FS): void;\n\n  /**\n   * Accessors\n   */\n  F_OK: number;\n  R_OK: number;\n  W_OK: number;\n  X_OK: number;\n}\n"]}