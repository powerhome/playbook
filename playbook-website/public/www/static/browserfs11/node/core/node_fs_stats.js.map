{"version":3,"file":"node_fs_stats.js","sourceRoot":"","sources":["../../../src/core/node_fs_stats.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\n\n/**\n * Indicates the type of the given file. Applied to 'mode'.\n */\nexport enum FileType {\n  FILE = 0x8000,\n  DIRECTORY = 0x4000,\n  SYMLINK = 0xA000\n}\n\n/**\n * Emulation of Node's `fs.Stats` object.\n *\n * Attribute descriptions are from `man 2 stat'\n * @see http://nodejs.org/api/fs.html#fs_class_fs_stats\n * @see http://man7.org/linux/man-pages/man2/stat.2.html\n */\nexport default class Stats implements fs.Stats {\n  public static fromBuffer(buffer: Buffer): Stats {\n    const size = buffer.readUInt32LE(0),\n      mode = buffer.readUInt32LE(4),\n      atime = buffer.readDoubleLE(8),\n      mtime = buffer.readDoubleLE(16),\n      ctime = buffer.readDoubleLE(24);\n\n    return new Stats(mode & 0xF000, size, mode & 0xFFF, atime, mtime, ctime);\n  }\n\n  /**\n   * Clones the stats object.\n   */\n  public static clone(s: Stats): Stats {\n    return new Stats(s.mode & 0xF000, s.size, s.mode & 0xFFF, s.atimeMs, s.mtimeMs, s.ctimeMs, s.birthtimeMs);\n  }\n\n  public blocks: number;\n  public mode: number;\n  /**\n   * UNSUPPORTED ATTRIBUTES\n   * I assume no one is going to need these details, although we could fake\n   * appropriate values if need be.\n   */\n  // ID of device containing file\n  public dev: number = 0;\n  // inode number\n  public ino: number = 0;\n  // device ID (if special file)\n  public rdev: number = 0;\n  // number of hard links\n  public nlink: number = 1;\n  // blocksize for file system I/O\n  public blksize: number = 4096;\n  // @todo Maybe support these? atm, it's a one-user filesystem.\n  // user ID of owner\n  public uid: number = 0;\n  // group ID of owner\n  public gid: number = 0;\n  // XXX: Some file systems stash data on stats objects.\n  public fileData: Buffer | null = null;\n  public atimeMs: number;\n  public mtimeMs: number;\n  public ctimeMs: number;\n  public birthtimeMs: number;\n  public size: number;\n\n  public get atime(): Date {\n    return new Date(this.atimeMs);\n  }\n\n  public get mtime(): Date {\n    return new Date(this.mtimeMs);\n  }\n\n  public get ctime(): Date {\n    return new Date(this.ctimeMs);\n  }\n\n  public get birthtime(): Date {\n    return new Date(this.birthtimeMs);\n  }\n\n  /**\n   * Provides information about a particular entry in the file system.\n   * @param itemType Type of the item (FILE, DIRECTORY, SYMLINK, or SOCKET)\n   * @param size Size of the item in bytes. For directories/symlinks,\n   *   this is normally the size of the struct that represents the item.\n   * @param mode Unix-style file mode (e.g. 0o644)\n   * @param atimeMs time of last access, in milliseconds since epoch\n   * @param mtimeMs time of last modification, in milliseconds since epoch\n   * @param ctimeMs time of last time file status was changed, in milliseconds since epoch\n   * @param birthtimeMs time of file creation, in milliseconds since epoch\n   */\n  constructor(\n    itemType: FileType,\n    size: number,\n    mode?: number,\n    atimeMs?: number,\n    mtimeMs?: number,\n    ctimeMs?: number,\n    birthtimeMs?: number) {\n    this.size = size;\n    let currentTime = 0;\n    if (typeof(atimeMs) !== 'number') {\n      currentTime = Date.now();\n      atimeMs = currentTime;\n    }\n    if (typeof(mtimeMs) !== 'number') {\n      if (!currentTime) {\n        currentTime = Date.now();\n      }\n      mtimeMs = currentTime;\n    }\n    if (typeof(ctimeMs) !== 'number') {\n      if (!currentTime) {\n        currentTime = Date.now();\n      }\n      ctimeMs = currentTime;\n    }\n    if (typeof(birthtimeMs) !== 'number') {\n      if (!currentTime) {\n        currentTime = Date.now();\n      }\n      birthtimeMs = currentTime;\n    }\n    this.atimeMs = atimeMs;\n    this.ctimeMs = ctimeMs;\n    this.mtimeMs = mtimeMs;\n    this.birthtimeMs = birthtimeMs;\n\n    if (!mode) {\n      switch (itemType) {\n        case FileType.FILE:\n          this.mode = 0x1a4;\n          break;\n        case FileType.DIRECTORY:\n        default:\n          this.mode = 0x1ff;\n      }\n    } else {\n      this.mode = mode;\n    }\n    // number of 512B blocks allocated\n    this.blocks = Math.ceil(size / 512);\n    // Check if mode also includes top-most bits, which indicate the file's\n    // type.\n    if (this.mode < 0x1000) {\n      this.mode |= itemType;\n    }\n  }\n\n  public toBuffer(): Buffer {\n    const buffer = Buffer.alloc(32);\n    buffer.writeUInt32LE(this.size, 0);\n    buffer.writeUInt32LE(this.mode, 4);\n    buffer.writeDoubleLE(this.atime.getTime(), 8);\n    buffer.writeDoubleLE(this.mtime.getTime(), 16);\n    buffer.writeDoubleLE(this.ctime.getTime(), 24);\n    return buffer;\n  }\n\n  /**\n   * @return [Boolean] True if this item is a file.\n   */\n  public isFile(): boolean {\n    return (this.mode & 0xF000) === FileType.FILE;\n  }\n\n  /**\n   * @return [Boolean] True if this item is a directory.\n   */\n  public isDirectory(): boolean {\n    return (this.mode & 0xF000) === FileType.DIRECTORY;\n  }\n\n  /**\n   * @return [Boolean] True if this item is a symbolic link (only valid through lstat)\n   */\n  public isSymbolicLink(): boolean {\n    return (this.mode & 0xF000) === FileType.SYMLINK;\n  }\n\n  /**\n   * Change the mode of the file. We use this helper function to prevent messing\n   * up the type of the file, which is encoded in mode.\n   */\n  public chmod(mode: number): void {\n    this.mode = (this.mode & 0xF000) | mode;\n  }\n\n  // We don't support the following types of files.\n\n  public isSocket(): boolean {\n    return false;\n  }\n\n  public isBlockDevice(): boolean {\n    return false;\n  }\n\n  public isCharacterDevice(): boolean {\n    return false;\n  }\n\n  public isFIFO(): boolean {\n    return false;\n  }\n}\n"]}