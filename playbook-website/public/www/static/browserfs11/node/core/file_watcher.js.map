{"version":3,"file":"file_watcher.js","sourceRoot":"","sources":["../../../src/core/file_watcher.ts"],"names":[],"mappings":"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","sourcesContent":["// Typing info only.\nimport * as _fs from 'fs';\n\nimport Stats from './node_fs_stats';\n\nconst EventEmitter = require('events');\n\ninterface IWatchEntry {\n  filename: string;\n  watcher: any;\n  curr?: Stats;\n  recursive?: boolean;\n  persistent?: boolean;\n  callback?: ((event: string, filename: string) => any) | undefined;\n  fileCallback?: (curr: Stats, prev: Stats) => void;\n}\n\nexport class FileWatcher {\n  public triggerWatch(filename: string, event: 'change' | 'rename', newStats?: Stats) {\n    const validEntries = this.watchEntries.filter(entry => {\n      if (entry.filename === filename) {\n        return true;\n      }\n\n      if (entry.recursive && filename.startsWith(entry.filename)) {\n        return true;\n      }\n\n      return false;\n    });\n\n    validEntries.forEach(entry => {\n      if (entry.callback) {\n        entry.callback(event, filename);\n      }\n\n      const newStatsArg = newStats || entry.curr;\n      const oldStatsArg = entry.curr || newStats;\n      if (newStatsArg && oldStatsArg && entry.fileCallback) {\n        entry.fileCallback(newStatsArg, oldStatsArg);\n        entry.curr = newStatsArg;\n      }\n\n      entry.watcher.emit(event);\n\n      if (!entry.persistent) {\n        this.removeEntry(entry);\n      }\n    });\n  }\n\n  public watch(filename: string, listener?: (event: string, filename: string) => any): _fs.FSWatcher;\n  public watch(filename: string, options: { recursive?: boolean; persistent?: boolean; }, listener?: (event: string, filename: string) => any): _fs.FSWatcher;\n  public watch(filename: string, arg2: any, listener: (event: string, filename: string) => any = (() => {})): _fs.FSWatcher {\n    const watcher = new EventEmitter();\n    const watchEntry: IWatchEntry  = {\n      filename,\n      watcher,\n    };\n\n    watcher.close = () => {\n      this.removeEntry(watchEntry);\n    };\n\n\n    if (typeof arg2 === 'object') {\n      watchEntry.recursive = arg2.recursive;\n      watchEntry.persistent = arg2.persistent === undefined ? true : arg2.persistent;\n      watchEntry.callback = listener;\n    } else if (typeof arg2 === 'function') {\n      watchEntry.callback = arg2;\n    }\n\n    this.watchEntries.push(watchEntry);\n\n    return watchEntry.watcher;\n  }\n\n  public watchFile(curr: Stats, filename: string, listener: (curr: Stats, prev: Stats) => void): void;\n  public watchFile(curr: Stats, filename: string, options: { persistent?: boolean; interval?: number; }, listener: (curr: Stats, prev: Stats) => void): void;\n  public watchFile(curr: Stats, filename: string, arg2: any, listener: (curr: Stats, prev: Stats) => void = (() => {})): void {\n    const watcher = new EventEmitter();\n    const watchEntry: IWatchEntry  = {\n      filename,\n      watcher,\n      curr,\n    };\n\n    watcher.close = () => {\n      this.removeEntry(watchEntry);\n    };\n\n    if (typeof arg2 === 'object') {\n      watchEntry.recursive = arg2.recursive;\n      watchEntry.persistent = arg2.persistent === undefined ? true : arg2.persistent;\n      watchEntry.fileCallback = listener;\n    } else if (typeof arg2 === 'function') {\n      watchEntry.fileCallback = arg2;\n    }\n\n    this.watchEntries.push(watchEntry);\n\n    return watchEntry.watcher;\n  }\n\n  unwatchFile(filename: string, listener: (curr: Stats, prev: Stats) => void): any {\n    this.watchEntries = this.watchEntries.filter(entry => entry.filename !== filename && entry.fileCallback !== listener);\n  }\n\n  private watchEntries: IWatchEntry[] = [];\n\n  private removeEntry(watchEntry: IWatchEntry) {\n    this.watchEntries = this.watchEntries.filter(en => en !== watchEntry);\n  }\n}\n"]}