{"version":3,"file":"file_flag.js","sourceRoot":"","sources":["../../../src/core/file_flag.ts"],"names":[],"mappings":"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","sourcesContent":["import {ErrorCode, ApiError} from './api_error';\n\nexport enum ActionType {\n  // Indicates that the code should not do anything.\n  NOP = 0,\n  // Indicates that the code should throw an exception.\n  THROW_EXCEPTION = 1,\n  // Indicates that the code should truncate the file, but only if it is a file.\n  TRUNCATE_FILE = 2,\n  // Indicates that the code should create the file.\n  CREATE_FILE = 3\n}\n\n/**\n * Represents one of the following file flags. A convenience object.\n *\n * * `'r'` - Open file for reading. An exception occurs if the file does not exist.\n * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.\n * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.\n * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.\n * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n * * `'wx'` - Like 'w' but opens the file in exclusive mode.\n * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.\n * * `'a'` - Open file for appending. The file is created if it does not exist.\n * * `'ax'` - Like 'a' but opens the file in exclusive mode.\n * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.\n * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.\n *\n * Exclusive mode ensures that the file path is newly created.\n */\nexport class FileFlag {\n  // Contains cached FileMode instances.\n  private static flagCache: { [mode: string]: FileFlag } = {};\n  // Array of valid mode strings.\n  private static validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];\n\n  /**\n   * Get an object representing the given file flag.\n   * @param modeStr The string representing the flag\n   * @return The FileFlag object representing the flag\n   * @throw when the flag string is invalid\n   */\n  public static getFileFlag(flagStr: string): FileFlag {\n    // Check cache first.\n    if (FileFlag.flagCache.hasOwnProperty(flagStr)) {\n      return FileFlag.flagCache[flagStr];\n    }\n    return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);\n  }\n\n  private flagStr: string;\n  /**\n   * This should never be called directly.\n   * @param modeStr The string representing the mode\n   * @throw when the mode string is invalid\n   */\n  constructor(flagStr: string) {\n    this.flagStr = flagStr;\n    if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {\n      throw new ApiError(ErrorCode.EINVAL, \"Invalid flag: \" + flagStr);\n    }\n  }\n\n  /**\n   * Get the underlying flag string for this flag.\n   */\n  public getFlagString(): string {\n    return this.flagStr;\n  }\n\n  /**\n   * Returns true if the file is readable.\n   */\n  public isReadable(): boolean {\n    return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;\n  }\n  /**\n   * Returns true if the file is writeable.\n   */\n  public isWriteable(): boolean {\n    return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;\n  }\n  /**\n   * Returns true if the file mode should truncate.\n   */\n  public isTruncating(): boolean {\n    return this.flagStr.indexOf('w') !== -1;\n  }\n  /**\n   * Returns true if the file is appendable.\n   */\n  public isAppendable(): boolean {\n    return this.flagStr.indexOf('a') !== -1;\n  }\n  /**\n   * Returns true if the file is open in synchronous mode.\n   */\n  public isSynchronous(): boolean {\n    return this.flagStr.indexOf('s') !== -1;\n  }\n  /**\n   * Returns true if the file is open in exclusive mode.\n   */\n  public isExclusive(): boolean {\n    return this.flagStr.indexOf('x') !== -1;\n  }\n  /**\n   * Returns one of the static fields on this object that indicates the\n   * appropriate response to the path existing.\n   */\n  public pathExistsAction(): ActionType {\n    if (this.isExclusive()) {\n      return ActionType.THROW_EXCEPTION;\n    } else if (this.isTruncating()) {\n      return ActionType.TRUNCATE_FILE;\n    } else {\n      return ActionType.NOP;\n    }\n  }\n  /**\n   * Returns one of the static fields on this object that indicates the\n   * appropriate response to the path not existing.\n   */\n  public pathNotExistsAction(): ActionType {\n    if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {\n      return ActionType.CREATE_FILE;\n    } else {\n      return ActionType.THROW_EXCEPTION;\n    }\n  }\n}\n"]}