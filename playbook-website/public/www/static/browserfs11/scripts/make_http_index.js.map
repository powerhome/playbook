{"version":3,"file":"make_http_index.js","sourceRoot":"","sources":["../../scripts/make_http_index.ts"],"names":[],"mappings":"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","sourcesContent":["#! /usr/bin/env node\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst parser = require('gitignore-parser');\n\nconst symLinks: {[dev: number]: {[ino: number]: boolean}} = {};\nconst ignoreFiles = ['.git'];\n\ntype FileTree = {[name: string]: FileTree | null};\n\nlet vscodeignores: {[path: string]: { denies: (p: string) => boolean } | null} = {}\n\nfunction rdSync(dpath: string, tree: FileTree): FileTree {\n  const files = fs.readdirSync(dpath);\n\n  if (files.indexOf('.vscodeignore') > -1) {\n    vscodeignores[dpath] = parser.compile(fs.readFileSync(path.join(dpath, '.vscodeignore'), 'utf8'));\n  }\n\n  const vscodeignorePath = Object.keys(vscodeignores).find(f => dpath.indexOf(f) === 0);\n  const vscodeignore = vscodeignorePath ? vscodeignores[vscodeignorePath] : undefined;\n\n  files.forEach((file) => {\n    // ignore non-essential directories / files\n    if (ignoreFiles.indexOf(file) !== -1 || file[0] === '.') {\n      return;\n    }\n    const fpath = `${dpath}/${file}`;\n\n    if (vscodeignore && vscodeignore.denies(fpath.replace(vscodeignorePath!, ''))) {\n      return;\n    }\n    try {\n      // Avoid infinite loops.\n      const lstat = fs.lstatSync(fpath)\n      if (lstat.isSymbolicLink()) {\n        if (!symLinks[lstat.dev]) {\n          symLinks[lstat.dev] = {};\n        }\n        // Ignore if we've seen it before\n        if (symLinks[lstat.dev][lstat.ino]) {\n          return;\n        }\n        symLinks[lstat.dev][lstat.ino] = true;\n      }\n      const fstat = fs.statSync(fpath);\n      if (fstat.isDirectory()) {\n        const child = tree[file] = {}\n        rdSync(fpath, child)\n      } else {\n        tree[file] = null\n      }\n    } catch (e) {\n      // Ignore and move on.\n    }\n  });\n  return tree\n}\n\nconst fsListing = JSON.stringify(rdSync(process.cwd(), {}));\nif (process.argv.length === 3) {\n  const fname = process.argv[2];\n  let parent = path.dirname(fname);\n  while (!fs.existsSync(parent)) {\n    fs.mkdirSync(parent);\n    parent = path.dirname(parent);\n  }\n  fs.writeFileSync(fname, fsListing, { encoding: 'utf8' });\n} else {\n  console.log(fsListing);\n}\n"]}