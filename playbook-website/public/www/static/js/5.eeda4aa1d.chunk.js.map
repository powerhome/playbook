{"version":3,"sources":["webpack:////Users/jasper.furniss/codesandbox-client/node_modules/@vue/compiler-sfc/dist sync","webpack:///../vue3-browser-compiler/lib/index.js","webpack:///../vue3-transpiler/lib/cssModules.js","webpack:///../vue3-transpiler/lib/formatError.js","webpack:///../vue3-transpiler/lib/hotReload.js","webpack:///../vue3-transpiler/lib/index.js","webpack:///../vue3-transpiler/lib/select.js","webpack:///../vue3-transpiler/lib/transpilers/vue-loader.js","webpack:///../vue3-transpiler/lib/stylePostLoader.js","webpack:///../vue3-transpiler/lib/transpilers/style-post-loader.js","webpack:///../vue3-transpiler/lib/templateLoader.js","webpack:///../vue3-transpiler/lib/transpilers/template-loader.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Object","defineProperty","value","__exportStar","genCSSModulesCode","index","request","moduleName","needsHotReload","styleVar","name","formatError","err","source","file","loc","filePath","start","line","column","codeframe","offset","end","message","genHotReloadCode","templateRequest","genTemplateHotReloadCode","loader","loaderContext","getLoaderQuery","lang","vueQuery","path","stringifyRequest","r","target","sourceMap","resourceQuery","resourcePath","rawQuery","slice","incomingQuery","parse","options","getOptions","isServer","descriptor","errors","filename","length","forEach","emitError","transpiledCode","type","rawShortFilePath","relative","replace","shortFilePath","hasScoped","styles","some","s","scoped","script","template","hotReload","scriptImport","scriptSetup","scriptCompiled","babelParserPlugins","src","query","attrsToQuery","attrs","importers","scriptRequest","templateImport","renderFnName","bindings","JSON","stringify","undefined","stylesCode","hasCSSModules","style","i","attrsQuery","styleRequest","filter","Boolean","join","customBlocks","map","block","blockTypeQuery","escape","issuerQuery","encodeURIComponent","ignoreList","langFallback","includes","String","convertSourceMapToInline","prefix","postfix","Buffer","from","toString","selectBlock","content","Number","super","trim","stylePostLoader","transpiler","scopeId","compiler","compiled","inMap","ssr","compilerOptions","assign","bindingMetadata","transformAssetUrls","tips","tip","warning","fileName","severity","lineNumber","columnNumber","emitWarning","templateLoader"],"mappings":"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","file":"static/js/5.eeda4aa1d.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../node_modules/@vue/compiler-sfc/dist sync recursive\";","Object.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"@vue/compiler-sfc\"), exports);\n","export function genCSSModulesCode(id, index, request, moduleName, needsHotReload) {\n    const styleVar = `style${index}`;\n    let code = `\\nimport ${styleVar} from ${request}`;\n    // inject variable\n    const name = typeof moduleName === 'string' ? moduleName : '$style';\n    code += `\\ncssModules[\"${name}\"] = ${styleVar}`;\n    if (needsHotReload) {\n        code += `\nif (module.hot) {\n  module.hot.accept(${request}, () => {\n    cssModules[\"${name}\"] = ${styleVar}\n    __VUE_HMR_RUNTIME__.rerender(\"${id}\")\n  })\n}`;\n    }\n    return code;\n}\n","import { generateCodeFrame } from 'vue3-browser-compiler';\nexport function formatError(err, source, file) {\n    const loc = err.loc;\n    if (!loc) {\n        return;\n    }\n    const locString = `:${loc.start.line}:${loc.start.column}`;\n    const filePath = `at ${file}${locString}`;\n    const codeframe = generateCodeFrame(source, loc.start.offset, loc.end.offset);\n    err.message = `\\n${`VueCompilerError: ${err.message}`}\\n${filePath}\\n${codeframe}\\n`;\n}\n","// __VUE_HMR_RUNTIME__ is injected to global scope by @vue/runtime-core\nexport function genHotReloadCode(id, templateRequest) {\n    return `\n/* hot reload */\nif (module.hot) {\n  script.__hmrId = \"${id}\"\n  const api = __VUE_HMR_RUNTIME__\n  module.hot.accept()\n  if (!api.createRecord('${id}', script)) {\n    api.reload('${id}', script)\n  }\n  ${templateRequest ? genTemplateHotReloadCode(id, templateRequest) : ''}\n}\n`;\n}\nfunction genTemplateHotReloadCode(id, request) {\n    return `\n  module.hot.accept(${request}, () => {\n    api.rerender('${id}', render)\n  })\n`;\n}\n","import path from 'path';\nimport qs from 'querystring';\nimport hash from 'hash-sum';\nimport loaderUtils from 'sandpack-core/lib/transpiler/utils/loader-utils';\nimport { parse, compileScript, } from 'vue3-browser-compiler';\nimport { selectBlock } from './select';\nimport { genHotReloadCode } from './hotReload';\nimport { genCSSModulesCode } from './cssModules';\nimport { formatError } from './formatError';\nimport vueTemplateLoader from './transpilers/template-loader';\nimport vueStylePostLoader from './transpilers/style-post-loader';\nqs.escape = encodeURIComponent;\nexport default function loader(source, loaderContext) {\n    function getLoaderQuery(lang, vueQuery) {\n        // !style-loader!css-loader\n        const query = lang\n            ? loaderContext.getLoaderQuery({\n                path: `test.${lang}`,\n                code: '',\n            })\n            : '';\n        return `${query}!vue-loader${vueQuery}`;\n    }\n    const stringifyRequest = (r) => loaderUtils.stringifyRequest(loaderContext, r);\n    const { target, sourceMap, resourceQuery } = loaderContext;\n    const rootContext = '/';\n    const resourcePath = loaderContext.path;\n    const rawQuery = resourceQuery.slice(1);\n    const incomingQuery = qs.parse(rawQuery);\n    const options = (loaderUtils.getOptions(loaderContext) ||\n        {});\n    const isServer = target === 'node';\n    const isProduction = false;\n    const { descriptor, errors } = parse(source, {\n        filename: resourcePath,\n        sourceMap,\n    });\n    if (errors.length) {\n        errors.forEach(err => {\n            formatError(err, source, resourcePath);\n            loaderContext.emitError(err);\n        });\n        return { transpiledCode: `` };\n    }\n    // if the query has a type field, this is a language block request\n    // e.g. foo.vue?type=template&id=xxxxx\n    // and we will return early\n    if (incomingQuery.type) {\n        return selectBlock(descriptor, incomingQuery);\n    }\n    // module id for scoped CSS & hot-reload\n    const rawShortFilePath = path\n        .relative(rootContext || process.cwd(), resourcePath)\n        .replace(/^(\\.\\.[/\\\\])+/, '');\n    const shortFilePath = rawShortFilePath.replace(/\\\\/g, '/') + resourceQuery;\n    const id = hash(isProduction ? shortFilePath + '\\n' + source : shortFilePath);\n    // feature information\n    const hasScoped = descriptor.styles.some(s => s.scoped);\n    const needsHotReload = !isServer &&\n        !isProduction &&\n        !!(descriptor.script || descriptor.template) &&\n        options.hotReload !== false;\n    // script\n    let script;\n    let scriptImport = `const script = {}`;\n    if (descriptor.script || descriptor.scriptSetup) {\n        try {\n            // eslint-disable-next-line no-multi-assign\n            script = descriptor.scriptCompiled = compileScript(descriptor, {\n                babelParserPlugins: options.babelParserPlugins,\n                id,\n            });\n        }\n        catch (e) {\n            loaderContext.emitError(e);\n        }\n        if (script) {\n            const src = script.src || resourcePath;\n            const attrsQuery = attrsToQuery(script.attrs, 'js');\n            const query = `?vue&type=script${attrsQuery}${resourceQuery}`;\n            const importers = getLoaderQuery(script.lang || 'js', query);\n            const scriptRequest = stringifyRequest(importers + '!' + src);\n            scriptImport =\n                `import script from ${scriptRequest}\\n` +\n                    // support named exports\n                    `export * from ${scriptRequest}`;\n        }\n    }\n    // template\n    let templateImport = ``;\n    let templateRequest;\n    const renderFnName = isServer ? `ssrRender` : `render`;\n    if (descriptor.template) {\n        const src = descriptor.template.src || resourcePath;\n        const idQuery = `&id=${id}`;\n        const scopedQuery = hasScoped ? `&scoped=true` : ``;\n        const attrsQuery = attrsToQuery(descriptor.template.attrs);\n        const bindingsQuery = (script === null || script === void 0 ? void 0 : script.bindings)\n            ? `&bindings=${JSON.stringify(script.bindings)}`\n            : ``;\n        const query = `?vue&type=template${idQuery}${scopedQuery}${attrsQuery}${bindingsQuery}${resourceQuery}`;\n        const importers = `!babel-loader!${vueTemplateLoader.name}${getLoaderQuery(undefined, query)}`;\n        templateRequest = stringifyRequest(importers + '!' + src);\n        templateImport = `import { ${renderFnName} } from ${templateRequest};`;\n    }\n    // styles\n    let stylesCode = ``;\n    let hasCSSModules = false;\n    if (descriptor.styles.length) {\n        descriptor.styles.forEach((style, i) => {\n            const src = style.src || resourcePath;\n            const attrsQuery = attrsToQuery(style.attrs, 'css');\n            // make sure to only pass id when necessary so that we don't inject\n            // duplicate tags when multiple components import the same css file\n            const idQuery = style.scoped ? `&id=${id}` : ``;\n            const query = `?vue&type=style&index=${i}${idQuery}${attrsQuery}${resourceQuery}`;\n            const importers = getLoaderQuery(style.lang || 'css', query);\n            const styleRequest = stringifyRequest(\n            // Add the vue-style-post-loader after style-loader\n            importers.replace(/!style-loader(.*?)!/, `!style-loader$1!${vueStylePostLoader.name}!`) +\n                '!' +\n                src);\n            if (style.module) {\n                if (!hasCSSModules) {\n                    stylesCode += `\\nconst cssModules = script.__cssModules = {}`;\n                    hasCSSModules = true;\n                }\n                stylesCode += genCSSModulesCode(id, i, styleRequest, style.module, needsHotReload);\n            }\n            else {\n                stylesCode += `\\nimport ${styleRequest}`;\n            }\n            // TODO SSR critical CSS collection\n        });\n    }\n    let code = [\n        templateImport,\n        scriptImport,\n        stylesCode,\n        templateImport ? `script.${renderFnName} = ${renderFnName}` : ``,\n    ]\n        .filter(Boolean)\n        .join('\\n');\n    // attach scope Id for runtime use\n    if (hasScoped) {\n        code += `\\nscript.__scopeId = \"data-v-${id}\"`;\n    }\n    if (needsHotReload) {\n        code += genHotReloadCode(id, templateRequest);\n    }\n    // Expose filename. This is used by the devtools and Vue runtime warnings.\n    if (!isProduction) {\n        // Expose the file's full path in development, so that it can be opened\n        // from the devtools.\n        code += `\\nscript.__file = ${JSON.stringify(rawShortFilePath.replace(/\\\\/g, '/'))}`;\n    }\n    else if (options.exposeFilename) {\n        // Libraries can opt-in to expose their components' filenames in production builds.\n        // For security reasons, only expose the file's basename in production.\n        code += `\\nscript.__file = ${JSON.stringify(path.basename(resourcePath))}`;\n    }\n    // custom blocks\n    if (descriptor.customBlocks && descriptor.customBlocks.length) {\n        code += `\\n/* custom blocks */\\n`;\n        code +=\n            descriptor.customBlocks\n                .map((block, i) => {\n                const src = block.attrs.src || resourcePath;\n                const attrsQuery = attrsToQuery(block.attrs);\n                const blockTypeQuery = `&blockType=${qs.escape(block.type)}`;\n                const issuerQuery = block.attrs.src\n                    ? `&issuerPath=${qs.escape(resourcePath)}`\n                    : '';\n                const query = `?vue&type=custom&index=${i}${blockTypeQuery}${issuerQuery}${attrsQuery}${resourceQuery}`;\n                return (`import block${i} from ${stringifyRequest(src + query)}\\n` +\n                    `if (typeof block${i} === 'function') block${i}(script)`);\n            })\n                .join(`\\n`) + `\\n`;\n    }\n    // finalize\n    code += `\\n\\nexport default script`;\n    return { transpiledCode: code };\n}\n// these are built-in query parameters so should be ignored\n// if the user happen to add them as attrs\nconst ignoreList = ['id', 'index', 'src', 'type'];\nfunction attrsToQuery(attrs, langFallback) {\n    let query = ``;\n    for (const name in attrs) {\n        const value = attrs[name];\n        if (!ignoreList.includes(name)) {\n            query += `&${qs.escape(name)}=${value ? qs.escape(String(value)) : ``}`;\n        }\n    }\n    if (langFallback && !(`lang` in attrs)) {\n        query += `&lang=${langFallback}`;\n    }\n    return query;\n}\n","function convertSourceMapToInline(sourceMap, prefix = '//#', postfix = '') {\n    if (!sourceMap) {\n        return '';\n    }\n    return `\\n${prefix} sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(sourceMap), 'utf-8').toString('base64')}${postfix}`;\n}\nexport function selectBlock(descriptor, query) {\n    // template\n    if (query.type === `template`) {\n        // if we are receiving a query with type it can only come from a *.vue file\n        // that contains that block, so the block is guaranteed to exist.\n        const template = descriptor.template;\n        // Deletion `template` tag\n        if (!template) {\n            return { transpiledCode: '' };\n        }\n        return {\n            transpiledCode: template.content,\n            sourceMap: template.map,\n        };\n    }\n    // script\n    if (query.type === `script`) {\n        // FIXME: #1723\n        // I still don't know when & why `scriptCompiled` would be empty\n        // need to work out a better fix later\n        const script = descriptor.scriptCompiled || descriptor.script;\n        // Deletion `script` tag\n        if (!script) {\n            return { transpiledCode: '' };\n        }\n        return {\n            transpiledCode: script.content + convertSourceMapToInline(script.map),\n            sourceMap: script.map,\n        };\n    }\n    // styles\n    if (query.type === `style` && query.index != null) {\n        const style = descriptor.styles[Number(query.index)];\n        // Deletion `style` tag\n        if (!style) {\n            return { transpiledCode: '' };\n        }\n        return {\n            transpiledCode: style.content + convertSourceMapToInline(style.map, '/*#', '*/'),\n            sourceMap: style.map,\n        };\n    }\n    // custom\n    if (query.type === 'custom' && query.index != null) {\n        const block = descriptor.customBlocks[Number(query.index)];\n        return { transpiledCode: block.content, sourceMap: block.map };\n    }\n    return { transpiledCode: '' };\n}\n","import { Transpiler } from 'sandpack-core';\nimport loader from '../';\n// This is the most advanced compiler, I wanted to get it working in sync first,\n// but will eventually move to async.\nclass VueV3Transpiler extends Transpiler {\n    constructor() {\n        super('vue-loader');\n    }\n    doTranspilation(code, loaderContext) {\n        return loader(code, loaderContext);\n    }\n}\nconst transpiler = new VueV3Transpiler();\nexport { VueV3Transpiler };\nexport default transpiler;\n","import qs from 'querystring';\nimport { compileStyle } from 'vue3-browser-compiler';\n// This is a post loader that handles scoped CSS transforms.\n// Injected right before css-loader by the global pitcher (../pitch.js)\n// for any <style scoped> selection requests initiated from within vue files.\nconst StylePostLoader = function (source, loaderContext) {\n    const inMap = undefined;\n    const query = qs.parse(loaderContext.resourceQuery.slice(1));\n    const { code, errors } = compileStyle({\n        source: source,\n        filename: loaderContext.path,\n        id: `data-v-${query.id}`,\n        map: inMap,\n        scoped: !!query.scoped,\n        trim: true,\n    });\n    if (errors.length) {\n        throw errors[0];\n    }\n    else {\n        return {\n            transpiledCode: code,\n        };\n    }\n};\nexport default StylePostLoader;\n","import { Transpiler } from 'sandpack-core';\nimport stylePostLoader from '../stylePostLoader';\n// This is the most advanced compiler, I wanted to get it working in sync first,\n// but will eventually move to async.\nclass VueV3StylePostLoader extends Transpiler {\n    constructor() {\n        super('vue-style-post-loader');\n    }\n    doTranspilation(code, loaderContext) {\n        return stylePostLoader(code, loaderContext);\n    }\n}\nconst transpiler = new VueV3StylePostLoader();\nexport { VueV3StylePostLoader };\nexport default transpiler;\n","import qs from 'querystring';\nimport loaderUtils from 'sandpack-core/lib/transpiler/utils/loader-utils';\nimport { compileTemplate } from 'vue3-browser-compiler';\nimport { formatError } from './formatError';\n// Loader that compiles raw template into JavaScript functions.\n// This is injected by the global pitcher (../pitch) for template\n// selection requests initiated from vue files.\nfunction TemplateLoader(source, loaderContext) {\n    // eslint-disable-next-line no-param-reassign\n    source = String(source);\n    const inMap = undefined;\n    // although this is not the main vue-loader, we can get access to the same\n    // vue-loader options because we've set an ident in the plugin and used that\n    // ident to create the request for this loader in the pitcher.\n    const options = (loaderUtils.getOptions(loaderContext) ||\n        {});\n    const query = qs.parse(loaderContext.resourceQuery.slice(1));\n    const id = `${query.id}`;\n    const scopeId = query.scoped ? `data-v-${id}` : null;\n    let compiler;\n    if (typeof options.compiler === 'string') {\n        // compiler = require(options.compiler);\n        throw new Error(\"Setting compiler via string doesn't work in CodeSandbox\");\n    }\n    else {\n        compiler = options.compiler;\n    }\n    const compiled = compileTemplate({\n        id,\n        source,\n        inMap,\n        filename: loaderContext.path,\n        ssr: loaderContext.target === 'node',\n        compiler,\n        compilerOptions: Object.assign(Object.assign({}, options.compilerOptions), { scopeId, bindingMetadata: typeof query.bindings === 'string' ? JSON.parse(query.bindings) : {} }),\n        transformAssetUrls: options.transformAssetUrls || true,\n    });\n    // tips\n    if (compiled.tips.length) {\n        compiled.tips.forEach(tip => {\n            const warning = {\n                message: tip,\n                fileName: loaderContext.path,\n                source: 'Vue Template Compiler',\n                severity: 'notice',\n                lineNumber: 0,\n                columnNumber: 0,\n            };\n            loaderContext.emitWarning(warning);\n        });\n    }\n    // errors\n    if (compiled.errors && compiled.errors.length) {\n        compiled.errors.forEach(err => {\n            if (typeof err === 'string') {\n                loaderContext.emitError(new Error(err));\n            }\n            else {\n                formatError(err, \n                // @ts-ignore\n                inMap ? inMap.sourcesContent[0] : source, loaderContext.path);\n                loaderContext.emitError(err);\n            }\n        });\n    }\n    const { code, map } = compiled;\n    // loaderContext.callback(null, code, map);\n    return { transpiledCode: code, sourceMap: map };\n}\nexport default TemplateLoader;\n","import { Transpiler } from 'sandpack-core';\nimport templateLoader from '../templateLoader';\nclass VueV3TemplateLoader extends Transpiler {\n    constructor() {\n        super('vue-template-loader');\n    }\n    doTranspilation(code, loaderContext) {\n        return templateLoader(code, loaderContext);\n    }\n}\nconst transpiler = new VueV3TemplateLoader();\nexport { VueV3TemplateLoader };\nexport default transpiler;\n"],"sourceRoot":""}