{"version":3,"sources":["webpack:///./src/sandbox/eval/transpilers/postcss/loader.ts","webpack:///./src/sandbox/eval/utils/is-dependency-path.ts"],"names":["resolveCSSFile","_x","_x2","_x3","_resolveCSSFile","apply","arguments","_asyncToGenerator","loaderContext","path","basePath","isDependencyPath","pkgJson","resolveTranspiledModuleAsync","join","parsedPkg","JSON","parse","module","code","style","fullPath","e","charAt","_ref","plugins","postcssImportPlugin","resolve","_ref2","id","root","_x6","_x7","load","_ref3","filename","_x8","options","to","from","map","inline","annotation","result","postcss","process","undefined","messages","Promise","all","_ref4","m","type","addDependency","file","_x9","toJSON","transpiledCode","css","sourceMap","_x4","_x5","p","test"],"mappings":"icAGyE,SAI1DA,EAAcC,EAAAC,EAAAC,GAAA,OAAAC,EAAAC,MAAC,KAADC,WAAA,SAAAF,IA6B5B,OA7B4BA,EAAAG,KAA7B,UACEC,EACAC,EACAC,GAIA,GAFqBC,YAAiBF,GAEpB,CAEhB,IACE,MAAMG,QAAgBJ,EAAcK,6BAClCC,eAAKL,EAAM,iBAEPM,EAAYC,KAAKC,MAAML,EAAQM,OAAOC,MAE5C,GAAIJ,EAAUK,MAAO,CACnB,MAAMC,EAAWP,eAAKL,EAAMM,EAAUK,OAEtC,OAAOZ,EAAcK,6BAA6BQ,IAEpD,MAAOC,IAIT,OAAOd,EAAcK,6BAA6BJ,GAGpD,MAAMY,EAA8B,MAAnBZ,EAAKc,OAAO,GAAad,EAAOK,eAAKJ,EAAUD,GAChE,OAAOD,EAAcK,6BAA6BQ,OACnDhB,MAAA,KAAAC,WAuDA,SAAAkB,IAAA,OAAAA,EAAAjB,KArDc,UACbY,EACAX,GAEA,MAAMiB,EAAU,CACdC,IAAoB,CAClBC,SAAOC,EAAArB,KAAE,UAAOsB,EAAYC,GAC1B,IAGE,aAFqB9B,EAAeQ,EAAeqB,EAAIC,IAEzCZ,OAAOT,KACrB,MAAOa,GACP,OAAO,SAEV,SAAAS,EAAAC,GAAA,OAAAJ,EAAAvB,MAAA,KAAAC,aACD2B,MAAIC,EAAA3B,KAAE,UAAO4B,GAKX,aAJsB3B,EAAcK,6BAClCsB,IAGajB,OAAOC,QACvB,SAAAiB,GAAA,OAAAF,EAAA7B,MAAA,KAAAC,gBANI,IAAD4B,EATGN,EAmBX,MAAMS,EAA0B,CAC9BC,GAAI9B,EAAcC,KAClB8B,KAAM/B,EAAcC,KACpB+B,IAAK,CACHC,QAAQ,EACRC,YAAY,IAKVC,QAAeC,IAAQnB,GAASoB,QAC3B,OAAT1B,OAAgB2B,EAAY3B,EAC5BkB,GAEF,GAAIM,EAAOI,SAAU,CACnB,MAAMA,EAAWJ,EAAOI,eAClBC,QAAQC,IACZF,EAASP,IAAG,eAAAU,EAAA3C,KAAC,UAAM4C,GACF,eAAXA,EAAEC,aACE5C,EAAc6C,cAAcF,EAAEG,UAEvC,gBAAAC,GAAA,OAAAL,EAAA7C,MAAA,KAAAC,YAJW,KAQhB,MAAMkC,EAAMG,EAAOH,KAAOG,EAAOH,IAAIgB,SAErC,MAAO,CAAEC,eAAgBd,EAAOe,IAAKC,UAAWnB,OACjDnC,MAAA,KAAAC,WArDc,mBAAfsD,EAAAC,GAAA,OAAArC,EAAAnB,MAAA,KAAAC,a,8ECtCA,kCAAO,MAAMK,EAAoBmD,GAAc,eAAeC,KAAKD,I","file":"static/js/postcss-compiler.4310b8556.chunk.js","sourcesContent":["import postcss, { ProcessOptions } from 'postcss';\nimport postcssImportPlugin from 'postcss-import';\nimport { join } from 'path';\nimport { isDependencyPath } from 'sandbox/eval/utils/is-dependency-path';\n\nimport { LoaderContext, TranspiledModule } from 'sandpack-core';\n\nasync function resolveCSSFile(\n  loaderContext: LoaderContext,\n  path: string,\n  basePath: string\n): Promise<TranspiledModule> {\n  const isDependency = isDependencyPath(path);\n\n  if (isDependency) {\n    // First try to resolve the package.json, in case it has a style field\n    try {\n      const pkgJson = await loaderContext.resolveTranspiledModuleAsync(\n        join(path, 'package.json')\n      );\n      const parsedPkg = JSON.parse(pkgJson.module.code);\n\n      if (parsedPkg.style) {\n        const fullPath = join(path, parsedPkg.style);\n\n        return loaderContext.resolveTranspiledModuleAsync(fullPath);\n      }\n    } catch (e) {\n      /* Move to step 2 */\n    }\n\n    return loaderContext.resolveTranspiledModuleAsync(path);\n  }\n\n  const fullPath = path.charAt(0) === '/' ? path : join(basePath, path);\n  return loaderContext.resolveTranspiledModuleAsync(fullPath);\n}\n\nexport default async function (\n  code: string,\n  loaderContext: LoaderContext\n): Promise<{ transpiledCode: string; sourceMap: any }> {\n  const plugins = [\n    postcssImportPlugin({\n      resolve: async (id: string, root: string) => {\n        try {\n          const result = await resolveCSSFile(loaderContext, id, root);\n\n          return result.module.path;\n        } catch (e) {\n          return null;\n        }\n      },\n      load: async (filename: string) => {\n        const tModule = await loaderContext.resolveTranspiledModuleAsync(\n          filename\n        );\n\n        return tModule.module.code;\n      },\n    }),\n  ];\n\n  const options: ProcessOptions = {\n    to: loaderContext.path,\n    from: loaderContext.path,\n    map: {\n      inline: true,\n      annotation: true,\n    },\n  };\n\n  // Explicitly give undefined if code is null, otherwise postcss crashes\n  const result = await postcss(plugins).process(\n    code === null ? undefined : code,\n    options\n  );\n  if (result.messages) {\n    const messages = result.messages as any[];\n    await Promise.all(\n      messages.map(async m => {\n        if (m.type === 'dependency') {\n          await loaderContext.addDependency(m.file);\n        }\n      })\n    );\n  }\n\n  const map = result.map && result.map.toJSON();\n\n  return { transpiledCode: result.css, sourceMap: map };\n}\n","export const isDependencyPath = (p: string) => /^(\\w|@\\w|@-)/.test(p);\n"],"sourceRoot":""}