{"version":3,"sources":["webpack:///./src/sandbox/eval/transpilers/vue/v2/parser.js","webpack:///./src/sandbox/eval/transpilers/vue/v2/selector/loader.ts"],"names":["compiler","require","cache","hash","SourceMapGenerator","splitRE","emptyRE","generateSourceMap","filename","source","generated","sourceRoot","map","setSourceContent","split","forEach","line","index","test","addMapping","original","column","toJSON","module","exports","content","needMap","cacheKey","filenameWithHash","output","get","parseComponent","pad","script","src","styles","style","set","code","loaderContext","query","options","context","path","basename","substring","lastIndexOf","extname","dirname","relative","part","parse","bustCache","type","Array","isArray","Promise","resolve","transpiledCode"],"mappings":"4HACA,MAAMA,EAAWC,EAAQ,uDACnBC,EAAQD,EAAQ,8BAARA,CAAqB,KAC7BE,EAAOF,EAAQ,2CACfG,EAAqBH,EAAQ,+CAAcG,mBAE3CC,EAAU,SACVC,EAAU,iBAmChB,SAASC,EAAkBC,EAAUC,EAAQC,EAAWC,GACtD,MAAMC,EAAM,IAAIR,EAAmB,CAAEO,eAiBrC,OAhBAC,EAAIC,iBAAiBL,EAAUC,GAC/BC,EAAUI,MAAMT,GAASU,QAAQ,CAACC,EAAMC,KACjCX,EAAQY,KAAKF,IAChBJ,EAAIO,WAAW,CACbV,OAAQD,EACRY,SAAU,CACRJ,KAAMC,EAAQ,EACdI,OAAQ,GAEVX,UAAW,CACTM,KAAMC,EAAQ,EACdI,OAAQ,OAKTT,EAAIU,SAnDbC,EAAOC,QAAU,SAASC,EAASjB,EAAUkB,EAASf,GACpD,MAAMgB,EAAWxB,EAAKK,EAAWiB,GAE3BG,EAAmBpB,EAAW,IAAMmB,EAC1C,IAAIE,EAAS3B,EAAM4B,IAAIH,GACvB,OAAIE,IACJA,EAAS7B,EAAS+B,eAAeN,EAAS,CAAEO,IAAK,SAC7CN,IACEG,EAAOI,SAAWJ,EAAOI,OAAOC,MAClCL,EAAOI,OAAOrB,IAAML,EAClBqB,EACAH,EACAI,EAAOI,OAAOR,QACdd,IAGAkB,EAAOM,QACTN,EAAOM,OAAOpB,QAAQqB,IACfA,EAAMF,MACTE,EAAMxB,IAAML,EACVqB,EACAH,EACAW,EAAMX,QACNd,OAMVT,EAAMmC,IAAIV,EAAUE,GACbA,K,wFCvCT,uIAIe,mBAAUS,EAAcC,GACrC,MAAMC,EAAQD,EAAcE,QACpBC,EAAYF,EAAZE,QACR,IAAIlC,EAAWmC,IAAKC,SAASL,EAAcI,MAC3CnC,EACEA,EAASqC,UAAU,EAAGrC,EAASsC,YAAYH,IAAKI,QAAQvC,KACxD,OACF,MAAMG,EAAagC,IAAKK,QAAQL,IAAKM,SAASP,EAASH,EAAcI,OAErE,IAAIO,EADUC,IAAMb,EAAM9B,GAAU,EAAOG,EAAY6B,EAAMY,WAC5CZ,EAAMa,MAKvB,OAJIC,MAAMC,QAAQL,KAChBA,EAAOA,EAAKV,EAAMvB,QAGbuC,QAAQC,QAAQ,CAAEC,eAAgBR,EAAOA,EAAKzB,QAAU","file":"static/js/vue-selector.91b0cc6f0.chunk.js","sourcesContent":["/* eslint-disable */\nconst compiler = require('vue-template-compiler');\nconst cache = require('lru-cache')(100);\nconst hash = require('hash-sum');\nconst SourceMapGenerator = require('source-map').SourceMapGenerator;\n\nconst splitRE = /\\r?\\n/g;\nconst emptyRE = /^(?:\\/\\/)?\\s*$/;\n\nmodule.exports = function(content, filename, needMap, sourceRoot) {\n  const cacheKey = hash(filename + content);\n  // source-map cache busting for hot-reloadded modules\n  const filenameWithHash = filename + '?' + cacheKey;\n  let output = cache.get(cacheKey);\n  if (output) return output;\n  output = compiler.parseComponent(content, { pad: 'line' });\n  if (needMap) {\n    if (output.script && !output.script.src) {\n      output.script.map = generateSourceMap(\n        filenameWithHash,\n        content,\n        output.script.content,\n        sourceRoot\n      );\n    }\n    if (output.styles) {\n      output.styles.forEach(style => {\n        if (!style.src) {\n          style.map = generateSourceMap(\n            filenameWithHash,\n            content,\n            style.content,\n            sourceRoot\n          );\n        }\n      });\n    }\n  }\n  cache.set(cacheKey, output);\n  return output;\n};\n\nfunction generateSourceMap(filename, source, generated, sourceRoot) {\n  const map = new SourceMapGenerator({ sourceRoot });\n  map.setSourceContent(filename, source);\n  generated.split(splitRE).forEach((line, index) => {\n    if (!emptyRE.test(line)) {\n      map.addMapping({\n        source: filename,\n        original: {\n          line: index + 1,\n          column: 0,\n        },\n        generated: {\n          line: index + 1,\n          column: 0,\n        },\n      });\n    }\n  });\n  return map.toJSON();\n}\n","import path from 'path';\nimport { LoaderContext } from 'sandpack-core';\nimport parse from '../parser';\n\nexport default function (code: string, loaderContext: LoaderContext) {\n  const query = loaderContext.options;\n  const { context } = query;\n  let filename = path.basename(loaderContext.path);\n  filename =\n    filename.substring(0, filename.lastIndexOf(path.extname(filename))) +\n    '.vue';\n  const sourceRoot = path.dirname(path.relative(context, loaderContext.path));\n  const parts = parse(code, filename, false, sourceRoot, query.bustCache);\n  let part = parts[query.type];\n  if (Array.isArray(part)) {\n    part = part[query.index];\n  }\n\n  return Promise.resolve({ transpiledCode: part ? part.content : '' });\n}\n"],"sourceRoot":""}