{"version":3,"sources":["webpack:////Users/jasper.furniss/codesandbox-client/standalone-packages/codesandbox-browserfs/dist/shims/buffer.js","webpack:///../common/lib/utils/jest-lite.js","webpack:///./src/sandbox/eval/tests/run-circus.ts","webpack:///./src/sandbox/eval/tests/jest-lite.ts"],"names":["module","exports","BrowserFS","BFSRequire","messages","Object","defineProperty","value","currentDescribeBlocks","run","_ref","_asyncToGenerator","rootDescribeBlock","getState","length","dispatch","name","_runTestsForDescribeBlock","makeTestResults","apply","arguments","_ref3","describeBlock","push","_getAllHooksForDescri","getAllHooksForDescribe","beforeAll","afterAll","hook","_callHook","test","tests","_runTest","child","children","pop","_x","_ref4","testContext","create","mode","hasFocusedTests","_getEachHooksForTest","getEachHooksForTest","afterEach","beforeEach","_callTest","_x2","timeout","testTimeout","callAsyncFn","fn","isHook","then","catch","error","_ref5","Error","currentTestPath","expect","testPath","_test$name$split","split","_test$name$split2","_slicedToArray","testName","describeBlocks","slice","update","currentTestName","join","snapshotState","SnapshotState","expand","updateSnapshot","setState","_setGlobalState","_x3","_x4","extend","toMatchSnapshot","toThrowErrorMatchingSnapshot","addSnapshotSerializer","addSerializer","jsdomPromise","getJSDOM","jsdomPath","src","navigator","userAgent","indexOf","Promise","resolve","reject","s","document","createElement","setAttribute","body","appendChild","onload","onerror","TestRunner","constructor","manager","_this","_defineProperty","message","testToCodeSandbox","sendMessage","TEST_START","suppressedErrors","errors","status","forEach","err","mappedErrors","mappedError","actions","show","line","_originalLineNumber","column","_originalColumnNumber","path","payload","source","TEST_END","e","errorToCodeSandbox","FILE_ERROR","DESCRIBE_START","blockName","DESCRIBE_END","_message$testName$spl","_message$testName$spl2","ADD_TEST","type","this","watching","ranTests","clear","runTests","delete","Set","addEventHandler","handleMessage","listen","handleCodeSandboxMessage","INITIALIZE","getRuntimeGlobals","dispatchJest","concat","skip","only","each","bindEach","it","_objectSpread","jestTestHooks","jest","jestMock","setTestGlobals","jsdomWindow","dom","window","defaultView","jsdomDocument","Date","fetch","jestRuntimeGlobals","globals","global","Event","keys","globalKey","includes","endsWith","filter","ext","findTests","modules","t","REMOVE_FILE","isTest","map","p","transpileTests","_this2","all","_ref2","tModule","getTranspiledModule","compilation","has","ADD_FILE","transpileModules","event","undefined","initJSDOM","_this3","JSDOM","url","location","origin","LOCALHOST_URL","pretendToBeVisual","key","oldWindow","setup","_this4","oldEnvVars","envVariables","NODE_ENV","teardown","_this5","close","_this6","force","TOTAL_TEST_START","testModules","preset","react","resolveModuleAsync","reactTs","configurations","package","parsed","setupFilesAfterEnv","setupPath","testSetup","ROOT_DESCRIBE_BLOCK","makeDescribe","ROOT_DESCRIBE_BLOCK_NAME","INITIAL_STATE","currentDescribeBlock","assertionCalls","expectedAssertionsNumber","isExpectingAssertions","resetTestState","evaluateModule","add","setTimeout","TOTAL_TEST_END","parsedError","parse","stack","matcherResult","Boolean","getDescribeBlocks","blocks","parent","reverse","_this7","duration"],"mappings":"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","file":"static/js/6.43681cc64.chunk.js","sourcesContent":["module.exports = BrowserFS.BFSRequire('buffer');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.messages = void 0;\nvar messages;\n(function (messages) {\n    messages[\"INITIALIZE\"] = \"initialize_tests\";\n    messages[\"ADD_FILE\"] = \"add_file\";\n    messages[\"REMOVE_FILE\"] = \"remove_file\";\n    messages[\"FILE_ERROR\"] = \"file_error\";\n    messages[\"TOTAL_TEST_START\"] = \"total_test_start\";\n    messages[\"TOTAL_TEST_END\"] = \"total_test_end\";\n    messages[\"TEST_START\"] = \"test_start\";\n    messages[\"TEST_END\"] = \"test_end\";\n    messages[\"DESCRIBE_START\"] = \"describe_start\";\n    messages[\"DESCRIBE_END\"] = \"describe_end\";\n    messages[\"ADD_TEST\"] = \"add_test\";\n})(messages || (exports.messages = messages = {}));\n","/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable no-use-before-define, no-restricted-syntax, no-await-in-loop */\n\nimport { getState, dispatch } from 'jest-circus/build/state';\nimport {\n  callAsyncFn,\n  getAllHooksForDescribe,\n  getEachHooksForTest,\n  makeTestResults,\n} from 'jest-circus/build/utils';\nimport { SnapshotState } from 'jest-snapshot';\nimport expect from 'expect';\n\nimport {\n  TestEntry,\n  TestResults,\n  TestContext,\n  Hook,\n  DescribeBlock,\n} from './types';\n\nconst currentDescribeBlocks = [];\n\nconst run = async (): Promise<TestResults> => {\n  const { rootDescribeBlock } = getState();\n  currentDescribeBlocks.length = 0;\n  dispatch({ name: 'run_start' });\n  await _runTestsForDescribeBlock(rootDescribeBlock);\n  dispatch({ name: 'run_finish' });\n  return makeTestResults(getState().rootDescribeBlock);\n};\n\nconst _setGlobalState = (test: TestEntry) => {\n  const { testPath: currentTestPath } = expect.getState();\n  const [testPath, testName] = test.name.split(':#:');\n\n  // remove root block\n  const [, ...describeBlocks] = [...currentDescribeBlocks];\n  const describeName =\n    describeBlocks.length > 0 ? describeBlocks.join(' ') + ' ' : '';\n\n  const currentTestName = describeName + testName;\n  const update: {\n    // @ts-ignore\n    snapshotState?: SnapshotState;\n    testPath?: string;\n    currentTestName: string;\n  } = { currentTestName };\n  if (testPath == null || currentTestPath !== testPath) {\n    // @ts-ignore\n    update.snapshotState = new SnapshotState(testPath, {\n      expand: true,\n      updateSnapshot: 'none',\n    });\n    update.testPath = testPath;\n  }\n\n  expect.setState(update);\n};\n\nconst _runTestsForDescribeBlock = async (describeBlock: DescribeBlock) => {\n  currentDescribeBlocks.push(describeBlock.name);\n  dispatch({ describeBlock, name: 'run_describe_start' });\n  const { beforeAll, afterAll } = getAllHooksForDescribe(describeBlock);\n\n  for (const hook of beforeAll) {\n    _callHook(hook);\n  }\n  for (const test of describeBlock.tests) {\n    await _runTest(test);\n  }\n  for (const child of describeBlock.children) {\n    await _runTestsForDescribeBlock(child);\n  }\n\n  for (const hook of afterAll) {\n    _callHook(hook);\n  }\n  dispatch({ describeBlock, name: 'run_describe_finish' });\n  currentDescribeBlocks.pop();\n};\n\nconst _runTest = async (test: TestEntry): Promise<void> => {\n  const testContext = Object.create(null);\n\n  const isSkipped =\n    test.mode === 'skip' ||\n    (getState().hasFocusedTests && test.mode !== 'only');\n\n  if (isSkipped) {\n    dispatch({ name: 'test_skip', test });\n    return;\n  }\n\n  const { afterEach, beforeEach } = getEachHooksForTest(test);\n\n  for (const hook of beforeEach) {\n    await _callHook(hook, testContext);\n  }\n\n  await _callTest(test, testContext);\n\n  for (const hook of afterEach) {\n    await _callHook(hook, testContext);\n  }\n};\n\nconst _callHook = (hook: Hook, testContext?: TestContext): Promise<any> => {\n  dispatch({ hook, name: 'hook_start' });\n  const { testTimeout: timeout } = getState();\n  return callAsyncFn(hook.fn, testContext, { isHook: true, timeout })\n    .then(() => dispatch({ hook, name: 'hook_success' }))\n    .catch(error => dispatch({ error, hook, name: 'hook_failure' }));\n};\n\nconst _callTest = async (\n  test: TestEntry,\n  testContext: TestContext\n): Promise<any> => {\n  dispatch({ name: 'test_start', test });\n  const { testTimeout: timeout } = getState();\n\n  if (!test.fn) {\n    throw Error(`Tests with no 'fn' should have 'mode' set to 'skipped'`);\n  }\n  _setGlobalState(test);\n\n  return callAsyncFn(test.fn, testContext, { isHook: false, timeout })\n    .then(() => dispatch({ name: 'test_success', test }))\n    .catch(error => dispatch({ error, name: 'test_failure', test }));\n};\n\nexport default run;\n","import { dispatch, actions, listen } from 'codesandbox-api';\nimport { react, reactTs } from '@codesandbox/common/lib/templates';\nimport { messages } from '@codesandbox/common/lib/utils/jest-lite';\n\nimport expect from 'expect';\nimport jestMock from 'jest-mock';\nimport jestTestHooks from 'jest-circus';\n\nimport { makeDescribe } from 'jest-circus/build/utils';\nimport path from 'path';\nimport { bind as bindEach } from 'jest-each';\n\nimport {\n  addSerializer,\n  toMatchSnapshot,\n  toThrowErrorMatchingSnapshot,\n} from 'jest-snapshot';\n\nimport {\n  addEventHandler,\n  setState,\n  dispatch as dispatchJest,\n  ROOT_DESCRIBE_BLOCK_NAME,\n} from 'jest-circus/build/state';\nimport { parse } from 'sandbox-hooks/react-error-overlay/utils/parser';\nimport { map } from 'sandbox-hooks/react-error-overlay/utils/mapper';\nimport { Manager } from 'sandpack-core';\nimport { Module } from 'sandpack-core/lib/types/module';\n\nimport run from './run-circus';\n\nimport { Event, TestEntry, DescribeBlock, TestName, TestFn } from './types';\n\nexport { messages };\n\nexpect.extend({\n  toMatchSnapshot,\n  toThrowErrorMatchingSnapshot,\n});\nexpect.addSnapshotSerializer = addSerializer;\n\nfunction addScript(src: string) {\n  return new Promise<void>((resolve, reject) => {\n    const s = document.createElement('script');\n    s.setAttribute('src', src);\n    document.body.appendChild(s);\n    s.onload = () => {\n      resolve();\n    };\n    s.onerror = error => {\n      reject(error);\n    };\n  });\n}\n\nlet jsdomPromise = null;\n/**\n * Load JSDOM while the sandbox loads. Before we run a test we make sure that this has been loaded.\n */\nconst getJSDOM = () => {\n  let jsdomPath = '/static/js/jsdom-16.3.0.min.js';\n  if (\n    navigator.userAgent.indexOf('jsdom') !== -1 &&\n    process.env.NODE_ENV === 'test'\n  ) {\n    jsdomPath = 'file://' + path.resolve('./static/js/jsdom-16.3.0.min.js');\n  }\n\n  jsdomPromise = jsdomPromise || addScript(jsdomPath);\n\n  return jsdomPromise;\n};\n\nfunction resetTestState() {\n  const ROOT_DESCRIBE_BLOCK = makeDescribe(ROOT_DESCRIBE_BLOCK_NAME);\n  const INITIAL_STATE = {\n    currentDescribeBlock: ROOT_DESCRIBE_BLOCK,\n    expand: undefined,\n    hasFocusedTests: false,\n    rootDescribeBlock: ROOT_DESCRIBE_BLOCK,\n    testTimeout: 5000,\n  };\n\n  expect.setState({\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false,\n    suppressedErrors: [],\n    testPath: null,\n    currentTestName: null,\n    snapshotState: null,\n  });\n\n  setState(INITIAL_STATE);\n}\n\nexport default class TestRunner {\n  tests: Array<Module>;\n  ranTests: Set<string>;\n  manager: Manager;\n  watching: boolean = true;\n\n  LOCALHOST_URL: string = 'http://localhost';\n\n  dom: any;\n\n  constructor(manager: Manager) {\n    this.manager = manager;\n    this.ranTests = new Set();\n\n    addEventHandler(this.handleMessage);\n    listen(this.handleCodeSandboxMessage);\n\n    this.sendMessage(messages.INITIALIZE);\n  }\n\n  public getRuntimeGlobals(module: Module) {\n    const test = (testName: TestName, fn?: TestFn) =>\n      dispatchJest({\n        fn,\n        name: 'add_test',\n        testName: `${module.path}:#:${testName}`,\n      });\n    const skip = (testName: TestName, fn?: TestFn) =>\n      dispatchJest({\n        fn,\n        mode: 'skip',\n        name: 'add_test',\n        testName: `${module.path}:#:${testName}`,\n      });\n    const only = (testName: TestName, fn: TestFn) => {\n      dispatchJest({\n        fn,\n        mode: 'only',\n        name: 'add_test',\n        testName: `${module.path}:#:${testName}`,\n      });\n    };\n    test.each = bindEach(test);\n    skip.each = bindEach(skip);\n    only.each = bindEach(only);\n\n    test.only = only;\n    test.skip = skip;\n\n    const it = test;\n    return {\n      ...jestTestHooks,\n      test,\n      jest: jestMock,\n      it,\n      expect,\n    };\n  }\n\n  /**\n   * In this function we actually set some globals on the global window. This is because there are modules out\n   * there that try to overwrite some globals that we try to set. For example, this code won't work:\n   *\n   * ```js\n   * const test = 5;\n   * ```\n   *\n   * if we add test to the scope in the function:\n   *\n   * ```ts\n   * function evaluate(test) {\n   *   const test = 5; // <- Error!\n   * }\n   * ```\n   *\n   * Because of this, we have to put these globals on the global window. The big disadvantage of this is that\n   * we cannot run these tests in parallel. If we would want to do that we could introduce the globals in separate\n   * scope (separate function) that wraps the inner function, like this:\n   *\n   * ```ts\n   * (function jestGlobals(test) {\n   *   (function evaluate() {\n   *     const test = 5; // <- No Error!\n   *   })()\n   * })\n   * ```\n   *\n   * Right now we're making sure to clean the globals up in teardown\n   *\n   * Related issue: https://github.com/codesandbox/codesandbox-client/issues/4922\n   */\n  setTestGlobals(module: Module) {\n    const jsdomWindow = this.dom.window.document.defaultView;\n    const { document: jsdomDocument } = jsdomWindow;\n\n    // Set the modules that are not set on JSDOM\n    jsdomWindow.Date = Date;\n    jsdomWindow.fetch = fetch;\n\n    const jestRuntimeGlobals = this.getRuntimeGlobals(module);\n\n    const globals = {\n      document: jsdomDocument,\n      window: jsdomWindow,\n      global: jsdomWindow,\n\n      // When calling `Event` we don't want the native `Event` but the JSDOM version\n      Event: jsdomWindow.Event,\n    };\n\n    Object.keys(jestRuntimeGlobals).forEach(globalKey => {\n      window[globalKey] = jestRuntimeGlobals[globalKey];\n    });\n\n    return globals;\n  }\n\n  static isTest(testPath: string) {\n    const endsWith = [\n      '.test.js',\n      '.test.ts',\n      '.test.tsx',\n      '.test.jsx',\n      '.spec.js',\n      '.spec.ts',\n      '.spec.tsx',\n      '.spec.jsx',\n    ];\n\n    if (\n      testPath.includes('__tests__') &&\n      (testPath.endsWith('.js') ||\n        testPath.endsWith('.ts') ||\n        testPath.endsWith('.tsx'))\n    ) {\n      return true;\n    }\n\n    return endsWith.filter(ext => testPath.endsWith(ext)).length > 0;\n  }\n\n  findTests(modules: { [path: string]: Module }) {\n    if (this.tests) {\n      this.tests.forEach(t => {\n        if (!modules[t.path]) {\n          // A removed test\n          this.sendMessage(messages.REMOVE_FILE, { path: t.path });\n        }\n      });\n    }\n    this.tests = Object.keys(modules)\n      .filter(TestRunner.isTest)\n      .map(p => modules[p]);\n\n    return this.tests;\n  }\n\n  /* istanbul ignore next */\n  async transpileTests() {\n    return Promise.all(\n      (this.tests || []).map(async t => {\n        const tModule = this.manager.getTranspiledModule(t, '');\n        if (\n          tModule.source &&\n          tModule.compilation &&\n          this.ranTests.has(t.path)\n        ) {\n          // We cached this test, don't run it again. We only run tests of changed\n          // files\n          return null;\n        }\n\n        this.sendMessage(messages.ADD_FILE, { path: t.path });\n        try {\n          await this.manager.transpileModules(t, true);\n\n          if (!tModule.source) {\n            this.ranTests.delete(t.path);\n          }\n\n          return t;\n        } catch (e) {\n          const error = await this.errorToCodeSandbox(e);\n          this.ranTests.delete(t.path);\n          this.sendMessage(messages.FILE_ERROR, { path: t.path, error });\n\n          return null;\n        }\n      })\n    );\n  }\n\n  sendMessage(event: string, message: any = {}) {\n    dispatch({\n      type: 'test',\n      event,\n      ...message,\n    });\n  }\n\n  oldWindow = {};\n  async initJSDOM() {\n    await getJSDOM();\n    const { JSDOM } = (window as any).JSDOM;\n    let url = document.location.origin;\n    if (url === 'null') {\n      url = this.LOCALHOST_URL;\n    }\n\n    this.dom = new JSDOM('<!DOCTYPE html>', {\n      pretendToBeVisual: true,\n      url,\n    });\n\n    // If there's code accessing globals (e.g. `getComputedStyle`), it will\n    // use the global window instead. We can't change a global, but we can override\n    // values over it.\n    const GLOBAL_OVERRIDE_KEYS = ['getComputedStyle'];\n    GLOBAL_OVERRIDE_KEYS.forEach(key => {\n      this.oldWindow[key] = window[key];\n      window[key] = this.dom.window[key];\n    });\n  }\n\n  oldEnvVars: { [key: string]: string };\n  async setup() {\n    this.oldEnvVars = { ...this.manager.envVariables };\n    this.manager.envVariables.NODE_ENV = 'test';\n  }\n\n  async teardown() {\n    const global = this.dom.window.document.defaultView;\n    global.close();\n    Object.defineProperty(global, 'document', { value: null });\n    this.dom = null;\n    this.manager.envVariables = this.oldEnvVars;\n\n    // Put back the old globals of the window after tests have run\n    Object.keys(this.oldWindow).forEach(key => {\n      window[key] = this.oldWindow[key];\n    });\n    this.oldWindow = {};\n\n    // @ts-expect-error We don't have the module, but the module is only used in a lazy context\n    const jestRuntimeGlobals = this.getRuntimeGlobals();\n    Object.keys(jestRuntimeGlobals).forEach(globalKey => {\n      delete window[globalKey];\n    });\n  }\n\n  /* istanbul ignore next */\n  async runTests(force: boolean = false) {\n    if (!this.watching && !force) {\n      return;\n    }\n\n    await this.initJSDOM();\n\n    this.sendMessage(messages.TOTAL_TEST_START);\n\n    let testModules: Module[] = [];\n\n    try {\n      if (this.manager.preset.name === react.name) {\n        try {\n          testModules = [\n            await this.manager.resolveModuleAsync({\n              path: './src/setupTests.js',\n            }),\n          ];\n        } catch (e) {\n          testModules = [\n            await this.manager.resolveModuleAsync({\n              path: './src/setupTests.ts',\n            }),\n          ];\n        }\n      } else if (this.manager.preset.name === reactTs.name) {\n        testModules = [\n          await this.manager.resolveModuleAsync({\n            path: './src/setupTests.ts',\n          }),\n        ];\n      } else if (this.manager.configurations.package) {\n        const { parsed } = this.manager.configurations.package;\n\n        if (parsed && parsed.jest && parsed.jest.setupFilesAfterEnv) {\n          testModules = await Promise.all(\n            parsed.jest.setupFilesAfterEnv.map((setupPath: string) =>\n              this.manager.resolveModuleAsync({\n                path: setupPath,\n              })\n            )\n          );\n        }\n      }\n    } catch (e) {\n      /* ignore */\n    }\n\n    if (testModules.length) {\n      await Promise.all(\n        testModules.map(testSetup =>\n          this.manager.transpileModules(testSetup, true)\n        )\n      );\n    }\n\n    if (this.manager.modules) {\n      this.findTests(this.manager.modules);\n    }\n\n    // $FlowIssue\n    const tests: Array<Module> = (await this.transpileTests()).filter(t => t);\n\n    resetTestState();\n\n    await this.setup();\n\n    await Promise.all(\n      tests.map(async t => {\n        dispatch(actions.error.clear(t.path, 'jest'));\n\n        try {\n          if (testModules.length) {\n            testModules.forEach(module => {\n              this.manager.evaluateModule(module, {\n                force: true,\n                globals: this.setTestGlobals(module),\n              });\n            });\n          }\n\n          this.manager.evaluateModule(t, {\n            force: true,\n            globals: this.setTestGlobals(t),\n          });\n          this.ranTests.add(t.path);\n        } catch (e) {\n          this.ranTests.delete(t.path);\n          const error = await this.errorToCodeSandbox(e);\n          this.sendMessage(messages.FILE_ERROR, { path: t.path, error });\n        }\n      })\n    );\n\n    await run();\n    await this.teardown();\n\n    setTimeout(() => {\n      this.sendMessage(messages.TOTAL_TEST_END);\n    });\n  }\n\n  async errorToCodeSandbox(\n    error: Error & {\n      matcherResult?: boolean;\n    }\n  ) {\n    const parsedError = parse(error);\n    const mappedErrors = await map(parsedError);\n\n    return {\n      name: error.name,\n      message: error.message,\n      stack: error.stack,\n      matcherResult: Boolean(error.matcherResult),\n      mappedErrors,\n    };\n  }\n\n  getDescribeBlocks(test: TestEntry) {\n    let t: TestEntry | DescribeBlock | undefined = test;\n    const blocks = [];\n\n    while (t.parent != null) {\n      blocks.push(t.parent.name);\n\n      t = t.parent;\n    }\n\n    // Remove ROOT_DESCRIBE_BLOCK\n    blocks.pop();\n\n    return blocks.reverse();\n  }\n\n  async testToCodeSandbox(test: TestEntry) {\n    const [testPath, name] = test.name.split(':#:');\n\n    const errors = await Promise.all(test.errors.map(this.errorToCodeSandbox));\n\n    return {\n      name,\n      path: testPath,\n      duration: test.duration,\n      status: test.status || 'running',\n      errors,\n      blocks: this.getDescribeBlocks(test),\n    };\n  }\n\n  handleMessage = async (message: Event) => {\n    switch (message.name) {\n      case 'test_start': {\n        const test = await this.testToCodeSandbox(message.test);\n\n        return this.sendMessage(messages.TEST_START, {\n          test,\n        });\n      }\n      case 'test_failure':\n      case 'test_success': {\n        const { suppressedErrors } = expect.getState();\n\n        if (suppressedErrors && suppressedErrors.length) {\n          /* eslint-disable no-param-reassign */\n          message.test.errors = suppressedErrors;\n          message.test.status = 'fail';\n          /* eslint-enable no-param-reassign */\n          expect.setState({ suppressedErrors: [] });\n        }\n        const test = await this.testToCodeSandbox(message.test);\n\n        if (test.errors) {\n          test.errors.forEach(err => {\n            if (err.mappedErrors && err.mappedErrors.length) {\n              const { mappedErrors } = err;\n              const [mappedError] = mappedErrors;\n\n              dispatch(\n                actions.error.show(err.name || 'Jest Error', err.message, {\n                  line: mappedError._originalLineNumber,\n                  column: mappedError._originalColumnNumber,\n                  path: test.path,\n                  payload: {},\n                  source: 'jest',\n                })\n              );\n            }\n          });\n        }\n        try {\n          return this.sendMessage(messages.TEST_END, {\n            test,\n          });\n        } catch (e) {\n          const error = await this.errorToCodeSandbox(e);\n          return this.sendMessage(messages.FILE_ERROR, {\n            path: test.path,\n            error,\n          });\n        }\n      }\n      case 'start_describe_definition': {\n        return this.sendMessage(messages.DESCRIBE_START, {\n          blockName: message.blockName,\n        });\n      }\n      case 'finish_describe_definition': {\n        return this.sendMessage(messages.DESCRIBE_END);\n      }\n      case 'add_test': {\n        const [testPath, testName] = message.testName.split(':#:');\n        return this.sendMessage(messages.ADD_TEST, {\n          testName,\n          path: testPath,\n          mode: message.mode,\n        });\n      }\n      default: {\n        return null;\n      }\n    }\n  };\n\n  handleCodeSandboxMessage = (message: any) => {\n    switch (message.type) {\n      case 'set-test-watching':\n        this.watching = message.watching;\n        if (message.watching === true) {\n          this.ranTests.clear();\n          this.runTests(true);\n        }\n        break;\n      case 'run-all-tests':\n        this.ranTests.clear();\n        this.runTests(true);\n        break;\n      case 'run-tests': {\n        const testPath = message.path;\n\n        this.ranTests.delete(testPath);\n        this.runTests();\n        break;\n      }\n    }\n  };\n\n  // We stub this, because old versions of CodeSandbox still needs this\n  reportError = () => {};\n}\n"],"sourceRoot":""}