{"version":3,"sources":["webpack:////Users/jasper.furniss/codesandbox-client/node_modules/babel-plugin-jsx-pragmatic/jsx-pragmatic.js","webpack:////Users/jasper.furniss/codesandbox-client/node_modules/babel-plugin-syntax-jsx/lib/index.js"],"names":["module","exports","babel","visitor","t","types","Program","exit","path","state","get","unshiftContainer","importDeclaration","importSpecifier","identifier","opts","import","export","stringLiteral","getPragmaImport","JSXElement","set","pre","this","Error","inherits","__esModule","default","manipulateOptions","parserOpts","plugins","push"],"mappings":"mIAMAA,EAAOC,QAAU,SAAuBC,GACtC,IAEEC,EADAC,EAAIF,EAAMG,MAqCZ,OAvBAF,EAAU,CACRG,QAAS,CACPC,KAAM,SAAUC,EAAMC,GACdA,EAAMC,IAAI,gBAIhBF,EAAKG,iBAAiB,OAlB5B,SAA0BF,GACxB,OAAOL,EAAEQ,kBACP,CAACR,EAAES,gBACDT,EAAEU,WAAWL,EAAMM,KAAKC,QACxBZ,EAAEU,WAAWL,EAAMM,KAAKE,QAAU,aAEpCb,EAAEc,cAAcT,EAAMM,KAAKf,SAYKmB,CAAgBV,MAUlDW,WAAY,SAAUZ,EAAMC,GAC1BA,EAAMY,IAAI,eAAe,KAKtB,CACLC,IAAK,WACH,IAAOC,KAAKR,KAAKf,SAAUuB,KAAKR,KAAKC,OACnC,MAAM,IAAIQ,MAAM,uEAGpBC,SAAU,EAAQ,2DAClBtB,QAASA,K,uFClDbF,EAAQyB,YAAa,EAErBzB,EAAQ0B,QAAU,WAChB,MAAO,CACLC,kBAAmB,SAA2Bb,EAAMc,GAClDA,EAAWC,QAAQC,KAAK,UAK9B/B,EAAOC,QAAUA,EAAiB","file":"babel-plugin-jsx-pragmatic.babel-transpiler.6bd46bbc.worker.js","sourcesContent":["/**\n * Insert code to load a module when JSX is detected.\n * This is supposed to load a module corresponding to the `pragma` option of\n * the JSX transform.\n */\n\nmodule.exports = function jsxPragmatic (babel) {\n  var\n    t = babel.types,\n    visitor = {};\n\n  function getPragmaImport (state) {\n    return t.importDeclaration(\n      [t.importSpecifier(\n        t.identifier(state.opts.import),\n        t.identifier(state.opts.export || \"default\")\n      )],\n      t.stringLiteral(state.opts.module)\n    );\n  }\n  // getPragmaImport\n\n  visitor = {\n    Program: {\n      exit: function (path, state) {\n        if (! state.get('jsxDetected')) return;\n\n        // Apparently it's now safe to do this even if Program begins with\n        // directives.\n        path.unshiftContainer('body', getPragmaImport(state));\n      },\n      // exit\n    },\n    // Program\n\n    // It seems pretty hokey that this'll work even if JSX has already been\n    // transformed, but apparently that's the basis for the whole plugin\n    // architecture for babel@6, so I'm rolling with it and maybe it'll make\n    // more sense to me once I understand it better.\n    JSXElement: function (path, state) {\n      state.set('jsxDetected', true);\n    },\n    // JSXElement\n  };\n\n  return {\n    pre: function () {\n      if (! (this.opts.module && this.opts.import)) {\n        throw new Error(\"babel-plugin-jsx-pragmatic: You must specify `module` and `import`\");\n      }\n    },\n    inherits: require(\"babel-plugin-syntax-jsx\"),\n    visitor: visitor,\n  };\n};\n// jsxPragmatic\n","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function () {\n  return {\n    manipulateOptions: function manipulateOptions(opts, parserOpts) {\n      parserOpts.plugins.push(\"jsx\");\n    }\n  };\n};\n\nmodule.exports = exports[\"default\"];"],"sourceRoot":""}