<%= pb_rails("background", props: {
    background_color: "light",
    padding: "xl"
}) do %>
    <%= pb_rails("flex", props: {
        max_width: "xxl",
        flex_direction: { xs: "column", sm: "column", md: "column", lg: "row", xl: "row" }
    }) do %>
        <%= pb_rails("flex/flex_item", props: {
            display: { xs: "none", sm: "flex" },
            padding_bottom: "xl",
        }) do %>
            <div class="container">
                <%= pb_rails("card", props: {
                    shadow: "deeper",
                    justify_content: "center",
                    border_radius: "lg",
                    classname: "card card1"
                }) do %>
                    <%= pb_rails("user", props: {
                        name: "Anna Black",
                        title: "LVL II â€¢ Sales Representative",
                        orientation: "horizontal",
                        align: "center",
                        size: "lg",
                        avatar_url: "https://randomuser.me/api/portraits/women/44.jpg"
                    }) %>
                <% end %>
                <% react_contents = Rails.root.join("app/views/pages/code_snippets/user_jsx.txt").read %>
                <%= pb_rails("card", props: {
                    shadow: "deeper",
                    dark: true,
                    background: "dark",
                    border_radius: "lg",
                    padding: "none",
                    margin: "none",
                    classname: "card card2"
                })  do %>
                    <div class="vertical-bar"></div>
                    <div class="pb--codeCopy">
                        <pre class="highlight"><%= raw render_code(react_contents, "jsx") %></pre>
                    </div>
                <% end %>
            </div>
        <% end %>
    <% end %>
<% end %>

<script>
    const container = document.querySelector('.container');
    const card2 = document.querySelector('.card2');
    const verticalBar = document.querySelector('.vertical-bar');

    let isDragging = false;
    let startOffsetX = 0;
    let currentOffsetX = 0;

    verticalBar.addEventListener('mousedown', (e) => {
        isDragging = true;
        startOffsetX = e.clientX - verticalBar.getBoundingClientRect().left;
        currentOffsetX = offsetX;
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
    });

    document.addEventListener('mousemove', (e) => {
        if (isDragging) {
            const containerRect = container.getBoundingClientRect();
            const containerCenterX = containerRect.left + containerRect.width / 2;
            const maxOffset = containerRect.width;
            offsetX = Math.min(Math.max(currentOffsetX + e.clientX - containerCenterX - startOffsetX, -maxOffset), maxOffset);
            card2.style.transform = `translateX(${offsetX}px)`;
        }
    });
</script>